
// Generated file
// DO NOT EDIT THIS FILE

#if canImport(UIKit)
import UIKit

extension Modify.DynamicMemberWrap where T: UIPresentationController {
    @discardableResult
    @_disfavoredOverload
    public func containerViewWillLayoutSubviews() -> T {
        self.value.containerViewWillLayoutSubviews()
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func containerViewDidLayoutSubviews() -> T {
        self.value.containerViewDidLayoutSubviews()
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func presentationTransitionWillBegin() -> T {
        self.value.presentationTransitionWillBegin()
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func presentationTransitionDidEnd(_ completed: Swift.Bool) -> T {
        self.value.presentationTransitionDidEnd(completed)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func dismissalTransitionWillBegin() -> T {
        self.value.dismissalTransitionWillBegin()
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func dismissalTransitionDidEnd(_ completed: Swift.Bool) -> T {
        self.value.dismissalTransitionDidEnd(completed)
        return self.value
    }

    @available(iOS 8.0, *)
    @discardableResult
    @_disfavoredOverload
    public func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?) -> T {
        self.value.traitCollectionDidChange(previousTraitCollection)
        return self.value
    }

    @available(iOS 8.0, *)
    @discardableResult
    @_disfavoredOverload
    public func preferredContentSizeDidChange(forChildContentContainer container: UIKit.UIContentContainer) -> T {
        self.value.preferredContentSizeDidChange(forChildContentContainer: container)
        return self.value
    }

    @available(iOS 8.0, *)
    @discardableResult
    @_disfavoredOverload
    public func systemLayoutFittingSizeDidChange(forChildContentContainer container: UIKit.UIContentContainer) -> T {
        self.value.systemLayoutFittingSizeDidChange(forChildContentContainer: container)
        return self.value
    }

    @available(iOS 8.0, *)
    @discardableResult
    @_disfavoredOverload
    public func viewWillTransition(to size: CoreFoundation.CGSize, with coordinator: UIKit.UIViewControllerTransitionCoordinator) -> T {
        self.value.viewWillTransition(to: size, with: coordinator)
        return self.value
    }

    @available(iOS 8.0, *)
    @discardableResult
    @_disfavoredOverload
    public func willTransition(to newCollection: UIKit.UITraitCollection, with coordinator: UIKit.UIViewControllerTransitionCoordinator) -> T {
        self.value.willTransition(to: newCollection, with: coordinator)
        return self.value
    }

    @available(iOS 9.0, *)
    @discardableResult
    @_disfavoredOverload
    public func setNeedsFocusUpdate() -> T {
        self.value.setNeedsFocusUpdate()
        return self.value
    }

    @available(iOS 9.0, *)
    @discardableResult
    @_disfavoredOverload
    public func updateFocusIfNeeded() -> T {
        self.value.updateFocusIfNeeded()
        return self.value
    }

    @available(iOS 9.0, *)
    @discardableResult
    @_disfavoredOverload
    public func didUpdateFocus(in context: UIKit.UIFocusUpdateContext, with coordinator: UIKit.UIFocusAnimationCoordinator) -> T {
        self.value.didUpdateFocus(in: context, with: coordinator)
        return self.value
    }
}

#endif
