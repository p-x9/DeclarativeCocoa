
// Generated file
// DO NOT EDIT THIS FILE

#if canImport(UIKit)
import UIKit

extension Modify.DynamicMemberWrap where T: UIDocument {
    @discardableResult
    @_disfavoredOverload
    public func disableEditing() -> T {
        self.value.disableEditing()
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func enableEditing() -> T {
        self.value.enableEditing()
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func updateChangeCount(_ change: UIKit.UIDocument.ChangeKind) -> T {
        self.value.updateChangeCount(change)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func updateChangeCount(withToken changeCountToken: Any, for saveOperation: UIKit.UIDocument.SaveOperation) -> T {
        self.value.updateChangeCount(withToken: changeCountToken, for: saveOperation)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func performAsynchronousFileAccess(_ block: @escaping () -> Swift.Void) -> T {
        self.value.performAsynchronousFileAccess(block)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func handleError(_ error: Swift.Error, userInteractionPermitted: Swift.Bool) -> T {
        self.value.handleError(error, userInteractionPermitted: userInteractionPermitted)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func finishedHandlingError(_ error: Swift.Error, recovered: Swift.Bool) -> T {
        self.value.finishedHandlingError(error, recovered: recovered)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func userInteractionNoLongerPermitted(forError error: Swift.Error) -> T {
        self.value.userInteractionNoLongerPermitted(forError: error)
        return self.value
    }

    @available(iOS 5.0, *)
    @discardableResult
    @_disfavoredOverload
    public func relinquishPresentedItem(toReader reader: @escaping @Sendable ((() -> Swift.Void)?) -> Swift.Void) -> T {
        self.value.relinquishPresentedItem(toReader: reader)
        return self.value
    }

    @available(iOS 5.0, *)
    @discardableResult
    @_disfavoredOverload
    public func relinquishPresentedItem(toWriter writer: @escaping @Sendable ((() -> Swift.Void)?) -> Swift.Void) -> T {
        self.value.relinquishPresentedItem(toWriter: writer)
        return self.value
    }

    @available(iOS 5.0, *)
    @discardableResult
    @_disfavoredOverload
    public func savePresentedItemChanges(completionHandler: @escaping @Sendable (Swift.Error?) -> Swift.Void) -> T {
        self.value.savePresentedItemChanges(completionHandler: completionHandler)
        return self.value
    }

    @available(iOS 5.0, *)
    @discardableResult
    @_disfavoredOverload
    public func accommodatePresentedItemDeletion(completionHandler: @escaping @Sendable (Swift.Error?) -> Swift.Void) -> T {
        self.value.accommodatePresentedItemDeletion(completionHandler: completionHandler)
        return self.value
    }

    @available(iOS 5.0, *)
    @discardableResult
    @_disfavoredOverload
    public func presentedItemDidMove(to newURL: Foundation.URL) -> T {
        self.value.presentedItemDidMove(to: newURL)
        return self.value
    }

    @available(iOS 5.0, *)
    @discardableResult
    @_disfavoredOverload
    public func presentedItemDidChange() -> T {
        self.value.presentedItemDidChange()
        return self.value
    }

    @available(iOS 11.0, *)
    @discardableResult
    @_disfavoredOverload
    public func presentedItemDidChangeUbiquityAttributes(_ attributes: Swift.Set<Foundation.URLResourceKey>) -> T {
        self.value.presentedItemDidChangeUbiquityAttributes(attributes)
        return self.value
    }

    @available(iOS 5.0, *)
    @discardableResult
    @_disfavoredOverload
    public func presentedItemDidGain(_ version: Foundation.NSFileVersion) -> T {
        self.value.presentedItemDidGain(version)
        return self.value
    }

    @available(iOS 5.0, *)
    @discardableResult
    @_disfavoredOverload
    public func presentedItemDidLose(_ version: Foundation.NSFileVersion) -> T {
        self.value.presentedItemDidLose(version)
        return self.value
    }

    @available(iOS 5.0, *)
    @discardableResult
    @_disfavoredOverload
    public func presentedItemDidResolveConflict(_ version: Foundation.NSFileVersion) -> T {
        self.value.presentedItemDidResolveConflict(version)
        return self.value
    }

    @available(iOS 5.0, *)
    @discardableResult
    @_disfavoredOverload
    public func accommodatePresentedSubitemDeletion(at url: Foundation.URL, completionHandler: @escaping @Sendable (Swift.Error?) -> Swift.Void) -> T {
        self.value.accommodatePresentedSubitemDeletion(at: url, completionHandler: completionHandler)
        return self.value
    }

    @available(iOS 5.0, *)
    @discardableResult
    @_disfavoredOverload
    public func presentedSubitemDidAppear(at url: Foundation.URL) -> T {
        self.value.presentedSubitemDidAppear(at: url)
        return self.value
    }

    @available(iOS 5.0, *)
    @discardableResult
    @_disfavoredOverload
    public func presentedSubitem(at oldURL: Foundation.URL, didMoveTo newURL: Foundation.URL) -> T {
        self.value.presentedSubitem(at: oldURL, didMoveTo: newURL)
        return self.value
    }

    @available(iOS 5.0, *)
    @discardableResult
    @_disfavoredOverload
    public func presentedSubitemDidChange(at url: Foundation.URL) -> T {
        self.value.presentedSubitemDidChange(at: url)
        return self.value
    }

    @available(iOS 5.0, *)
    @discardableResult
    @_disfavoredOverload
    public func presentedSubitem(at url: Foundation.URL, didGain version: Foundation.NSFileVersion) -> T {
        self.value.presentedSubitem(at: url, didGain: version)
        return self.value
    }

    @available(iOS 5.0, *)
    @discardableResult
    @_disfavoredOverload
    public func presentedSubitem(at url: Foundation.URL, didLose version: Foundation.NSFileVersion) -> T {
        self.value.presentedSubitem(at: url, didLose: version)
        return self.value
    }

    @available(iOS 5.0, *)
    @discardableResult
    @_disfavoredOverload
    public func presentedSubitem(at url: Foundation.URL, didResolve version: Foundation.NSFileVersion) -> T {
        self.value.presentedSubitem(at: url, didResolve: version)
        return self.value
    }

    @available(iOS 8.0, *)
    @discardableResult
    @_disfavoredOverload
    public func updateUserActivityState(_ userActivity: Foundation.NSUserActivity) -> T {
        self.value.updateUserActivityState(userActivity)
        return self.value
    }

    @available(iOS 8.0, *)
    @discardableResult
    @_disfavoredOverload
    public func restoreUserActivityState(_ userActivity: Foundation.NSUserActivity) -> T {
        self.value.restoreUserActivityState(userActivity)
        return self.value
    }
}

#endif
