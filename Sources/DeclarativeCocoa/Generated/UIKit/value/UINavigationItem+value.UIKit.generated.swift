
// Generated file
// DO NOT EDIT THIS FILE

#if canImport(UIKit)
import UIKit

extension Modify.DynamicMemberWrap where T: UINavigationItem {
    @discardableResult
    @_disfavoredOverload
    public func setHidesBackButton(_ hidesBackButton: Swift.Bool, animated: Swift.Bool) -> T {
        self.value.setHidesBackButton(hidesBackButton, animated: animated)
        return self.value
    }

    @available(iOS 5.0, *)
    @discardableResult
    @_disfavoredOverload
    public func setLeftBarButtonItems(_ items: [UIKit.UIBarButtonItem]?, animated: Swift.Bool) -> T {
        self.value.setLeftBarButtonItems(items, animated: animated)
        return self.value
    }

    @available(iOS 5.0, *)
    @discardableResult
    @_disfavoredOverload
    public func setRightBarButtonItems(_ items: [UIKit.UIBarButtonItem]?, animated: Swift.Bool) -> T {
        self.value.setRightBarButtonItems(items, animated: animated)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func setLeftBarButton(_ item: UIKit.UIBarButtonItem?, animated: Swift.Bool) -> T {
        self.value.setLeftBarButton(item, animated: animated)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func setRightBarButton(_ item: UIKit.UIBarButtonItem?, animated: Swift.Bool) -> T {
        self.value.setRightBarButton(item, animated: animated)
        return self.value
    }

    @available(iOS 2.0, *)
    @discardableResult
    @_disfavoredOverload
    public func encode(with coder: Foundation.NSCoder) -> T {
        self.value.encode(with: coder)
        return self.value
    }
}

#endif
