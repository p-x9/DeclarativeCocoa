
// Generated file
// DO NOT EDIT THIS FILE

#if canImport(UIKit)
import UIKit

@available(iOS 13.0, *)
extension Modify.DynamicMemberWrap where T: UIMenuBuilder {
    @discardableResult
    @_disfavoredOverload
    public func replace(menu replacedIdentifier: UIKit.UIMenu.Identifier, with replacementMenu: UIKit.UIMenu) -> T {
        self.value.replace(menu: replacedIdentifier, with: replacementMenu)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func replaceChildren(ofMenu parentIdentifier: UIKit.UIMenu.Identifier, from childrenBlock: ([UIKit.UIMenuElement]) -> [UIKit.UIMenuElement]) -> T {
        self.value.replaceChildren(ofMenu: parentIdentifier, from: childrenBlock)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func insertSibling(_ siblingMenu: UIKit.UIMenu, beforeMenu siblingIdentifier: UIKit.UIMenu.Identifier) -> T {
        self.value.insertSibling(siblingMenu, beforeMenu: siblingIdentifier)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func insertSibling(_ siblingMenu: UIKit.UIMenu, afterMenu siblingIdentifier: UIKit.UIMenu.Identifier) -> T {
        self.value.insertSibling(siblingMenu, afterMenu: siblingIdentifier)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func insertChild(_ childMenu: UIKit.UIMenu, atStartOfMenu parentIdentifier: UIKit.UIMenu.Identifier) -> T {
        self.value.insertChild(childMenu, atStartOfMenu: parentIdentifier)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func insertChild(_ childMenu: UIKit.UIMenu, atEndOfMenu parentIdentifier: UIKit.UIMenu.Identifier) -> T {
        self.value.insertChild(childMenu, atEndOfMenu: parentIdentifier)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func remove(menu removedIdentifier: UIKit.UIMenu.Identifier) -> T {
        self.value.remove(menu: removedIdentifier)
        return self.value
    }
}

#endif
