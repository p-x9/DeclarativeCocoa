
// Generated file
// DO NOT EDIT THIS FILE

#if canImport(UIKit)
import UIKit

extension Modify.DynamicMemberWrap where T: NSLayoutManager {
    @discardableResult
    @_disfavoredOverload
    public func addTextContainer(_ container: UIKit.NSTextContainer) -> T {
        self.value.addTextContainer(container)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func insertTextContainer(_ container: UIKit.NSTextContainer, at index: Swift.Int) -> T {
        self.value.insertTextContainer(container, at: index)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func removeTextContainer(at index: Swift.Int) -> T {
        self.value.removeTextContainer(at: index)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func textContainerChangedGeometry(_ container: UIKit.NSTextContainer) -> T {
        self.value.textContainerChangedGeometry(container)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func invalidateGlyphs(forCharacterRange charRange: Foundation.NSRange, changeInLength delta: Swift.Int, actualCharacterRange actualCharRange: Foundation.NSRangePointer?) -> T {
        self.value.invalidateGlyphs(forCharacterRange: charRange, changeInLength: delta, actualCharacterRange: actualCharRange)
        return self.value
    }

    @available(iOS 7.0, *)
    @discardableResult
    @_disfavoredOverload
    public func invalidateLayout(forCharacterRange charRange: Foundation.NSRange, actualCharacterRange actualCharRange: Foundation.NSRangePointer?) -> T {
        self.value.invalidateLayout(forCharacterRange: charRange, actualCharacterRange: actualCharRange)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func invalidateDisplay(forCharacterRange charRange: Foundation.NSRange) -> T {
        self.value.invalidateDisplay(forCharacterRange: charRange)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func invalidateDisplay(forGlyphRange glyphRange: Foundation.NSRange) -> T {
        self.value.invalidateDisplay(forGlyphRange: glyphRange)
        return self.value
    }

    @available(iOS 7.0, *)
    @discardableResult
    @_disfavoredOverload
    public func processEditing(for textStorage: UIKit.NSTextStorage, edited editMask: UIKit.NSTextStorage.EditActions, range newCharRange: Foundation.NSRange, changeInLength delta: Swift.Int, invalidatedRange invalidatedCharRange: Foundation.NSRange) -> T {
        self.value.processEditing(for: textStorage, edited: editMask, range: newCharRange, changeInLength: delta, invalidatedRange: invalidatedCharRange)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func ensureGlyphs(forCharacterRange charRange: Foundation.NSRange) -> T {
        self.value.ensureGlyphs(forCharacterRange: charRange)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func ensureGlyphs(forGlyphRange glyphRange: Foundation.NSRange) -> T {
        self.value.ensureGlyphs(forGlyphRange: glyphRange)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func ensureLayout(forCharacterRange charRange: Foundation.NSRange) -> T {
        self.value.ensureLayout(forCharacterRange: charRange)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func ensureLayout(forGlyphRange glyphRange: Foundation.NSRange) -> T {
        self.value.ensureLayout(forGlyphRange: glyphRange)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func ensureLayout(for container: UIKit.NSTextContainer) -> T {
        self.value.ensureLayout(for: container)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func ensureLayout(forBoundingRect bounds: CoreFoundation.CGRect, in container: UIKit.NSTextContainer) -> T {
        self.value.ensureLayout(forBoundingRect: bounds, in: container)
        return self.value
    }

    @available(iOS 7.0, *)
    @discardableResult
    @_disfavoredOverload
    public func setGlyphs(_ glyphs: Swift.UnsafePointer<CoreGraphics.CGGlyph>, properties props: Swift.UnsafePointer<UIKit.NSLayoutManager.GlyphProperty>, characterIndexes charIndexes: Swift.UnsafePointer<Swift.Int>, font aFont: UIKit.UIFont, forGlyphRange glyphRange: Foundation.NSRange) -> T {
        self.value.setGlyphs(glyphs, properties: props, characterIndexes: charIndexes, font: aFont, forGlyphRange: glyphRange)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func setTextContainer(_ container: UIKit.NSTextContainer, forGlyphRange glyphRange: Foundation.NSRange) -> T {
        self.value.setTextContainer(container, forGlyphRange: glyphRange)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func setLineFragmentRect(_ fragmentRect: CoreFoundation.CGRect, forGlyphRange glyphRange: Foundation.NSRange, usedRect: CoreFoundation.CGRect) -> T {
        self.value.setLineFragmentRect(fragmentRect, forGlyphRange: glyphRange, usedRect: usedRect)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func setExtraLineFragmentRect(_ fragmentRect: CoreFoundation.CGRect, usedRect: CoreFoundation.CGRect, textContainer container: UIKit.NSTextContainer) -> T {
        self.value.setExtraLineFragmentRect(fragmentRect, usedRect: usedRect, textContainer: container)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func setLocation(_ location: CoreFoundation.CGPoint, forStartOfGlyphRange glyphRange: Foundation.NSRange) -> T {
        self.value.setLocation(location, forStartOfGlyphRange: glyphRange)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func setNotShownAttribute(_ flag: Swift.Bool, forGlyphAt glyphIndex: Swift.Int) -> T {
        self.value.setNotShownAttribute(flag, forGlyphAt: glyphIndex)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func setDrawsOutsideLineFragment(_ flag: Swift.Bool, forGlyphAt glyphIndex: Swift.Int) -> T {
        self.value.setDrawsOutsideLineFragment(flag, forGlyphAt: glyphIndex)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func setAttachmentSize(_ attachmentSize: CoreFoundation.CGSize, forGlyphRange glyphRange: Foundation.NSRange) -> T {
        self.value.setAttachmentSize(attachmentSize, forGlyphRange: glyphRange)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func getFirstUnlaidCharacterIndex(_ charIndex: Swift.UnsafeMutablePointer<Swift.Int>?, glyphIndex: Swift.UnsafeMutablePointer<Swift.Int>?) -> T {
        self.value.getFirstUnlaidCharacterIndex(charIndex, glyphIndex: glyphIndex)
        return self.value
    }

    @available(iOS 7.0, *)
    @discardableResult
    @_disfavoredOverload
    public func enumerateLineFragments(forGlyphRange glyphRange: Foundation.NSRange, using block: @escaping (CoreFoundation.CGRect, CoreFoundation.CGRect, UIKit.NSTextContainer, Foundation.NSRange, Swift.UnsafeMutablePointer<ObjectiveC.ObjCBool>) -> Swift.Void) -> T {
        self.value.enumerateLineFragments(forGlyphRange: glyphRange, using: block)
        return self.value
    }

    @available(iOS 7.0, *)
    @discardableResult
    @_disfavoredOverload
    public func enumerateEnclosingRects(forGlyphRange glyphRange: Foundation.NSRange, withinSelectedGlyphRange selectedRange: Foundation.NSRange, in textContainer: UIKit.NSTextContainer, using block: @escaping (CoreFoundation.CGRect, Swift.UnsafeMutablePointer<ObjectiveC.ObjCBool>) -> Swift.Void) -> T {
        self.value.enumerateEnclosingRects(forGlyphRange: glyphRange, withinSelectedGlyphRange: selectedRange, in: textContainer, using: block)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func drawBackground(forGlyphRange glyphsToShow: Foundation.NSRange, at origin: CoreFoundation.CGPoint) -> T {
        self.value.drawBackground(forGlyphRange: glyphsToShow, at: origin)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func drawGlyphs(forGlyphRange glyphsToShow: Foundation.NSRange, at origin: CoreFoundation.CGPoint) -> T {
        self.value.drawGlyphs(forGlyphRange: glyphsToShow, at: origin)
        return self.value
    }

    @available(iOS 13.0, *)
    @discardableResult
    @_disfavoredOverload
    public func showCGGlyphs(_ glyphs: Swift.UnsafePointer<CoreGraphics.CGGlyph>, positions: Swift.UnsafePointer<CoreFoundation.CGPoint>, count glyphCount: Swift.Int, font: UIKit.UIFont, textMatrix: CoreFoundation.CGAffineTransform, attributes: [Foundation.NSAttributedString.Key : Any] = [:], in CGContext: CoreGraphics.CGContext) -> T {
        self.value.showCGGlyphs(glyphs, positions: positions, count: glyphCount, font: font, textMatrix: textMatrix, attributes: attributes, in: CGContext)
        return self.value
    }

    @available(iOS 7.0, *)
    @discardableResult
    @_disfavoredOverload
    public func fillBackgroundRectArray(_ rectArray: Swift.UnsafePointer<CoreFoundation.CGRect>, count rectCount: Swift.Int, forCharacterRange charRange: Foundation.NSRange, color: UIKit.UIColor) -> T {
        self.value.fillBackgroundRectArray(rectArray, count: rectCount, forCharacterRange: charRange, color: color)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func drawUnderline(forGlyphRange glyphRange: Foundation.NSRange, underlineType underlineVal: UIKit.NSUnderlineStyle, baselineOffset: CoreFoundation.CGFloat, lineFragmentRect lineRect: CoreFoundation.CGRect, lineFragmentGlyphRange lineGlyphRange: Foundation.NSRange, containerOrigin: CoreFoundation.CGPoint) -> T {
        self.value.drawUnderline(forGlyphRange: glyphRange, underlineType: underlineVal, baselineOffset: baselineOffset, lineFragmentRect: lineRect, lineFragmentGlyphRange: lineGlyphRange, containerOrigin: containerOrigin)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func underlineGlyphRange(_ glyphRange: Foundation.NSRange, underlineType underlineVal: UIKit.NSUnderlineStyle, lineFragmentRect lineRect: CoreFoundation.CGRect, lineFragmentGlyphRange lineGlyphRange: Foundation.NSRange, containerOrigin: CoreFoundation.CGPoint) -> T {
        self.value.underlineGlyphRange(glyphRange, underlineType: underlineVal, lineFragmentRect: lineRect, lineFragmentGlyphRange: lineGlyphRange, containerOrigin: containerOrigin)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func drawStrikethrough(forGlyphRange glyphRange: Foundation.NSRange, strikethroughType strikethroughVal: UIKit.NSUnderlineStyle, baselineOffset: CoreFoundation.CGFloat, lineFragmentRect lineRect: CoreFoundation.CGRect, lineFragmentGlyphRange lineGlyphRange: Foundation.NSRange, containerOrigin: CoreFoundation.CGPoint) -> T {
        self.value.drawStrikethrough(forGlyphRange: glyphRange, strikethroughType: strikethroughVal, baselineOffset: baselineOffset, lineFragmentRect: lineRect, lineFragmentGlyphRange: lineGlyphRange, containerOrigin: containerOrigin)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func strikethroughGlyphRange(_ glyphRange: Foundation.NSRange, strikethroughType strikethroughVal: UIKit.NSUnderlineStyle, lineFragmentRect lineRect: CoreFoundation.CGRect, lineFragmentGlyphRange lineGlyphRange: Foundation.NSRange, containerOrigin: CoreFoundation.CGPoint) -> T {
        self.value.strikethroughGlyphRange(glyphRange, strikethroughType: strikethroughVal, lineFragmentRect: lineRect, lineFragmentGlyphRange: lineGlyphRange, containerOrigin: containerOrigin)
        return self.value
    }

    @available(iOS 7.0, *)
    @discardableResult
    @_disfavoredOverload
    public func encode(with coder: Foundation.NSCoder) -> T {
        self.value.encode(with: coder)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    @available(iOS, introduced: 7.0, deprecated: 13.0)
    public func showCGGlyphs(_ glyphs: Swift.UnsafePointer<CoreGraphics.CGGlyph>, positions: Swift.UnsafePointer<CoreFoundation.CGPoint>, count glyphCount: Swift.Int, font: UIKit.UIFont, matrix textMatrix: CoreFoundation.CGAffineTransform, attributes: [Foundation.NSAttributedString.Key : Any] = [:], in graphicsContext: CoreGraphics.CGContext) -> T {
        self.value.showCGGlyphs(glyphs, positions: positions, count: glyphCount, font: font, matrix: textMatrix, attributes: attributes, in: graphicsContext)
        return self.value
    }
}

#endif
