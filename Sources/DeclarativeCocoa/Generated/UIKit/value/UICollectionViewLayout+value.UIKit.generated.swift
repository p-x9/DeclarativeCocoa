
// Generated file
// DO NOT EDIT THIS FILE

#if canImport(UIKit)
import UIKit

extension Modify.DynamicMemberWrap where T: UICollectionViewLayout {
    @discardableResult
    @_disfavoredOverload
    public func invalidateLayout() -> T {
        self.value.invalidateLayout()
        return self.value
    }

    @available(iOS 7.0, *)
    @discardableResult
    @_disfavoredOverload
    public func invalidateLayout(with context: UIKit.UICollectionViewLayoutInvalidationContext) -> T {
        self.value.invalidateLayout(with: context)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func register(_ viewClass: Swift.AnyClass?, forDecorationViewOfKind elementKind: Swift.String) -> T {
        self.value.register(viewClass, forDecorationViewOfKind: elementKind)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func register(_ nib: UIKit.UINib?, forDecorationViewOfKind elementKind: Swift.String) -> T {
        self.value.register(nib, forDecorationViewOfKind: elementKind)
        return self.value
    }

    @available(iOS 6.0, *)
    @discardableResult
    @_disfavoredOverload
    public func encode(with coder: Foundation.NSCoder) -> T {
        self.value.encode(with: coder)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func prepare(forCollectionViewUpdates updateItems: [UIKit.UICollectionViewUpdateItem]) -> T {
        self.value.prepare(forCollectionViewUpdates: updateItems)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func finalizeCollectionViewUpdates() -> T {
        self.value.finalizeCollectionViewUpdates()
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func prepare(forAnimatedBoundsChange oldBounds: CoreFoundation.CGRect) -> T {
        self.value.prepare(forAnimatedBoundsChange: oldBounds)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func finalizeAnimatedBoundsChange() -> T {
        self.value.finalizeAnimatedBoundsChange()
        return self.value
    }

    @available(iOS 7.0, *)
    @discardableResult
    @_disfavoredOverload
    public func prepareForTransition(to newLayout: UIKit.UICollectionViewLayout) -> T {
        self.value.prepareForTransition(to: newLayout)
        return self.value
    }

    @available(iOS 7.0, *)
    @discardableResult
    @_disfavoredOverload
    public func prepareForTransition(from oldLayout: UIKit.UICollectionViewLayout) -> T {
        self.value.prepareForTransition(from: oldLayout)
        return self.value
    }

    @available(iOS 7.0, *)
    @discardableResult
    @_disfavoredOverload
    public func finalizeLayoutTransition() -> T {
        self.value.finalizeLayoutTransition()
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func prepare() -> T {
        self.value.prepare()
        return self.value
    }
}

#endif
