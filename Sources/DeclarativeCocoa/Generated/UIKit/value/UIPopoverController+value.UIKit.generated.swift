
// Generated file
// DO NOT EDIT THIS FILE

#if canImport(UIKit)
import UIKit

@available(iOS, introduced: 3.2, deprecated: 9.0, message: "UIPopoverController is deprecated. Popovers are now implemented as UIViewController presentations. Use a modal presentation style of UIModalPresentationPopover and UIPopoverPresentationController.")
extension Modify.DynamicMemberWrap where T: UIPopoverController {
    @discardableResult
    @_disfavoredOverload
    public func setContentView(_ viewController: UIKit.UIViewController, animated: Swift.Bool) -> T {
        self.value.setContentView(viewController, animated: animated)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func setContentSize(_ size: CoreFoundation.CGSize, animated: Swift.Bool) -> T {
        self.value.setContentSize(size, animated: animated)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func present(from rect: CoreFoundation.CGRect, in view: UIKit.UIView, permittedArrowDirections arrowDirections: UIKit.UIPopoverArrowDirection, animated: Swift.Bool) -> T {
        self.value.present(from: rect, in: view, permittedArrowDirections: arrowDirections, animated: animated)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func present(from item: UIKit.UIBarButtonItem, permittedArrowDirections arrowDirections: UIKit.UIPopoverArrowDirection, animated: Swift.Bool) -> T {
        self.value.present(from: item, permittedArrowDirections: arrowDirections, animated: animated)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func dismiss(animated: Swift.Bool) -> T {
        self.value.dismiss(animated: animated)
        return self.value
    }
}

#endif
