
// Generated file
// DO NOT EDIT THIS FILE

#if canImport(UIKit)
import UIKit

extension Modify.DynamicMemberWrap where T: UIResponder {
    @discardableResult
    @_disfavoredOverload
    public func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) -> T {
        self.value.touchesBegan(touches, with: event)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func touchesMoved(_ touches: Set<UITouch>, with event: UIEvent?) -> T {
        self.value.touchesMoved(touches, with: event)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func touchesEnded(_ touches: Set<UITouch>, with event: UIEvent?) -> T {
        self.value.touchesEnded(touches, with: event)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func touchesCancelled(_ touches: Set<UITouch>, with event: UIEvent?) -> T {
        self.value.touchesCancelled(touches, with: event)
        return self.value
    }

    @available(iOS 9.1, *)
    @discardableResult
    @_disfavoredOverload
    public func touchesEstimatedPropertiesUpdated(_ touches: Set<UITouch>) -> T {
        self.value.touchesEstimatedPropertiesUpdated(touches)
        return self.value
    }

    @available(iOS 9.0, *)
    @discardableResult
    @_disfavoredOverload
    public func pressesBegan(_ presses: Set<UIPress>, with event: UIPressesEvent?) -> T {
        self.value.pressesBegan(presses, with: event)
        return self.value
    }

    @available(iOS 9.0, *)
    @discardableResult
    @_disfavoredOverload
    public func pressesChanged(_ presses: Set<UIPress>, with event: UIPressesEvent?) -> T {
        self.value.pressesChanged(presses, with: event)
        return self.value
    }

    @available(iOS 9.0, *)
    @discardableResult
    @_disfavoredOverload
    public func pressesEnded(_ presses: Set<UIPress>, with event: UIPressesEvent?) -> T {
        self.value.pressesEnded(presses, with: event)
        return self.value
    }

    @available(iOS 9.0, *)
    @discardableResult
    @_disfavoredOverload
    public func pressesCancelled(_ presses: Set<UIPress>, with event: UIPressesEvent?) -> T {
        self.value.pressesCancelled(presses, with: event)
        return self.value
    }

    @available(iOS 3.0, *)
    @discardableResult
    @_disfavoredOverload
    public func motionBegan(_ motion: UIEvent.EventSubtype, with event: UIEvent?) -> T {
        self.value.motionBegan(motion, with: event)
        return self.value
    }

    @available(iOS 3.0, *)
    @discardableResult
    @_disfavoredOverload
    public func motionEnded(_ motion: UIEvent.EventSubtype, with event: UIEvent?) -> T {
        self.value.motionEnded(motion, with: event)
        return self.value
    }

    @available(iOS 3.0, *)
    @discardableResult
    @_disfavoredOverload
    public func motionCancelled(_ motion: UIEvent.EventSubtype, with event: UIEvent?) -> T {
        self.value.motionCancelled(motion, with: event)
        return self.value
    }

    @available(iOS 4.0, *)
    @discardableResult
    @_disfavoredOverload
    public func remoteControlReceived(with event: UIEvent?) -> T {
        self.value.remoteControlReceived(with: event)
        return self.value
    }

    @available(iOS 13.0, *)
    @discardableResult
    @_disfavoredOverload
    public func buildMenu(with builder: UIMenuBuilder) -> T {
        self.value.buildMenu(with: builder)
        return self.value
    }

    @available(iOS 13.0, *)
    @discardableResult
    @_disfavoredOverload
    public func validate(_ command: UICommand) -> T {
        self.value.validate(command)
        return self.value
    }

    @available(iOS 3.2, *)
    @discardableResult
    @_disfavoredOverload
    public func reloadInputViews() -> T {
        self.value.reloadInputViews()
        return self.value
    }

    @available(iOS 8.0, *)
    @discardableResult
    @_disfavoredOverload
    public func updateUserActivityState(_ activity: NSUserActivity) -> T {
        self.value.updateUserActivityState(activity)
        return self.value
    }

    @available(iOS 8.0, *)
    @discardableResult
    @_disfavoredOverload
    public func restoreUserActivityState(_ activity: NSUserActivity) -> T {
        self.value.restoreUserActivityState(activity)
        return self.value
    }

    @available(iOS 15.0, *)
    @discardableResult
    @_disfavoredOverload
    public func captureTextFromCamera(_ sender: Any?) -> T {
        self.value.captureTextFromCamera(sender)
        return self.value
    }
}

#endif
