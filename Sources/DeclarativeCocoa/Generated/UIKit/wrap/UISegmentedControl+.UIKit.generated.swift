
// Generated file
// DO NOT EDIT THIS FILE

#if canImport(UIKit)
import UIKit

extension Modify.DynamicMemberWrap where T: UISegmentedControl {
    @available(iOS 14.0, *)
    @discardableResult
    public func insertSegment(action: UIKit.UIAction, at segment: Swift.Int, animated: Swift.Bool) -> Self {
        self.value.insertSegment(action: action, at: segment, animated: animated)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 14.0, *)
    @discardableResult
    public func setAction(_ action: UIKit.UIAction, forSegmentAt segment: Swift.Int) -> Self {
        self.value.setAction(action, forSegmentAt: segment)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func insertSegment(withTitle title: Swift.String?, at segment: Swift.Int, animated: Swift.Bool) -> Self {
        self.value.insertSegment(withTitle: title, at: segment, animated: animated)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func insertSegment(with image: UIKit.UIImage?, at segment: Swift.Int, animated: Swift.Bool) -> Self {
        self.value.insertSegment(with: image, at: segment, animated: animated)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func removeSegment(at segment: Swift.Int, animated: Swift.Bool) -> Self {
        self.value.removeSegment(at: segment, animated: animated)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func removeAllSegments() -> Self {
        self.value.removeAllSegments()
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func setTitle(_ title: Swift.String?, forSegmentAt segment: Swift.Int) -> Self {
        self.value.setTitle(title, forSegmentAt: segment)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func setImage(_ image: UIKit.UIImage?, forSegmentAt segment: Swift.Int) -> Self {
        self.value.setImage(image, forSegmentAt: segment)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func setWidth(_ width: CoreFoundation.CGFloat, forSegmentAt segment: Swift.Int) -> Self {
        self.value.setWidth(width, forSegmentAt: segment)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func setContentOffset(_ offset: CoreFoundation.CGSize, forSegmentAt segment: Swift.Int) -> Self {
        self.value.setContentOffset(offset, forSegmentAt: segment)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func setEnabled(_ enabled: Swift.Bool, forSegmentAt segment: Swift.Int) -> Self {
        self.value.setEnabled(enabled, forSegmentAt: segment)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 5.0, *)
    @discardableResult
    public func setBackgroundImage(_ backgroundImage: UIKit.UIImage?, for state: UIKit.UIControl.State, barMetrics: UIKit.UIBarMetrics) -> Self {
        self.value.setBackgroundImage(backgroundImage, for: state, barMetrics: barMetrics)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 5.0, *)
    @discardableResult
    public func setDividerImage(_ dividerImage: UIKit.UIImage?, forLeftSegmentState leftState: UIKit.UIControl.State, rightSegmentState rightState: UIKit.UIControl.State, barMetrics: UIKit.UIBarMetrics) -> Self {
        self.value.setDividerImage(dividerImage, forLeftSegmentState: leftState, rightSegmentState: rightState, barMetrics: barMetrics)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 5.0, *)
    @discardableResult
    public func setTitleTextAttributes(_ attributes: [Foundation.NSAttributedString.Key : Any]?, for state: UIKit.UIControl.State) -> Self {
        self.value.setTitleTextAttributes(attributes, for: state)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 5.0, *)
    @discardableResult
    public func setContentPositionAdjustment(_ adjustment: UIKit.UIOffset, forSegmentType leftCenterRightOrAlone: UIKit.UISegmentedControl.Segment, barMetrics: UIKit.UIBarMetrics) -> Self {
        self.value.setContentPositionAdjustment(adjustment, forSegmentType: leftCenterRightOrAlone, barMetrics: barMetrics)
        return Modify.DynamicMemberWrap(self.value)
    }
}

#endif
