
// Generated file
// DO NOT EDIT THIS FILE

#if canImport(UIKit)
import UIKit

extension Modify.DynamicMemberWrap where T: UITableViewController {
    @available(iOS 2.0, *)
    @discardableResult
    public func tableView(_ tableView: UIKit.UITableView, willDisplay cell: UIKit.UITableViewCell, forRowAt indexPath: Foundation.IndexPath) -> Self {
        self.value.tableView(tableView, willDisplay: cell, forRowAt: indexPath)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 6.0, *)
    @discardableResult
    public func tableView(_ tableView: UIKit.UITableView, willDisplayHeaderView view: UIKit.UIView, forSection section: Swift.Int) -> Self {
        self.value.tableView(tableView, willDisplayHeaderView: view, forSection: section)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 6.0, *)
    @discardableResult
    public func tableView(_ tableView: UIKit.UITableView, willDisplayFooterView view: UIKit.UIView, forSection section: Swift.Int) -> Self {
        self.value.tableView(tableView, willDisplayFooterView: view, forSection: section)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 6.0, *)
    @discardableResult
    public func tableView(_ tableView: UIKit.UITableView, didEndDisplaying cell: UIKit.UITableViewCell, forRowAt indexPath: Foundation.IndexPath) -> Self {
        self.value.tableView(tableView, didEndDisplaying: cell, forRowAt: indexPath)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 6.0, *)
    @discardableResult
    public func tableView(_ tableView: UIKit.UITableView, didEndDisplayingHeaderView view: UIKit.UIView, forSection section: Swift.Int) -> Self {
        self.value.tableView(tableView, didEndDisplayingHeaderView: view, forSection: section)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 6.0, *)
    @discardableResult
    public func tableView(_ tableView: UIKit.UITableView, didEndDisplayingFooterView view: UIKit.UIView, forSection section: Swift.Int) -> Self {
        self.value.tableView(tableView, didEndDisplayingFooterView: view, forSection: section)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 2.0, *)
    @discardableResult
    public func tableView(_ tableView: UIKit.UITableView, accessoryButtonTappedForRowWith indexPath: Foundation.IndexPath) -> Self {
        self.value.tableView(tableView, accessoryButtonTappedForRowWith: indexPath)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 6.0, *)
    @discardableResult
    public func tableView(_ tableView: UIKit.UITableView, didHighlightRowAt indexPath: Foundation.IndexPath) -> Self {
        self.value.tableView(tableView, didHighlightRowAt: indexPath)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 6.0, *)
    @discardableResult
    public func tableView(_ tableView: UIKit.UITableView, didUnhighlightRowAt indexPath: Foundation.IndexPath) -> Self {
        self.value.tableView(tableView, didUnhighlightRowAt: indexPath)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 2.0, *)
    @discardableResult
    public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath) -> Self {
        self.value.tableView(tableView, didSelectRowAt: indexPath)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 3.0, *)
    @discardableResult
    public func tableView(_ tableView: UIKit.UITableView, didDeselectRowAt indexPath: Foundation.IndexPath) -> Self {
        self.value.tableView(tableView, didDeselectRowAt: indexPath)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 16.0, *)
    @discardableResult
    public func tableView(_ tableView: UIKit.UITableView, performPrimaryActionForRowAt indexPath: Foundation.IndexPath) -> Self {
        self.value.tableView(tableView, performPrimaryActionForRowAt: indexPath)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 2.0, *)
    @discardableResult
    public func tableView(_ tableView: UIKit.UITableView, willBeginEditingRowAt indexPath: Foundation.IndexPath) -> Self {
        self.value.tableView(tableView, willBeginEditingRowAt: indexPath)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 2.0, *)
    @discardableResult
    public func tableView(_ tableView: UIKit.UITableView, didEndEditingRowAt indexPath: Foundation.IndexPath?) -> Self {
        self.value.tableView(tableView, didEndEditingRowAt: indexPath)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    @available(iOS, introduced: 5.0, deprecated: 13.0)
    public func tableView(_ tableView: UIKit.UITableView, performAction action: ObjectiveC.Selector, forRowAt indexPath: Foundation.IndexPath, withSender sender: Any?) -> Self {
        self.value.tableView(tableView, performAction: action, forRowAt: indexPath, withSender: sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 9.0, *)
    @discardableResult
    public func tableView(_ tableView: UIKit.UITableView, didUpdateFocusIn context: UIKit.UITableViewFocusUpdateContext, with coordinator: UIKit.UIFocusAnimationCoordinator) -> Self {
        self.value.tableView(tableView, didUpdateFocusIn: context, with: coordinator)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 13.0, *)
    @discardableResult
    public func tableView(_ tableView: UIKit.UITableView, didBeginMultipleSelectionInteractionAt indexPath: Foundation.IndexPath) -> Self {
        self.value.tableView(tableView, didBeginMultipleSelectionInteractionAt: indexPath)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 13.0, *)
    @discardableResult
    public func tableViewDidEndMultipleSelectionInteraction(_ tableView: UIKit.UITableView) -> Self {
        self.value.tableViewDidEndMultipleSelectionInteraction(tableView)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 13.0, *)
    @discardableResult
    public func tableView(_ tableView: UIKit.UITableView, willPerformPreviewActionForMenuWith configuration: UIKit.UIContextMenuConfiguration, animator: UIKit.UIContextMenuInteractionCommitAnimating) -> Self {
        self.value.tableView(tableView, willPerformPreviewActionForMenuWith: configuration, animator: animator)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 14.0, *)
    @discardableResult
    public func tableView(_ tableView: UIKit.UITableView, willDisplayContextMenu configuration: UIKit.UIContextMenuConfiguration, animator: UIKit.UIContextMenuInteractionAnimating?) -> Self {
        self.value.tableView(tableView, willDisplayContextMenu: configuration, animator: animator)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 14.0, *)
    @discardableResult
    public func tableView(_ tableView: UIKit.UITableView, willEndContextMenuInteraction configuration: UIKit.UIContextMenuConfiguration, animator: UIKit.UIContextMenuInteractionAnimating?) -> Self {
        self.value.tableView(tableView, willEndContextMenuInteraction: configuration, animator: animator)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 2.0, *)
    @discardableResult
    public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView) -> Self {
        self.value.scrollViewDidScroll(scrollView)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 3.2, *)
    @discardableResult
    public func scrollViewDidZoom(_ scrollView: UIKit.UIScrollView) -> Self {
        self.value.scrollViewDidZoom(scrollView)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 2.0, *)
    @discardableResult
    public func scrollViewWillBeginDragging(_ scrollView: UIKit.UIScrollView) -> Self {
        self.value.scrollViewWillBeginDragging(scrollView)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 5.0, *)
    @discardableResult
    public func scrollViewWillEndDragging(_ scrollView: UIKit.UIScrollView, withVelocity velocity: CoreFoundation.CGPoint, targetContentOffset: Swift.UnsafeMutablePointer<CoreFoundation.CGPoint>) -> Self {
        self.value.scrollViewWillEndDragging(scrollView, withVelocity: velocity, targetContentOffset: targetContentOffset)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 2.0, *)
    @discardableResult
    public func scrollViewDidEndDragging(_ scrollView: UIKit.UIScrollView, willDecelerate decelerate: Swift.Bool) -> Self {
        self.value.scrollViewDidEndDragging(scrollView, willDecelerate: decelerate)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 2.0, *)
    @discardableResult
    public func scrollViewWillBeginDecelerating(_ scrollView: UIKit.UIScrollView) -> Self {
        self.value.scrollViewWillBeginDecelerating(scrollView)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 2.0, *)
    @discardableResult
    public func scrollViewDidEndDecelerating(_ scrollView: UIKit.UIScrollView) -> Self {
        self.value.scrollViewDidEndDecelerating(scrollView)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 2.0, *)
    @discardableResult
    public func scrollViewDidEndScrollingAnimation(_ scrollView: UIKit.UIScrollView) -> Self {
        self.value.scrollViewDidEndScrollingAnimation(scrollView)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 3.2, *)
    @discardableResult
    public func scrollViewWillBeginZooming(_ scrollView: UIKit.UIScrollView, with view: UIKit.UIView?) -> Self {
        self.value.scrollViewWillBeginZooming(scrollView, with: view)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 2.0, *)
    @discardableResult
    public func scrollViewDidEndZooming(_ scrollView: UIKit.UIScrollView, with view: UIKit.UIView?, atScale scale: CoreFoundation.CGFloat) -> Self {
        self.value.scrollViewDidEndZooming(scrollView, with: view, atScale: scale)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 2.0, *)
    @discardableResult
    public func scrollViewDidScrollToTop(_ scrollView: UIKit.UIScrollView) -> Self {
        self.value.scrollViewDidScrollToTop(scrollView)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 11.0, *)
    @discardableResult
    public func scrollViewDidChangeAdjustedContentInset(_ scrollView: UIKit.UIScrollView) -> Self {
        self.value.scrollViewDidChangeAdjustedContentInset(scrollView)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 2.0, *)
    @discardableResult
    public func tableView(_ tableView: UIKit.UITableView, commit editingStyle: UIKit.UITableViewCell.EditingStyle, forRowAt indexPath: Foundation.IndexPath) -> Self {
        self.value.tableView(tableView, commit: editingStyle, forRowAt: indexPath)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 2.0, *)
    @discardableResult
    public func tableView(_ tableView: UIKit.UITableView, moveRowAt sourceIndexPath: Foundation.IndexPath, to destinationIndexPath: Foundation.IndexPath) -> Self {
        self.value.tableView(tableView, moveRowAt: sourceIndexPath, to: destinationIndexPath)
        return Modify.DynamicMemberWrap(self.value)
    }
}

#endif
