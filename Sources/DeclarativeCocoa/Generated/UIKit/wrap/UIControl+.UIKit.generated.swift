
// Generated file
// DO NOT EDIT THIS FILE

#if canImport(UIKit)
import UIKit

extension Modify.DynamicMemberWrap where T: UIControl {
    @discardableResult
    public func endTracking(_ touch: UIKit.UITouch?, with event: UIKit.UIEvent?) -> Self {
        self.value.endTracking(touch, with: event)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func cancelTracking(with event: UIKit.UIEvent?) -> Self {
        self.value.cancelTracking(with: event)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func addTarget(_ target: Any?, action: ObjectiveC.Selector, for controlEvents: UIKit.UIControl.Event) -> Self {
        self.value.addTarget(target, action: action, for: controlEvents)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func removeTarget(_ target: Any?, action: ObjectiveC.Selector?, for controlEvents: UIKit.UIControl.Event) -> Self {
        self.value.removeTarget(target, action: action, for: controlEvents)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 14.0, *)
    @discardableResult
    public func addAction(_ action: UIKit.UIAction, for controlEvents: UIKit.UIControl.Event) -> Self {
        self.value.addAction(action, for: controlEvents)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 14.0, *)
    @discardableResult
    public func removeAction(_ action: UIKit.UIAction, for controlEvents: UIKit.UIControl.Event) -> Self {
        self.value.removeAction(action, for: controlEvents)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 14.0, *)
    @discardableResult
    public func removeAction(identifiedBy actionIdentifier: UIKit.UIAction.Identifier, for controlEvents: UIKit.UIControl.Event) -> Self {
        self.value.removeAction(identifiedBy: actionIdentifier, for: controlEvents)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 14.0, *)
    @discardableResult
    public func __enumerateEventHandlers(_ iterator: (UIKit.UIAction?, Any?, ObjectiveC.Selector?, UIKit.UIControl.Event, Swift.UnsafeMutablePointer<ObjectiveC.ObjCBool>) -> Swift.Void) -> Self {
        self.value.__enumerateEventHandlers(iterator)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func sendAction(_ action: ObjectiveC.Selector, to target: Any?, for event: UIKit.UIEvent?) -> Self {
        self.value.sendAction(action, to: target, for: event)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 14.0, *)
    @discardableResult
    public func sendAction(_ action: UIKit.UIAction) -> Self {
        self.value.sendAction(action)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func sendActions(for controlEvents: UIKit.UIControl.Event) -> Self {
        self.value.sendActions(for: controlEvents)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 14.0, tvOS 14.0, *)
    @discardableResult
    @_Concurrency.MainActor public func enumerateEventHandlers(_ iterator: (UIKit.UIAction?, (Any?, ObjectiveC.Selector)?, UIKit.UIControl.Event, inout Swift.Bool) -> Swift.Void) -> Self {
        self.value.enumerateEventHandlers(iterator)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 14.0, *)
    @discardableResult
    public func contextMenuInteraction(_ interaction: UIKit.UIContextMenuInteraction, willDisplayMenuFor configuration: UIKit.UIContextMenuConfiguration, animator: UIKit.UIContextMenuInteractionAnimating?) -> Self {
        self.value.contextMenuInteraction(interaction, willDisplayMenuFor: configuration, animator: animator)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 14.0, *)
    @discardableResult
    public func contextMenuInteraction(_ interaction: UIKit.UIContextMenuInteraction, willEndFor configuration: UIKit.UIContextMenuConfiguration, animator: UIKit.UIContextMenuInteractionAnimating?) -> Self {
        self.value.contextMenuInteraction(interaction, willEndFor: configuration, animator: animator)
        return Modify.DynamicMemberWrap(self.value)
    }
}

#endif
