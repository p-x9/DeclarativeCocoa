
// Generated file
// DO NOT EDIT THIS FILE

#if canImport(UIKit)
import UIKit

@available(iOS 16.0, *)
extension Modify.DynamicMemberWrap where T: UITextSearching {
    @discardableResult
    public func performTextSearch(queryString: Swift.String, options: UIKit.UITextSearchOptions, resultAggregator: UIKit.UITextSearchAggregator<T.DocumentIdentifier>) -> Self {
        self.value.performTextSearch(queryString: queryString, options: options, resultAggregator: resultAggregator)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func decorate(foundTextRange: UIKit.UITextRange, document: T.DocumentIdentifier?, usingStyle: UIKit.UITextSearchFoundTextStyle) -> Self {
        self.value.decorate(foundTextRange: foundTextRange, document: document, usingStyle: usingStyle)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func clearAllDecoratedFoundText() -> Self {
        self.value.clearAllDecoratedFoundText()
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func replace(foundTextRange: UIKit.UITextRange, document: T.DocumentIdentifier?, withText: Swift.String) -> Self {
        self.value.replace(foundTextRange: foundTextRange, document: document, withText: withText)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func replaceAll(queryString: Swift.String, options: UIKit.UITextSearchOptions, withText: Swift.String) -> Self {
        self.value.replaceAll(queryString: queryString, options: options, withText: withText)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func willHighlight(foundTextRange: UIKit.UITextRange, document: T.DocumentIdentifier?) -> Self {
        self.value.willHighlight(foundTextRange: foundTextRange, document: document)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func scrollRangeToVisible(_ range: UIKit.UITextRange, inDocument: T.DocumentIdentifier?) -> Self {
        self.value.scrollRangeToVisible(range, inDocument: inDocument)
        return Modify.DynamicMemberWrap(self.value)
    }
}

#endif
