
// Generated file
// DO NOT EDIT THIS FILE

#if canImport(UIKit)
import UIKit

extension Modify.DynamicMemberWrap where T: UIGestureRecognizer {
    @discardableResult
    public func addTarget(_ target: Any, action: ObjectiveC.Selector) -> Self {
        self.value.addTarget(target, action: action)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func removeTarget(_ target: Any?, action: ObjectiveC.Selector?) -> Self {
        self.value.removeTarget(target, action: action)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func require(toFail otherGestureRecognizer: UIKit.UIGestureRecognizer) -> Self {
        self.value.require(toFail: otherGestureRecognizer)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func ignore(_ touch: UIKit.UITouch, for event: UIKit.UIEvent) -> Self {
        self.value.ignore(touch, for: event)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 9.0, *)
    @discardableResult
    public func ignore(_ button: UIKit.UIPress, for event: UIKit.UIPressesEvent) -> Self {
        self.value.ignore(button, for: event)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func reset() -> Self {
        self.value.reset()
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent) -> Self {
        self.value.touchesBegan(touches, with: event)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func touchesMoved(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent) -> Self {
        self.value.touchesMoved(touches, with: event)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func touchesEnded(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent) -> Self {
        self.value.touchesEnded(touches, with: event)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func touchesCancelled(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent) -> Self {
        self.value.touchesCancelled(touches, with: event)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 9.1, *)
    @discardableResult
    public func touchesEstimatedPropertiesUpdated(_ touches: Swift.Set<UIKit.UITouch>) -> Self {
        self.value.touchesEstimatedPropertiesUpdated(touches)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 9.0, *)
    @discardableResult
    public func pressesBegan(_ presses: Swift.Set<UIKit.UIPress>, with event: UIKit.UIPressesEvent) -> Self {
        self.value.pressesBegan(presses, with: event)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 9.0, *)
    @discardableResult
    public func pressesChanged(_ presses: Swift.Set<UIKit.UIPress>, with event: UIKit.UIPressesEvent) -> Self {
        self.value.pressesChanged(presses, with: event)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 9.0, *)
    @discardableResult
    public func pressesEnded(_ presses: Swift.Set<UIKit.UIPress>, with event: UIKit.UIPressesEvent) -> Self {
        self.value.pressesEnded(presses, with: event)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 9.0, *)
    @discardableResult
    public func pressesCancelled(_ presses: Swift.Set<UIKit.UIPress>, with event: UIKit.UIPressesEvent) -> Self {
        self.value.pressesCancelled(presses, with: event)
        return Modify.DynamicMemberWrap(self.value)
    }
}

#endif
