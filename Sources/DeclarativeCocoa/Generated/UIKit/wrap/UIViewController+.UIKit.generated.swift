
// Generated file
// DO NOT EDIT THIS FILE

#if canImport(UIKit)
import UIKit

extension Modify.DynamicMemberWrap where T: UIViewController {
    @discardableResult
    public func loadView() -> Self {
        self.value.loadView()
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 9.0, *)
    @discardableResult
    public func loadViewIfNeeded() -> Self {
        self.value.loadViewIfNeeded()
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    @available(iOS, unavailable, introduced: 5.0, deprecated: 6.0, message: "APIs deprecated as of iOS 7 and earlier are unavailable in Swift")
    public func viewWillUnload() -> Self {
        self.value.viewWillUnload()
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    @available(iOS, unavailable, introduced: 3.0, deprecated: 6.0, message: "APIs deprecated as of iOS 7 and earlier are unavailable in Swift")
    public func viewDidUnload() -> Self {
        self.value.viewDidUnload()
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func viewDidLoad() -> Self {
        self.value.viewDidLoad()
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 5.0, *)
    @discardableResult
    public func performSegue(withIdentifier identifier: Swift.String, sender: Any?) -> Self {
        self.value.performSegue(withIdentifier: identifier, sender: sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 5.0, *)
    @discardableResult
    public func prepare(for segue: UIKit.UIStoryboardSegue, sender: Any?) -> Self {
        self.value.prepare(for: segue, sender: sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 9.0, *)
    @discardableResult
    public func unwind(for unwindSegue: UIKit.UIStoryboardSegue, towards subsequentVC: UIKit.UIViewController) -> Self {
        self.value.unwind(for: unwindSegue, towards: subsequentVC)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func viewWillAppear(_ animated: Swift.Bool) -> Self {
        self.value.viewWillAppear(animated)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func viewDidAppear(_ animated: Swift.Bool) -> Self {
        self.value.viewDidAppear(animated)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func viewWillDisappear(_ animated: Swift.Bool) -> Self {
        self.value.viewWillDisappear(animated)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func viewDidDisappear(_ animated: Swift.Bool) -> Self {
        self.value.viewDidDisappear(animated)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 5.0, *)
    @discardableResult
    public func viewWillLayoutSubviews() -> Self {
        self.value.viewWillLayoutSubviews()
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 5.0, *)
    @discardableResult
    public func viewDidLayoutSubviews() -> Self {
        self.value.viewDidLayoutSubviews()
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func didReceiveMemoryWarning() -> Self {
        self.value.didReceiveMemoryWarning()
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 5.0, *)
    @discardableResult
    public func present(_ viewControllerToPresent: UIKit.UIViewController, animated flag: Swift.Bool, completion: (() -> Swift.Void)? = nil) -> Self {
        self.value.present(viewControllerToPresent, animated: flag, completion: completion)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 5.0, *)
    @discardableResult
    public func dismiss(animated flag: Swift.Bool, completion: (() -> Swift.Void)? = nil) -> Self {
        self.value.dismiss(animated: flag, completion: completion)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    @available(iOS, unavailable, introduced: 2.0, deprecated: 6.0, message: "APIs deprecated as of iOS 7 and earlier are unavailable in Swift")
    public func presentModalViewController(_ modalViewController: UIKit.UIViewController, animated: Swift.Bool) -> Self {
        self.value.presentModalViewController(modalViewController, animated: animated)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    @available(iOS, unavailable, introduced: 2.0, deprecated: 6.0, message: "APIs deprecated as of iOS 7 and earlier are unavailable in Swift")
    public func dismissModalViewController(animated: Swift.Bool) -> Self {
        self.value.dismissModalViewController(animated: animated)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 15.0, *)
    @discardableResult
    public func setContentScrollView(_ scrollView: UIKit.UIScrollView?, for edge: UIKit.NSDirectionalRectEdge) -> Self {
        self.value.setContentScrollView(scrollView, for: edge)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 7.0, *)
    @discardableResult
    public func setNeedsStatusBarAppearanceUpdate() -> Self {
        self.value.setNeedsStatusBarAppearanceUpdate()
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 8.0, *)
    @discardableResult
    public func show(_ vc: UIKit.UIViewController, sender: Any?) -> Self {
        self.value.show(vc, sender: sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 8.0, *)
    @discardableResult
    public func showDetailViewController(_ vc: UIKit.UIViewController, sender: Any?) -> Self {
        self.value.showDetailViewController(vc, sender: sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    @available(iOS, unavailable)
    public func setNeedsUserInterfaceAppearanceUpdate() -> Self {
        self.value.setNeedsUserInterfaceAppearanceUpdate()
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 2.0, *)
    @discardableResult
    public func encode(with coder: Foundation.NSCoder) -> Self {
        self.value.encode(with: coder)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 8.0, *)
    @discardableResult
    public func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?) -> Self {
        self.value.traitCollectionDidChange(previousTraitCollection)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 8.0, *)
    @discardableResult
    public func preferredContentSizeDidChange(forChildContentContainer container: UIKit.UIContentContainer) -> Self {
        self.value.preferredContentSizeDidChange(forChildContentContainer: container)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 8.0, *)
    @discardableResult
    public func systemLayoutFittingSizeDidChange(forChildContentContainer container: UIKit.UIContentContainer) -> Self {
        self.value.systemLayoutFittingSizeDidChange(forChildContentContainer: container)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 8.0, *)
    @discardableResult
    public func viewWillTransition(to size: CoreFoundation.CGSize, with coordinator: UIKit.UIViewControllerTransitionCoordinator) -> Self {
        self.value.viewWillTransition(to: size, with: coordinator)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 8.0, *)
    @discardableResult
    public func willTransition(to newCollection: UIKit.UITraitCollection, with coordinator: UIKit.UIViewControllerTransitionCoordinator) -> Self {
        self.value.willTransition(to: newCollection, with: coordinator)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 9.0, *)
    @discardableResult
    public func setNeedsFocusUpdate() -> Self {
        self.value.setNeedsFocusUpdate()
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 9.0, *)
    @discardableResult
    public func updateFocusIfNeeded() -> Self {
        self.value.updateFocusIfNeeded()
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 9.0, *)
    @discardableResult
    public func didUpdateFocus(in context: UIKit.UIFocusUpdateContext, with coordinator: UIKit.UIFocusAnimationCoordinator) -> Self {
        self.value.didUpdateFocus(in: context, with: coordinator)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 15.0, tvOS 15.0, *)
    @discardableResult
    @_Concurrency.MainActor public func setContentScrollView(_ scrollView: UIKit.UIScrollView?) -> Self {
        self.value.setContentScrollView(scrollView)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 8.0, *)
    @discardableResult
    public func collapseSecondaryViewController(_ secondaryViewController: UIKit.UIViewController, for splitViewController: UIKit.UISplitViewController) -> Self {
        self.value.collapseSecondaryViewController(secondaryViewController, for: splitViewController)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 3.0, *)
    @discardableResult
    public func setToolbarItems(_ toolbarItems: [UIKit.UIBarButtonItem]?, animated: Swift.Bool) -> Self {
        self.value.setToolbarItems(toolbarItems, animated: animated)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 14.0, *)
    @discardableResult
    public func setNeedsUpdateOfPrefersPointerLocked() -> Self {
        self.value.setNeedsUpdateOfPrefersPointerLocked()
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 11.0, *)
    @discardableResult
    public func setNeedsUpdateOfHomeIndicatorAutoHidden() -> Self {
        self.value.setNeedsUpdateOfHomeIndicatorAutoHidden()
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 11.0, *)
    @discardableResult
    public func setNeedsUpdateOfScreenEdgesDeferringSystemGestures() -> Self {
        self.value.setNeedsUpdateOfScreenEdgesDeferringSystemGestures()
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 8.0, *)
    @discardableResult
    public func beginRequest(with context: Foundation.NSExtensionContext) -> Self {
        self.value.beginRequest(with: context)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 9.0, *)
    @discardableResult
    public func addKeyCommand(_ keyCommand: UIKit.UIKeyCommand) -> Self {
        self.value.addKeyCommand(keyCommand)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 9.0, *)
    @discardableResult
    public func removeKeyCommand(_ keyCommand: UIKit.UIKeyCommand) -> Self {
        self.value.removeKeyCommand(keyCommand)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 11.0, *)
    @discardableResult
    public func viewLayoutMarginsDidChange() -> Self {
        self.value.viewLayoutMarginsDidChange()
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 11.0, *)
    @discardableResult
    public func viewSafeAreaInsetsDidChange() -> Self {
        self.value.viewSafeAreaInsetsDidChange()
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 6.0, *)
    @discardableResult
    public func updateViewConstraints() -> Self {
        self.value.updateViewConstraints()
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 6.0, *)
    @discardableResult
    public func encodeRestorableState(with coder: Foundation.NSCoder) -> Self {
        self.value.encodeRestorableState(with: coder)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 6.0, *)
    @discardableResult
    public func decodeRestorableState(with coder: Foundation.NSCoder) -> Self {
        self.value.decodeRestorableState(with: coder)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 7.0, *)
    @discardableResult
    public func applicationFinishedRestoringState() -> Self {
        self.value.applicationFinishedRestoringState()
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 5.0, *)
    @discardableResult
    public func willMove(toParent parent: UIKit.UIViewController?) -> Self {
        self.value.willMove(toParent: parent)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 5.0, *)
    @discardableResult
    public func didMove(toParent parent: UIKit.UIViewController?) -> Self {
        self.value.didMove(toParent: parent)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 5.0, *)
    @discardableResult
    public func addChild(_ childController: UIKit.UIViewController) -> Self {
        self.value.addChild(childController)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 5.0, *)
    @discardableResult
    public func removeFromParent() -> Self {
        self.value.removeFromParent()
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 5.0, *)
    @discardableResult
    public func transition(from fromViewController: UIKit.UIViewController, to toViewController: UIKit.UIViewController, duration: Foundation.TimeInterval, options: UIKit.UIView.AnimationOptions = [], animations: (() -> Swift.Void)?, completion: ((Swift.Bool) -> Swift.Void)? = nil) -> Self {
        self.value.transition(from: fromViewController, to: toViewController, duration: duration, options: options, animations: animations, completion: completion)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 5.0, *)
    @discardableResult
    public func beginAppearanceTransition(_ isAppearing: Swift.Bool, animated: Swift.Bool) -> Self {
        self.value.beginAppearanceTransition(isAppearing, animated: animated)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 5.0, *)
    @discardableResult
    public func endAppearanceTransition() -> Self {
        self.value.endAppearanceTransition()
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 8.0, *)
    @discardableResult
    public func setOverrideTraitCollection(_ collection: UIKit.UITraitCollection?, forChild childViewController: UIKit.UIViewController) -> Self {
        self.value.setOverrideTraitCollection(collection, forChild: childViewController)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func setEditing(_ editing: Swift.Bool, animated: Swift.Bool) -> Self {
        self.value.setEditing(editing, animated: animated)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 16.0, *)
    @discardableResult
    public func setNeedsUpdateOfSupportedInterfaceOrientations() -> Self {
        self.value.setNeedsUpdateOfSupportedInterfaceOrientations()
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    @available(iOS, introduced: 2.0, deprecated: 8.0, message: "Implement viewWillTransitionToSize:withTransitionCoordinator: instead")
    public func willRotate(to toInterfaceOrientation: UIKit.UIInterfaceOrientation, duration: Foundation.TimeInterval) -> Self {
        self.value.willRotate(to: toInterfaceOrientation, duration: duration)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    @available(iOS, introduced: 2.0, deprecated: 8.0)
    public func didRotate(from fromInterfaceOrientation: UIKit.UIInterfaceOrientation) -> Self {
        self.value.didRotate(from: fromInterfaceOrientation)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    @available(iOS, introduced: 3.0, deprecated: 8.0, message: "Implement viewWillTransitionToSize:withTransitionCoordinator: instead")
    public func willAnimateRotation(to toInterfaceOrientation: UIKit.UIInterfaceOrientation, duration: Foundation.TimeInterval) -> Self {
        self.value.willAnimateRotation(to: toInterfaceOrientation, duration: duration)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    @available(iOS, unavailable, introduced: 2.0, deprecated: 5.0, message: "APIs deprecated as of iOS 7 and earlier are unavailable in Swift")
    public func willAnimateFirstHalfOfRotation(to toInterfaceOrientation: UIKit.UIInterfaceOrientation, duration: Foundation.TimeInterval) -> Self {
        self.value.willAnimateFirstHalfOfRotation(to: toInterfaceOrientation, duration: duration)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    @available(iOS, unavailable, introduced: 2.0, deprecated: 5.0, message: "APIs deprecated as of iOS 7 and earlier are unavailable in Swift")
    public func didAnimateFirstHalfOfRotation(to toInterfaceOrientation: UIKit.UIInterfaceOrientation) -> Self {
        self.value.didAnimateFirstHalfOfRotation(to: toInterfaceOrientation)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    @available(iOS, unavailable, introduced: 2.0, deprecated: 5.0, message: "APIs deprecated as of iOS 7 and earlier are unavailable in Swift")
    public func willAnimateSecondHalfOfRotation(from fromInterfaceOrientation: UIKit.UIInterfaceOrientation, duration: Foundation.TimeInterval) -> Self {
        self.value.willAnimateSecondHalfOfRotation(from: fromInterfaceOrientation, duration: duration)
        return Modify.DynamicMemberWrap(self.value)
    }
}

#endif
