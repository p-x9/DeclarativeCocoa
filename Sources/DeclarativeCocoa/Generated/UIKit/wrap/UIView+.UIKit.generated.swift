
// Generated file
// DO NOT EDIT THIS FILE

#if canImport(UIKit)
import UIKit

extension Modify.DynamicMemberWrap where T: UIView {
    @available(iOS 2.0, *)
    @discardableResult
    public func encode(with coder: Foundation.NSCoder) -> Self {
        self.value.encode(with: coder)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 8.0, *)
    @discardableResult
    public func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?) -> Self {
        self.value.traitCollectionDidChange(previousTraitCollection)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 12.0, *)
    @discardableResult
    public func didHintFocusMovement(_ hint: UIKit.UIFocusMovementHint) -> Self {
        self.value.didHintFocusMovement(hint)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 9.0, *)
    @discardableResult
    public func setNeedsFocusUpdate() -> Self {
        self.value.setNeedsFocusUpdate()
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 9.0, *)
    @discardableResult
    public func updateFocusIfNeeded() -> Self {
        self.value.updateFocusIfNeeded()
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 9.0, *)
    @discardableResult
    public func didUpdateFocus(in context: UIKit.UIFocusUpdateContext, with coordinator: UIKit.UIFocusAnimationCoordinator) -> Self {
        self.value.didUpdateFocus(in: context, with: coordinator)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 2.0, *)
    @discardableResult
    public func display(_ layer: QuartzCore.CALayer) -> Self {
        self.value.display(layer)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 2.0, *)
    @discardableResult
    public func draw(_ layer: QuartzCore.CALayer, in ctx: CoreGraphics.CGContext) -> Self {
        self.value.draw(layer, in: ctx)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 10.0, *)
    @discardableResult
    public func layerWillDraw(_ layer: QuartzCore.CALayer) -> Self {
        self.value.layerWillDraw(layer)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 2.0, *)
    @discardableResult
    public func layoutSublayers(of layer: QuartzCore.CALayer) -> Self {
        self.value.layoutSublayers(of: layer)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func draw(_ rect: CoreFoundation.CGRect, for formatter: UIKit.UIViewPrintFormatter) -> Self {
        self.value.draw(rect, for: formatter)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 11.0, *)
    @discardableResult
    public func addInteraction(_ interaction: UIKit.UIInteraction) -> Self {
        self.value.addInteraction(interaction)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 11.0, *)
    @discardableResult
    public func removeInteraction(_ interaction: UIKit.UIInteraction) -> Self {
        self.value.removeInteraction(interaction)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 6.0, *)
    @discardableResult
    public func encodeRestorableState(with coder: Foundation.NSCoder) -> Self {
        self.value.encodeRestorableState(with: coder)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 6.0, *)
    @discardableResult
    public func decodeRestorableState(with coder: Foundation.NSCoder) -> Self {
        self.value.decodeRestorableState(with: coder)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 6.0, *)
    @discardableResult
    public func exerciseAmbiguityInLayout() -> Self {
        self.value.exerciseAmbiguityInLayout()
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 9.0, *)
    @discardableResult
    public func addLayoutGuide(_ layoutGuide: UIKit.UILayoutGuide) -> Self {
        self.value.addLayoutGuide(layoutGuide)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 9.0, *)
    @discardableResult
    public func removeLayoutGuide(_ layoutGuide: UIKit.UILayoutGuide) -> Self {
        self.value.removeLayoutGuide(layoutGuide)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 6.0, *)
    @discardableResult
    public func invalidateIntrinsicContentSize() -> Self {
        self.value.invalidateIntrinsicContentSize()
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 6.0, *)
    @discardableResult
    public func setContentHuggingPriority(_ priority: UIKit.UILayoutPriority, for axis: UIKit.NSLayoutConstraint.Axis) -> Self {
        self.value.setContentHuggingPriority(priority, for: axis)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 6.0, *)
    @discardableResult
    public func setContentCompressionResistancePriority(_ priority: UIKit.UILayoutPriority, for axis: UIKit.NSLayoutConstraint.Axis) -> Self {
        self.value.setContentCompressionResistancePriority(priority, for: axis)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 6.0, *)
    @discardableResult
    public func updateConstraintsIfNeeded() -> Self {
        self.value.updateConstraintsIfNeeded()
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 6.0, *)
    @discardableResult
    public func updateConstraints() -> Self {
        self.value.updateConstraints()
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 6.0, *)
    @discardableResult
    public func setNeedsUpdateConstraints() -> Self {
        self.value.setNeedsUpdateConstraints()
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 6.0, *)
    @discardableResult
    public func addConstraint(_ constraint: UIKit.NSLayoutConstraint) -> Self {
        self.value.addConstraint(constraint)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 6.0, *)
    @discardableResult
    public func addConstraints(_ constraints: [UIKit.NSLayoutConstraint]) -> Self {
        self.value.addConstraints(constraints)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 6.0, *)
    @discardableResult
    public func removeConstraint(_ constraint: UIKit.NSLayoutConstraint) -> Self {
        self.value.removeConstraint(constraint)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 6.0, *)
    @discardableResult
    public func removeConstraints(_ constraints: [UIKit.NSLayoutConstraint]) -> Self {
        self.value.removeConstraints(constraints)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 7.0, *)
    @discardableResult
    public func addMotionEffect(_ effect: UIKit.UIMotionEffect) -> Self {
        self.value.addMotionEffect(effect)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 7.0, *)
    @discardableResult
    public func removeMotionEffect(_ effect: UIKit.UIMotionEffect) -> Self {
        self.value.removeMotionEffect(effect)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 3.2, *)
    @discardableResult
    public func addGestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer) -> Self {
        self.value.addGestureRecognizer(gestureRecognizer)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 3.2, *)
    @discardableResult
    public func removeGestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer) -> Self {
        self.value.removeGestureRecognizer(gestureRecognizer)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func draw(_ rect: CoreFoundation.CGRect) -> Self {
        self.value.draw(rect)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func setNeedsDisplay() -> Self {
        self.value.setNeedsDisplay()
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func setNeedsDisplay(_ rect: CoreFoundation.CGRect) -> Self {
        self.value.setNeedsDisplay(rect)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 7.0, *)
    @discardableResult
    public func tintColorDidChange() -> Self {
        self.value.tintColorDidChange()
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func removeFromSuperview() -> Self {
        self.value.removeFromSuperview()
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func insertSubview(_ view: UIKit.UIView, at index: Swift.Int) -> Self {
        self.value.insertSubview(view, at: index)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func exchangeSubview(at index1: Swift.Int, withSubviewAt index2: Swift.Int) -> Self {
        self.value.exchangeSubview(at: index1, withSubviewAt: index2)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func addSubview(_ view: UIKit.UIView) -> Self {
        self.value.addSubview(view)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func insertSubview(_ view: UIKit.UIView, belowSubview siblingSubview: UIKit.UIView) -> Self {
        self.value.insertSubview(view, belowSubview: siblingSubview)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func insertSubview(_ view: UIKit.UIView, aboveSubview siblingSubview: UIKit.UIView) -> Self {
        self.value.insertSubview(view, aboveSubview: siblingSubview)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func bringSubviewToFront(_ view: UIKit.UIView) -> Self {
        self.value.bringSubviewToFront(view)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func sendSubviewToBack(_ view: UIKit.UIView) -> Self {
        self.value.sendSubviewToBack(view)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func didAddSubview(_ subview: UIKit.UIView) -> Self {
        self.value.didAddSubview(subview)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func willRemoveSubview(_ subview: UIKit.UIView) -> Self {
        self.value.willRemoveSubview(subview)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func willMove(toSuperview newSuperview: UIKit.UIView?) -> Self {
        self.value.willMove(toSuperview: newSuperview)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func didMoveToSuperview() -> Self {
        self.value.didMoveToSuperview()
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func willMove(toWindow newWindow: UIKit.UIWindow?) -> Self {
        self.value.willMove(toWindow: newWindow)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func didMoveToWindow() -> Self {
        self.value.didMoveToWindow()
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func setNeedsLayout() -> Self {
        self.value.setNeedsLayout()
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func layoutIfNeeded() -> Self {
        self.value.layoutIfNeeded()
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func layoutSubviews() -> Self {
        self.value.layoutSubviews()
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 8.0, *)
    @discardableResult
    public func layoutMarginsDidChange() -> Self {
        self.value.layoutMarginsDidChange()
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 11.0, *)
    @discardableResult
    public func safeAreaInsetsDidChange() -> Self {
        self.value.safeAreaInsetsDidChange()
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func sizeToFit() -> Self {
        self.value.sizeToFit()
        return Modify.DynamicMemberWrap(self.value)
    }
}

#endif
