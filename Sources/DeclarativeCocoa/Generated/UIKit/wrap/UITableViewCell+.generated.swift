
// Generated file
// DO NOT EDIT THIS FILE

#if canImport(UIKit)
import UIKit

extension Modify.DynamicMemberWrap where T: UITableViewCell {
    @available(iOS 14.0, *)
    @discardableResult
    public func setNeedsUpdateConfiguration() -> Self {
        self.value.setNeedsUpdateConfiguration()
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func prepareForReuse() -> Self {
        self.value.prepareForReuse()
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func setSelected(_ selected: Bool, animated: Bool) -> Self {
        self.value.setSelected(selected, animated: animated)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func setHighlighted(_ highlighted: Bool, animated: Bool) -> Self {
        self.value.setHighlighted(highlighted, animated: animated)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func setEditing(_ editing: Bool, animated: Bool) -> Self {
        self.value.setEditing(editing, animated: animated)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 3.0, *)
    @discardableResult
    public func willTransition(to state: UITableViewCell.StateMask) -> Self {
        self.value.willTransition(to: state)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 3.0, *)
    @discardableResult
    public func didTransition(to state: UITableViewCell.StateMask) -> Self {
        self.value.didTransition(to: state)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 11.0, *)
    @discardableResult
    public func dragStateDidChange(_ dragState: UITableViewCell.DragState) -> Self {
        self.value.dragStateDidChange(dragState)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 14.0, tvOS 14.0, *)
    @discardableResult
    @MainActor dynamic public func updateConfiguration(using state: UICellConfigurationState) -> Self {
        self.value.updateConfiguration(using: state)
        return Modify.DynamicMemberWrap(self.value)
    }
}

#endif
