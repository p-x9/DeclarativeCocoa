
// Generated file
// DO NOT EDIT THIS FILE

#if canImport(UIKit)
import UIKit

extension Modify.DynamicMemberWrap where T: UIResponder {
    @discardableResult
    public func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?) -> Self {
        self.value.touchesBegan(touches, with: event)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func touchesMoved(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?) -> Self {
        self.value.touchesMoved(touches, with: event)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func touchesEnded(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?) -> Self {
        self.value.touchesEnded(touches, with: event)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func touchesCancelled(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?) -> Self {
        self.value.touchesCancelled(touches, with: event)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 9.1, *)
    @discardableResult
    public func touchesEstimatedPropertiesUpdated(_ touches: Swift.Set<UIKit.UITouch>) -> Self {
        self.value.touchesEstimatedPropertiesUpdated(touches)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 9.0, *)
    @discardableResult
    public func pressesBegan(_ presses: Swift.Set<UIKit.UIPress>, with event: UIKit.UIPressesEvent?) -> Self {
        self.value.pressesBegan(presses, with: event)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 9.0, *)
    @discardableResult
    public func pressesChanged(_ presses: Swift.Set<UIKit.UIPress>, with event: UIKit.UIPressesEvent?) -> Self {
        self.value.pressesChanged(presses, with: event)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 9.0, *)
    @discardableResult
    public func pressesEnded(_ presses: Swift.Set<UIKit.UIPress>, with event: UIKit.UIPressesEvent?) -> Self {
        self.value.pressesEnded(presses, with: event)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 9.0, *)
    @discardableResult
    public func pressesCancelled(_ presses: Swift.Set<UIKit.UIPress>, with event: UIKit.UIPressesEvent?) -> Self {
        self.value.pressesCancelled(presses, with: event)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 3.0, *)
    @discardableResult
    public func motionBegan(_ motion: UIKit.UIEvent.EventSubtype, with event: UIKit.UIEvent?) -> Self {
        self.value.motionBegan(motion, with: event)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 3.0, *)
    @discardableResult
    public func motionEnded(_ motion: UIKit.UIEvent.EventSubtype, with event: UIKit.UIEvent?) -> Self {
        self.value.motionEnded(motion, with: event)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 3.0, *)
    @discardableResult
    public func motionCancelled(_ motion: UIKit.UIEvent.EventSubtype, with event: UIKit.UIEvent?) -> Self {
        self.value.motionCancelled(motion, with: event)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 4.0, *)
    @discardableResult
    public func remoteControlReceived(with event: UIKit.UIEvent?) -> Self {
        self.value.remoteControlReceived(with: event)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 13.0, *)
    @discardableResult
    public func buildMenu(with builder: UIKit.UIMenuBuilder) -> Self {
        self.value.buildMenu(with: builder)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 13.0, *)
    @discardableResult
    public func validate(_ command: UIKit.UICommand) -> Self {
        self.value.validate(command)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 3.0, *)
    @discardableResult
    public func cut(_ sender: Any?) -> Self {
        self.value.cut(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 3.0, *)
    @discardableResult
    public func copy(_ sender: Any?) -> Self {
        self.value.copy(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 3.0, *)
    @discardableResult
    public func paste(_ sender: Any?) -> Self {
        self.value.paste(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 15.0, *)
    @discardableResult
    public func pasteAndMatchStyle(_ sender: Any?) -> Self {
        self.value.pasteAndMatchStyle(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 15.0, *)
    @discardableResult
    public func pasteAndGo(_ sender: Any?) -> Self {
        self.value.pasteAndGo(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 15.0, *)
    @discardableResult
    public func pasteAndSearch(_ sender: Any?) -> Self {
        self.value.pasteAndSearch(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 3.0, *)
    @discardableResult
    public func select(_ sender: Any?) -> Self {
        self.value.select(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 3.0, *)
    @discardableResult
    public func selectAll(_ sender: Any?) -> Self {
        self.value.selectAll(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 3.2, *)
    @discardableResult
    public func delete(_ sender: Any?) -> Self {
        self.value.delete(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 5.0, *)
    @discardableResult
    public func makeTextWritingDirectionLeftToRight(_ sender: Any?) -> Self {
        self.value.makeTextWritingDirectionLeftToRight(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 5.0, *)
    @discardableResult
    public func makeTextWritingDirectionRightToLeft(_ sender: Any?) -> Self {
        self.value.makeTextWritingDirectionRightToLeft(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 6.0, *)
    @discardableResult
    public func toggleBoldface(_ sender: Any?) -> Self {
        self.value.toggleBoldface(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 6.0, *)
    @discardableResult
    public func toggleItalics(_ sender: Any?) -> Self {
        self.value.toggleItalics(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 6.0, *)
    @discardableResult
    public func toggleUnderline(_ sender: Any?) -> Self {
        self.value.toggleUnderline(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 7.0, *)
    @discardableResult
    public func increaseSize(_ sender: Any?) -> Self {
        self.value.increaseSize(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 7.0, *)
    @discardableResult
    public func decreaseSize(_ sender: Any?) -> Self {
        self.value.decreaseSize(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 16.0, *)
    @discardableResult
    public func find(_ sender: Any?) -> Self {
        self.value.find(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 16.0, *)
    @discardableResult
    public func findAndReplace(_ sender: Any?) -> Self {
        self.value.findAndReplace(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 16.0, *)
    @discardableResult
    public func findNext(_ sender: Any?) -> Self {
        self.value.findNext(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 16.0, *)
    @discardableResult
    public func findPrevious(_ sender: Any?) -> Self {
        self.value.findPrevious(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 16.0, *)
    @discardableResult
    public func useSelectionForFind(_ sender: Any?) -> Self {
        self.value.useSelectionForFind(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 13.0, *)
    @discardableResult
    public func updateTextAttributes(conversionHandler: ([Foundation.NSAttributedString.Key : Any]) -> [Foundation.NSAttributedString.Key : Any]) -> Self {
        self.value.updateTextAttributes(conversionHandler: conversionHandler)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 15.0, *)
    @discardableResult
    public func printContent(_ sender: Any?) -> Self {
        self.value.printContent(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 16.0, *)
    @discardableResult
    public func rename(_ sender: Any?) -> Self {
        self.value.rename(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 16.0, *)
    @discardableResult
    public func duplicate(_ sender: Any?) -> Self {
        self.value.duplicate(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 16.0, *)
    @discardableResult
    public func move(_ sender: Any?) -> Self {
        self.value.move(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 16.0, *)
    @discardableResult
    public func export(_ sender: Any?) -> Self {
        self.value.export(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 15.0, *)
    @discardableResult
    public func captureTextFromCamera(_ sender: Any?) -> Self {
        self.value.captureTextFromCamera(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 11.0, *)
    @discardableResult
    public func paste(itemProviders: [Foundation.NSItemProvider]) -> Self {
        self.value.paste(itemProviders: itemProviders)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 8.0, *)
    @discardableResult
    public func updateUserActivityState(_ activity: Foundation.NSUserActivity) -> Self {
        self.value.updateUserActivityState(activity)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 8.0, *)
    @discardableResult
    public func restoreUserActivityState(_ activity: Foundation.NSUserActivity) -> Self {
        self.value.restoreUserActivityState(activity)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 3.2, *)
    @discardableResult
    public func reloadInputViews() -> Self {
        self.value.reloadInputViews()
        return Modify.DynamicMemberWrap(self.value)
    }
}

#endif
