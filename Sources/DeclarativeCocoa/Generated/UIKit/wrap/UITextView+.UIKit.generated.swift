
// Generated file
// DO NOT EDIT THIS FILE

#if canImport(UIKit)
import UIKit

extension Modify.DynamicMemberWrap where T: UITextView {
    @discardableResult
    public func scrollRangeToVisible(_ range: Foundation.NSRange) -> Self {
        self.value.scrollRangeToVisible(range)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 3.2, *)
    @discardableResult
    public func replace(_ range: UIKit.UITextRange, withText text: Swift.String) -> Self {
        self.value.replace(range, withText: text)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 2.0, *)
    @discardableResult
    public func setMarkedText(_ markedText: Swift.String?, selectedRange: Foundation.NSRange) -> Self {
        self.value.setMarkedText(markedText, selectedRange: selectedRange)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 2.0, *)
    @discardableResult
    public func unmarkText() -> Self {
        self.value.unmarkText()
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 6.0, *)
    @discardableResult
    public func setBaseWritingDirection(_ writingDirection: UIKit.NSWritingDirection, for range: UIKit.UITextRange) -> Self {
        self.value.setBaseWritingDirection(writingDirection, for: range)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 5.1, *)
    @discardableResult
    public func insertDictationResult(_ dictationResult: [UIKit.UIDictationPhrase]) -> Self {
        self.value.insertDictationResult(dictationResult)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 2.0, *)
    @discardableResult
    public func dictationRecordingDidEnd() -> Self {
        self.value.dictationRecordingDidEnd()
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 2.0, *)
    @discardableResult
    public func dictationRecognitionFailed() -> Self {
        self.value.dictationRecognitionFailed()
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 2.0, *)
    @discardableResult
    public func removeDictationResultPlaceholder(_ placeholder: Any, willInsertResult: Swift.Bool) -> Self {
        self.value.removeDictationResultPlaceholder(placeholder, willInsertResult: willInsertResult)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 2.0, *)
    @discardableResult
    public func insertText(_ text: Swift.String, alternatives: [Swift.String], style: UIKit.UITextAlternativeStyle) -> Self {
        self.value.insertText(text, alternatives: alternatives, style: style)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 3.2, *)
    @discardableResult
    public func setAttributedMarkedText(_ markedText: Foundation.NSAttributedString?, selectedRange: Foundation.NSRange) -> Self {
        self.value.setAttributedMarkedText(markedText, selectedRange: selectedRange)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 13.0, *)
    @discardableResult
    public func remove(_ textPlaceholder: UIKit.UITextPlaceholder) -> Self {
        self.value.remove(textPlaceholder)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 9.0, *)
    @discardableResult
    public func beginFloatingCursor(at point: CoreFoundation.CGPoint) -> Self {
        self.value.beginFloatingCursor(at: point)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 9.0, *)
    @discardableResult
    public func updateFloatingCursor(at point: CoreFoundation.CGPoint) -> Self {
        self.value.updateFloatingCursor(at: point)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 9.0, *)
    @discardableResult
    public func endFloatingCursor() -> Self {
        self.value.endFloatingCursor()
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 16.0, *)
    @discardableResult
    public func willPresentEditMenu(animator: UIKit.UIEditMenuInteractionAnimating) -> Self {
        self.value.willPresentEditMenu(animator: animator)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 16.0, *)
    @discardableResult
    public func willDismissEditMenu(animator: UIKit.UIEditMenuInteractionAnimating) -> Self {
        self.value.willDismissEditMenu(animator: animator)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 2.0, *)
    @discardableResult
    public func insertText(_ text: Swift.String) -> Self {
        self.value.insertText(text)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 2.0, *)
    @discardableResult
    public func deleteBackward() -> Self {
        self.value.deleteBackward()
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 16.0, *)
    @discardableResult
    public func findInteraction(_ interaction: UIKit.UIFindInteraction, didBegin session: UIKit.UIFindSession) -> Self {
        self.value.findInteraction(interaction, didBegin: session)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 16.0, *)
    @discardableResult
    public func findInteraction(_ interaction: UIKit.UIFindInteraction, didEnd session: UIKit.UIFindSession) -> Self {
        self.value.findInteraction(interaction, didEnd: session)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 16.0, *)
    @discardableResult
    public func performTextSearch(withQueryString string: Swift.String, using options: UIKit.UITextSearchOptions, resultAggregator aggregator: UIKit.__UITextSearchAggregator) -> Self {
        self.value.performTextSearch(withQueryString: string, using: options, resultAggregator: aggregator)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 16.0, *)
    @discardableResult
    public func decorateFound(_ range: UIKit.UITextRange, inDocument document: UIKit.__UITextSearchDocumentIdentifier?, using style: UIKit.UITextSearchFoundTextStyle) -> Self {
        self.value.decorateFound(range, inDocument: document, using: style)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 16.0, *)
    @discardableResult
    public func clearAllDecoratedFoundText() -> Self {
        self.value.clearAllDecoratedFoundText()
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 16.0, *)
    @discardableResult
    public func replaceFoundText(in range: UIKit.UITextRange, inDocument document: UIKit.__UITextSearchDocumentIdentifier?, withText replacementText: Swift.String) -> Self {
        self.value.replaceFoundText(in: range, inDocument: document, withText: replacementText)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 16.0, *)
    @discardableResult
    public func replaceAllOccurrences(ofQueryString queryString: Swift.String, using options: UIKit.UITextSearchOptions, withText replacementText: Swift.String) -> Self {
        self.value.replaceAllOccurrences(ofQueryString: queryString, using: options, withText: replacementText)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 16.0, *)
    @discardableResult
    public func willHighlightFound(_ range: UIKit.UITextRange, inDocument document: UIKit.__UITextSearchDocumentIdentifier?) -> Self {
        self.value.willHighlightFound(range, inDocument: document)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 16.0, *)
    @discardableResult
    public func scrollRangeToVisible(_ range: UIKit.UITextRange, inDocument document: UIKit.__UITextSearchDocumentIdentifier?) -> Self {
        self.value.scrollRangeToVisible(range, inDocument: document)
        return Modify.DynamicMemberWrap(self.value)
    }
}

#endif
