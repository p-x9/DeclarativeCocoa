
// Generated file
// DO NOT EDIT THIS FILE

#if canImport(UIKit)
import UIKit

extension Modify.DynamicMemberWrap where T: UICollectionViewController {
    @available(iOS 6.0, *)
    @discardableResult
    public func collectionView(_ collectionView: UIKit.UICollectionView, didHighlightItemAt indexPath: Foundation.IndexPath) -> Self {
        self.value.collectionView(collectionView, didHighlightItemAt: indexPath)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 6.0, *)
    @discardableResult
    public func collectionView(_ collectionView: UIKit.UICollectionView, didUnhighlightItemAt indexPath: Foundation.IndexPath) -> Self {
        self.value.collectionView(collectionView, didUnhighlightItemAt: indexPath)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 6.0, *)
    @discardableResult
    public func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath) -> Self {
        self.value.collectionView(collectionView, didSelectItemAt: indexPath)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 6.0, *)
    @discardableResult
    public func collectionView(_ collectionView: UIKit.UICollectionView, didDeselectItemAt indexPath: Foundation.IndexPath) -> Self {
        self.value.collectionView(collectionView, didDeselectItemAt: indexPath)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 16.0, *)
    @discardableResult
    public func collectionView(_ collectionView: UIKit.UICollectionView, performPrimaryActionForItemAt indexPath: Foundation.IndexPath) -> Self {
        self.value.collectionView(collectionView, performPrimaryActionForItemAt: indexPath)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 8.0, *)
    @discardableResult
    public func collectionView(_ collectionView: UIKit.UICollectionView, willDisplay cell: UIKit.UICollectionViewCell, forItemAt indexPath: Foundation.IndexPath) -> Self {
        self.value.collectionView(collectionView, willDisplay: cell, forItemAt: indexPath)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 8.0, *)
    @discardableResult
    public func collectionView(_ collectionView: UIKit.UICollectionView, willDisplaySupplementaryView view: UIKit.UICollectionReusableView, forElementKind elementKind: Swift.String, at indexPath: Foundation.IndexPath) -> Self {
        self.value.collectionView(collectionView, willDisplaySupplementaryView: view, forElementKind: elementKind, at: indexPath)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 6.0, *)
    @discardableResult
    public func collectionView(_ collectionView: UIKit.UICollectionView, didEndDisplaying cell: UIKit.UICollectionViewCell, forItemAt indexPath: Foundation.IndexPath) -> Self {
        self.value.collectionView(collectionView, didEndDisplaying: cell, forItemAt: indexPath)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 6.0, *)
    @discardableResult
    public func collectionView(_ collectionView: UIKit.UICollectionView, didEndDisplayingSupplementaryView view: UIKit.UICollectionReusableView, forElementOfKind elementKind: Swift.String, at indexPath: Foundation.IndexPath) -> Self {
        self.value.collectionView(collectionView, didEndDisplayingSupplementaryView: view, forElementOfKind: elementKind, at: indexPath)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    @available(iOS, introduced: 6.0, deprecated: 13.0)
    public func collectionView(_ collectionView: UIKit.UICollectionView, performAction action: ObjectiveC.Selector, forItemAt indexPath: Foundation.IndexPath, withSender sender: Any?) -> Self {
        self.value.collectionView(collectionView, performAction: action, forItemAt: indexPath, withSender: sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 9.0, *)
    @discardableResult
    public func collectionView(_ collectionView: UIKit.UICollectionView, didUpdateFocusIn context: UIKit.UICollectionViewFocusUpdateContext, with coordinator: UIKit.UIFocusAnimationCoordinator) -> Self {
        self.value.collectionView(collectionView, didUpdateFocusIn: context, with: coordinator)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 13.0, *)
    @discardableResult
    public func collectionView(_ collectionView: UIKit.UICollectionView, didBeginMultipleSelectionInteractionAt indexPath: Foundation.IndexPath) -> Self {
        self.value.collectionView(collectionView, didBeginMultipleSelectionInteractionAt: indexPath)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 13.0, *)
    @discardableResult
    public func collectionViewDidEndMultipleSelectionInteraction(_ collectionView: UIKit.UICollectionView) -> Self {
        self.value.collectionViewDidEndMultipleSelectionInteraction(collectionView)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 13.0, *)
    @discardableResult
    public func collectionView(_ collectionView: UIKit.UICollectionView, willPerformPreviewActionForMenuWith configuration: UIKit.UIContextMenuConfiguration, animator: UIKit.UIContextMenuInteractionCommitAnimating) -> Self {
        self.value.collectionView(collectionView, willPerformPreviewActionForMenuWith: configuration, animator: animator)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 13.2, *)
    @discardableResult
    public func collectionView(_ collectionView: UIKit.UICollectionView, willDisplayContextMenu configuration: UIKit.UIContextMenuConfiguration, animator: UIKit.UIContextMenuInteractionAnimating?) -> Self {
        self.value.collectionView(collectionView, willDisplayContextMenu: configuration, animator: animator)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 13.2, *)
    @discardableResult
    public func collectionView(_ collectionView: UIKit.UICollectionView, willEndContextMenuInteraction configuration: UIKit.UIContextMenuConfiguration, animator: UIKit.UIContextMenuInteractionAnimating?) -> Self {
        self.value.collectionView(collectionView, willEndContextMenuInteraction: configuration, animator: animator)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 6.0, *)
    @discardableResult
    public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView) -> Self {
        self.value.scrollViewDidScroll(scrollView)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 3.2, *)
    @discardableResult
    public func scrollViewDidZoom(_ scrollView: UIKit.UIScrollView) -> Self {
        self.value.scrollViewDidZoom(scrollView)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 6.0, *)
    @discardableResult
    public func scrollViewWillBeginDragging(_ scrollView: UIKit.UIScrollView) -> Self {
        self.value.scrollViewWillBeginDragging(scrollView)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 5.0, *)
    @discardableResult
    public func scrollViewWillEndDragging(_ scrollView: UIKit.UIScrollView, withVelocity velocity: CoreFoundation.CGPoint, targetContentOffset: Swift.UnsafeMutablePointer<CoreFoundation.CGPoint>) -> Self {
        self.value.scrollViewWillEndDragging(scrollView, withVelocity: velocity, targetContentOffset: targetContentOffset)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 6.0, *)
    @discardableResult
    public func scrollViewDidEndDragging(_ scrollView: UIKit.UIScrollView, willDecelerate decelerate: Swift.Bool) -> Self {
        self.value.scrollViewDidEndDragging(scrollView, willDecelerate: decelerate)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 6.0, *)
    @discardableResult
    public func scrollViewWillBeginDecelerating(_ scrollView: UIKit.UIScrollView) -> Self {
        self.value.scrollViewWillBeginDecelerating(scrollView)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 6.0, *)
    @discardableResult
    public func scrollViewDidEndDecelerating(_ scrollView: UIKit.UIScrollView) -> Self {
        self.value.scrollViewDidEndDecelerating(scrollView)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 6.0, *)
    @discardableResult
    public func scrollViewDidEndScrollingAnimation(_ scrollView: UIKit.UIScrollView) -> Self {
        self.value.scrollViewDidEndScrollingAnimation(scrollView)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 3.2, *)
    @discardableResult
    public func scrollViewWillBeginZooming(_ scrollView: UIKit.UIScrollView, with view: UIKit.UIView?) -> Self {
        self.value.scrollViewWillBeginZooming(scrollView, with: view)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 6.0, *)
    @discardableResult
    public func scrollViewDidEndZooming(_ scrollView: UIKit.UIScrollView, with view: UIKit.UIView?, atScale scale: CoreFoundation.CGFloat) -> Self {
        self.value.scrollViewDidEndZooming(scrollView, with: view, atScale: scale)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 6.0, *)
    @discardableResult
    public func scrollViewDidScrollToTop(_ scrollView: UIKit.UIScrollView) -> Self {
        self.value.scrollViewDidScrollToTop(scrollView)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 11.0, *)
    @discardableResult
    public func scrollViewDidChangeAdjustedContentInset(_ scrollView: UIKit.UIScrollView) -> Self {
        self.value.scrollViewDidChangeAdjustedContentInset(scrollView)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 9.0, *)
    @discardableResult
    public func collectionView(_ collectionView: UIKit.UICollectionView, moveItemAt sourceIndexPath: Foundation.IndexPath, to destinationIndexPath: Foundation.IndexPath) -> Self {
        self.value.collectionView(collectionView, moveItemAt: sourceIndexPath, to: destinationIndexPath)
        return Modify.DynamicMemberWrap(self.value)
    }
}

#endif
