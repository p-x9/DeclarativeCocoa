
// Generated file
// DO NOT EDIT THIS FILE

#if canImport(UIKit)
import UIKit

extension Modify.DynamicMemberWrap where T: UITabBarController {
    @discardableResult
    public func setViewControllers(_ viewControllers: [UIKit.UIViewController]?, animated: Swift.Bool) -> Self {
        self.value.setViewControllers(viewControllers, animated: animated)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 2.0, *)
    @discardableResult
    public func tabBar(_ tabBar: UIKit.UITabBar, didSelect item: UIKit.UITabBarItem) -> Self {
        self.value.tabBar(tabBar, didSelect: item)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 2.0, *)
    @discardableResult
    public func tabBar(_ tabBar: UIKit.UITabBar, willBeginCustomizing items: [UIKit.UITabBarItem]) -> Self {
        self.value.tabBar(tabBar, willBeginCustomizing: items)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 2.0, *)
    @discardableResult
    public func tabBar(_ tabBar: UIKit.UITabBar, didBeginCustomizing items: [UIKit.UITabBarItem]) -> Self {
        self.value.tabBar(tabBar, didBeginCustomizing: items)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 2.0, *)
    @discardableResult
    public func tabBar(_ tabBar: UIKit.UITabBar, willEndCustomizing items: [UIKit.UITabBarItem], changed: Swift.Bool) -> Self {
        self.value.tabBar(tabBar, willEndCustomizing: items, changed: changed)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 2.0, *)
    @discardableResult
    public func tabBar(_ tabBar: UIKit.UITabBar, didEndCustomizing items: [UIKit.UITabBarItem], changed: Swift.Bool) -> Self {
        self.value.tabBar(tabBar, didEndCustomizing: items, changed: changed)
        return Modify.DynamicMemberWrap(self.value)
    }
}

#endif
