
// Generated file
// DO NOT EDIT THIS FILE

#if canImport(UIKit)
import UIKit

extension Modify.DynamicMemberWrap where T: UISearchBar {
    @available(iOS 3.0, *)
    @discardableResult
    public func setShowsCancelButton(_ showsCancelButton: Swift.Bool, animated: Swift.Bool) -> Self {
        self.value.setShowsCancelButton(showsCancelButton, animated: animated)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 13.0, *)
    @discardableResult
    public func setShowsScope(_ show: Swift.Bool, animated animate: Swift.Bool) -> Self {
        self.value.setShowsScope(show, animated: animate)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 7.0, *)
    @discardableResult
    public func setBackgroundImage(_ backgroundImage: UIKit.UIImage?, for barPosition: UIKit.UIBarPosition, barMetrics: UIKit.UIBarMetrics) -> Self {
        self.value.setBackgroundImage(backgroundImage, for: barPosition, barMetrics: barMetrics)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 5.0, *)
    @discardableResult
    public func setSearchFieldBackgroundImage(_ backgroundImage: UIKit.UIImage?, for state: UIKit.UIControl.State) -> Self {
        self.value.setSearchFieldBackgroundImage(backgroundImage, for: state)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 5.0, *)
    @discardableResult
    public func setImage(_ iconImage: UIKit.UIImage?, for icon: UIKit.UISearchBar.Icon, state: UIKit.UIControl.State) -> Self {
        self.value.setImage(iconImage, for: icon, state: state)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 5.0, *)
    @discardableResult
    public func setScopeBarButtonBackgroundImage(_ backgroundImage: UIKit.UIImage?, for state: UIKit.UIControl.State) -> Self {
        self.value.setScopeBarButtonBackgroundImage(backgroundImage, for: state)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 5.0, *)
    @discardableResult
    public func setScopeBarButtonDividerImage(_ dividerImage: UIKit.UIImage?, forLeftSegmentState leftState: UIKit.UIControl.State, rightSegmentState rightState: UIKit.UIControl.State) -> Self {
        self.value.setScopeBarButtonDividerImage(dividerImage, forLeftSegmentState: leftState, rightSegmentState: rightState)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 5.0, *)
    @discardableResult
    public func setScopeBarButtonTitleTextAttributes(_ attributes: [Foundation.NSAttributedString.Key : Any]?, for state: UIKit.UIControl.State) -> Self {
        self.value.setScopeBarButtonTitleTextAttributes(attributes, for: state)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 5.0, *)
    @discardableResult
    public func setPositionAdjustment(_ adjustment: UIKit.UIOffset, for icon: UIKit.UISearchBar.Icon) -> Self {
        self.value.setPositionAdjustment(adjustment, for: icon)
        return Modify.DynamicMemberWrap(self.value)
    }
}

#endif
