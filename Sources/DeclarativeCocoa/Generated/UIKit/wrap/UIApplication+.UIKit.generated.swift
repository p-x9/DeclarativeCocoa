
// Generated file
// DO NOT EDIT THIS FILE

#if canImport(UIKit)
import UIKit

extension Modify.DynamicMemberWrap where T: UIApplication {
    @discardableResult
    @available(iOS, introduced: 2.0, deprecated: 13.0, message: "Use UIView's userInteractionEnabled property instead")
    public func beginIgnoringInteractionEvents() -> Self {
        self.value.beginIgnoringInteractionEvents()
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    @available(iOS, introduced: 2.0, deprecated: 13.0, message: "Use UIView's userInteractionEnabled property instead")
    public func endIgnoringInteractionEvents() -> Self {
        self.value.endIgnoringInteractionEvents()
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 10.0, *)
    @discardableResult
    public func open(_ url: Foundation.URL, options: [UIKit.UIApplication.OpenExternalURLOptionsKey : Any] = [:], completionHandler completion: ((Swift.Bool) -> Swift.Void)? = nil) -> Self {
        self.value.open(url, options: options, completionHandler: completion)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func sendEvent(_ event: UIKit.UIEvent) -> Self {
        self.value.sendEvent(event)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 4.0, *)
    @discardableResult
    public func endBackgroundTask(_ identifier: UIKit.UIBackgroundTaskIdentifier) -> Self {
        self.value.endBackgroundTask(identifier)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    @available(iOS, introduced: 7.0, deprecated: 13.0, message: "Use a BGAppRefreshTask in the BackgroundTasks framework instead")
    public func setMinimumBackgroundFetchInterval(_ minimumBackgroundFetchInterval: Foundation.TimeInterval) -> Self {
        self.value.setMinimumBackgroundFetchInterval(minimumBackgroundFetchInterval)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 13.0, *)
    @discardableResult
    public func requestSceneSessionActivation(_ sceneSession: UIKit.UISceneSession?, userActivity: Foundation.NSUserActivity?, options: UIKit.UIScene.ActivationRequestOptions?, errorHandler: ((Swift.Error) -> Swift.Void)? = nil) -> Self {
        self.value.requestSceneSessionActivation(sceneSession, userActivity: userActivity, options: options, errorHandler: errorHandler)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 13.0, *)
    @discardableResult
    public func requestSceneSessionDestruction(_ sceneSession: UIKit.UISceneSession, options: UIKit.UISceneDestructionRequestOptions?, errorHandler: ((Swift.Error) -> Swift.Void)? = nil) -> Self {
        self.value.requestSceneSessionDestruction(sceneSession, options: options, errorHandler: errorHandler)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 13.0, *)
    @discardableResult
    public func requestSceneSessionRefresh(_ sceneSession: UIKit.UISceneSession) -> Self {
        self.value.requestSceneSessionRefresh(sceneSession)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    @available(iOS, unavailable, introduced: 2.0, deprecated: 3.2, message: "Use -[UIViewController prefersStatusBarHidden]")
    public func setStatusBarHidden(_ hidden: Swift.Bool, animated: Swift.Bool) -> Self {
        self.value.setStatusBarHidden(hidden, animated: animated)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    @available(iOS, introduced: 2.0, deprecated: 9.0, message: "Explicit setting of the status bar orientation is more limited in iOS 6.0 and later")
    public func setStatusBarOrientation(_ interfaceOrientation: UIKit.UIInterfaceOrientation, animated: Swift.Bool) -> Self {
        self.value.setStatusBarOrientation(interfaceOrientation, animated: animated)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    @available(iOS, introduced: 2.0, deprecated: 9.0, message: "Use -[UIViewController preferredStatusBarStyle]")
    public func setStatusBarStyle(_ statusBarStyle: UIKit.UIStatusBarStyle, animated: Swift.Bool) -> Self {
        self.value.setStatusBarStyle(statusBarStyle, animated: animated)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    @available(iOS, introduced: 3.2, deprecated: 9.0, message: "Use -[UIViewController prefersStatusBarHidden]")
    public func setStatusBarHidden(_ hidden: Swift.Bool, with animation: UIKit.UIStatusBarAnimation) -> Self {
        self.value.setStatusBarHidden(hidden, with: animation)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    @available(iOS, introduced: 4.0, deprecated: 9.0, message: "Please use PushKit for VoIP applications instead of calling this method")
    public func clearKeepAliveTimeout() -> Self {
        self.value.clearKeepAliveTimeout()
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 6.0, *)
    @discardableResult
    public func extendStateRestoration() -> Self {
        self.value.extendStateRestoration()
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 6.0, *)
    @discardableResult
    public func completeStateRestoration() -> Self {
        self.value.completeStateRestoration()
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 7.0, *)
    @discardableResult
    public func ignoreSnapshotOnNextApplicationLaunch() -> Self {
        self.value.ignoreSnapshotOnNextApplicationLaunch()
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 10.3, *)
    @discardableResult
    public func setAlternateIconName(_ alternateIconName: Swift.String?, completionHandler: ((Swift.Error?) -> Swift.Void)? = nil) -> Self {
        self.value.setAlternateIconName(alternateIconName, completionHandler: completionHandler)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    @available(iOS, introduced: 5.0, deprecated: 9.0, message: "Newsstand apps now behave like normal apps on SpringBoard")
    public func setNewsstandIconImage(_ image: UIKit.UIImage?) -> Self {
        self.value.setNewsstandIconImage(image)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 4.0, *)
    @discardableResult
    public func beginReceivingRemoteControlEvents() -> Self {
        self.value.beginReceivingRemoteControlEvents()
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 4.0, *)
    @discardableResult
    public func endReceivingRemoteControlEvents() -> Self {
        self.value.endReceivingRemoteControlEvents()
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    @available(iOS, introduced: 8.0, deprecated: 10.0, message: "Use UserNotifications Framework's -[UNUserNotificationCenter requestAuthorizationWithOptions:completionHandler:] and -[UNUserNotificationCenter setNotificationCategories:]")
    public func registerUserNotificationSettings(_ notificationSettings: UIKit.UIUserNotificationSettings) -> Self {
        self.value.registerUserNotificationSettings(notificationSettings)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    @available(iOS, introduced: 4.0, deprecated: 10.0, message: "Use UserNotifications Framework's -[UNUserNotificationCenter addNotificationRequest:withCompletionHandler:]")
    public func presentLocalNotificationNow(_ notification: UIKit.UILocalNotification) -> Self {
        self.value.presentLocalNotificationNow(notification)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    @available(iOS, introduced: 4.0, deprecated: 10.0, message: "Use UserNotifications Framework's -[UNUserNotificationCenter addNotificationRequest:withCompletionHandler:]")
    public func scheduleLocalNotification(_ notification: UIKit.UILocalNotification) -> Self {
        self.value.scheduleLocalNotification(notification)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    @available(iOS, introduced: 4.0, deprecated: 10.0, message: "Use UserNotifications Framework's -[UNUserNotificationCenter removePendingNotificationRequestsWithIdentifiers:]")
    public func cancelLocalNotification(_ notification: UIKit.UILocalNotification) -> Self {
        self.value.cancelLocalNotification(notification)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    @available(iOS, introduced: 4.0, deprecated: 10.0, message: "Use UserNotifications Framework's -[UNUserNotificationCenter removeAllPendingNotificationRequests]")
    public func cancelAllLocalNotifications() -> Self {
        self.value.cancelAllLocalNotifications()
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 8.0, *)
    @discardableResult
    public func registerForRemoteNotifications() -> Self {
        self.value.registerForRemoteNotifications()
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 3.0, *)
    @discardableResult
    public func unregisterForRemoteNotifications() -> Self {
        self.value.unregisterForRemoteNotifications()
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    @available(iOS, introduced: 3.0, deprecated: 8.0, message: "Use -[UIApplication registerForRemoteNotifications] and UserNotifications Framework's -[UNUserNotificationCenter requestAuthorizationWithOptions:completionHandler:]")
    public func registerForRemoteNotifications(matching types: UIKit.UIRemoteNotificationType) -> Self {
        self.value.registerForRemoteNotifications(matching: types)
        return Modify.DynamicMemberWrap(self.value)
    }
}

#endif
