
// Generated file
// DO NOT EDIT THIS FILE

#if canImport(UIKit)
import UIKit

extension Modify.DynamicMemberWrap where T: UIPasteboard {
    @discardableResult
    @available(iOS, introduced: 3.0, deprecated: 10.0, message: "Do not set persistence on pasteboards. This property is set automatically.")
    public func setPersistent(_ persistent: Swift.Bool) -> Self {
        self.value.setPersistent(persistent)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 11.0, *)
    @discardableResult
    public func setItemProviders(_ itemProviders: [Foundation.NSItemProvider], localOnly: Swift.Bool, expirationDate: Foundation.Date?) -> Self {
        self.value.setItemProviders(itemProviders, localOnly: localOnly, expirationDate: expirationDate)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 11.0, *)
    @discardableResult
    public func setObjects(_ objects: [Foundation.NSItemProviderWriting]) -> Self {
        self.value.setObjects(objects)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 11.0, *)
    @discardableResult
    public func setObjects(_ objects: [Foundation.NSItemProviderWriting], localOnly: Swift.Bool, expirationDate: Foundation.Date?) -> Self {
        self.value.setObjects(objects, localOnly: localOnly, expirationDate: expirationDate)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func setValue(_ value: Any, forPasteboardType pasteboardType: Swift.String) -> Self {
        self.value.setValue(value, forPasteboardType: pasteboardType)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func setData(_ data: Foundation.Data, forPasteboardType pasteboardType: Swift.String) -> Self {
        self.value.setData(data, forPasteboardType: pasteboardType)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func addItems(_ items: [[Swift.String : Any]]) -> Self {
        self.value.addItems(items)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 10.0, *)
    @discardableResult
    public func setItems(_ items: [[Swift.String : Any]], options: [UIKit.UIPasteboard.OptionsKey : Any] = [:]) -> Self {
        self.value.setItems(items, options: options)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 14.0, *)
    @discardableResult
    public func __detectPatterns(forPatterns patterns: Swift.Set<UIKit.UIPasteboard.DetectionPattern>, completionHandler: @escaping (Swift.Set<UIKit.UIPasteboard.DetectionPattern>?, Swift.Error?) -> Swift.Void) -> Self {
        self.value.__detectPatterns(forPatterns: patterns, completionHandler: completionHandler)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 14.0, *)
    @discardableResult
    public func __detectPatterns(forPatterns patterns: Swift.Set<UIKit.UIPasteboard.DetectionPattern>, inItemSet itemSet: Foundation.IndexSet?, completionHandler: @escaping ([Swift.Set<UIKit.UIPasteboard.DetectionPattern>]?, Swift.Error?) -> Swift.Void) -> Self {
        self.value.__detectPatterns(forPatterns: patterns, inItemSet: itemSet, completionHandler: completionHandler)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 14.0, *)
    @discardableResult
    public func __detectValues(forPatterns patterns: Swift.Set<UIKit.UIPasteboard.DetectionPattern>, completionHandler: @escaping ([UIKit.UIPasteboard.DetectionPattern : Any]?, Swift.Error?) -> Swift.Void) -> Self {
        self.value.__detectValues(forPatterns: patterns, completionHandler: completionHandler)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 14.0, *)
    @discardableResult
    public func __detectValues(forPatterns patterns: Swift.Set<UIKit.UIPasteboard.DetectionPattern>, inItemSet itemSet: Foundation.IndexSet?, completionHandler: @escaping ([[UIKit.UIPasteboard.DetectionPattern : Any]]?, Swift.Error?) -> Swift.Void) -> Self {
        self.value.__detectValues(forPatterns: patterns, inItemSet: itemSet, completionHandler: completionHandler)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    @available(iOS, introduced: 14.0, deprecated: 15.0)
    public func detectPatterns(for patterns: Swift.Set<UIKit.UIPasteboard.DetectionPattern>, completionHandler: @escaping (Swift.Result<Swift.Set<UIKit.UIPasteboard.DetectionPattern>, Swift.Error>) -> ()) -> Self {
        self.value.detectPatterns(for: patterns, completionHandler: completionHandler)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 15.0, *)
    @discardableResult
    public func detectPatterns(for keyPaths: Swift.Set<Swift.PartialKeyPath<UIKit.UIPasteboard.DetectedValues>>, completionHandler: @escaping (Swift.Result<Swift.Set<Swift.PartialKeyPath<UIKit.UIPasteboard.DetectedValues>>, Swift.Error>) -> ()) -> Self {
        self.value.detectPatterns(for: keyPaths, completionHandler: completionHandler)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    @available(iOS, introduced: 14.0, deprecated: 15.0)
    public func detectPatterns(for patterns: Swift.Set<UIKit.UIPasteboard.DetectionPattern>, inItemSet itemSet: Foundation.IndexSet?, completionHandler: @escaping (Swift.Result<[Swift.Set<UIKit.UIPasteboard.DetectionPattern>], Swift.Error>) -> ()) -> Self {
        self.value.detectPatterns(for: patterns, inItemSet: itemSet, completionHandler: completionHandler)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 15.0, *)
    @discardableResult
    public func detectPatterns(for keyPaths: Swift.Set<Swift.PartialKeyPath<UIKit.UIPasteboard.DetectedValues>>, inItemSet itemSet: Foundation.IndexSet?, completionHandler: @escaping (Swift.Result<[Swift.Set<Swift.PartialKeyPath<UIKit.UIPasteboard.DetectedValues>>], Swift.Error>) -> ()) -> Self {
        self.value.detectPatterns(for: keyPaths, inItemSet: itemSet, completionHandler: completionHandler)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    @available(iOS, introduced: 14.0, deprecated: 15.0)
    public func detectValues(for patterns: Swift.Set<UIKit.UIPasteboard.DetectionPattern>, completionHandler: @escaping (Swift.Result<[UIKit.UIPasteboard.DetectionPattern : Any], Swift.Error>) -> ()) -> Self {
        self.value.detectValues(for: patterns, completionHandler: completionHandler)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 15.0, *)
    @discardableResult
    public func detectValues(for keyPaths: Swift.Set<Swift.PartialKeyPath<UIKit.UIPasteboard.DetectedValues>>, completionHandler: @escaping (Swift.Result<UIKit.UIPasteboard.DetectedValues, Swift.Error>) -> ()) -> Self {
        self.value.detectValues(for: keyPaths, completionHandler: completionHandler)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    @available(iOS, introduced: 14.0, deprecated: 15.0)
    public func detectValues(for patterns: Swift.Set<UIKit.UIPasteboard.DetectionPattern>, inItemSet itemSet: Foundation.IndexSet?, completionHandler: @escaping (Swift.Result<[[UIKit.UIPasteboard.DetectionPattern : Any]], Swift.Error>) -> ()) -> Self {
        self.value.detectValues(for: patterns, inItemSet: itemSet, completionHandler: completionHandler)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 15.0, *)
    @discardableResult
    public func detectValues(for keyPaths: Swift.Set<Swift.PartialKeyPath<UIKit.UIPasteboard.DetectedValues>>, inItemSet itemSet: Foundation.IndexSet?, completionHandler: @escaping (Swift.Result<[UIKit.UIPasteboard.DetectedValues], Swift.Error>) -> ()) -> Self {
        self.value.detectValues(for: keyPaths, inItemSet: itemSet, completionHandler: completionHandler)
        return Modify.DynamicMemberWrap(self.value)
    }
}

#endif
