
// Generated file
// DO NOT EDIT THIS FILE

#if canImport(UIKit)
import UIKit

extension Modify.DynamicMemberWrap where T: UIView {
    @discardableResult
    public func sizeToFit() -> Self {
        value.sizeToFit()
        return self
    }

    @discardableResult
    public func removeFromSuperview() -> Self {
        value.removeFromSuperview()
        return self
    }

    @discardableResult
    public func insertSubview(_ view: UIView, at index: Int) -> Self {
        value.insertSubview(view, at: index)
        return self
    }

    @discardableResult
    public func exchangeSubview(at index1: Int, withSubviewAt index2: Int) -> Self {
        value.exchangeSubview(at: index1, withSubviewAt: index2)
        return self
    }

    @discardableResult
    public func addSubview(_ view: UIView) -> Self {
        value.addSubview(view)
        return self
    }

    @discardableResult
    public func insertSubview(_ view: UIView, belowSubview siblingSubview: UIView) -> Self {
        value.insertSubview(view, belowSubview: siblingSubview)
        return self
    }

    @discardableResult
    public func insertSubview(_ view: UIView, aboveSubview siblingSubview: UIView) -> Self {
        value.insertSubview(view, aboveSubview: siblingSubview)
        return self
    }

    @discardableResult
    public func bringSubviewToFront(_ view: UIView) -> Self {
        value.bringSubviewToFront(view)
        return self
    }

    @discardableResult
    public func sendSubviewToBack(_ view: UIView) -> Self {
        value.sendSubviewToBack(view)
        return self
    }

    @discardableResult
    public func didAddSubview(_ subview: UIView) -> Self {
        value.didAddSubview(subview)
        return self
    }

    @discardableResult
    public func willRemoveSubview(_ subview: UIView) -> Self {
        value.willRemoveSubview(subview)
        return self
    }

    @discardableResult
    public func willMove(toSuperview newSuperview: UIView?) -> Self {
        value.willMove(toSuperview: newSuperview)
        return self
    }

    @discardableResult
    public func didMoveToSuperview() -> Self {
        value.didMoveToSuperview()
        return self
    }

    @discardableResult
    public func willMove(toWindow newWindow: UIWindow?) -> Self {
        value.willMove(toWindow: newWindow)
        return self
    }

    @discardableResult
    public func didMoveToWindow() -> Self {
        value.didMoveToWindow()
        return self
    }

    @discardableResult
    public func setNeedsLayout() -> Self {
        value.setNeedsLayout()
        return self
    }

    @discardableResult
    public func layoutIfNeeded() -> Self {
        value.layoutIfNeeded()
        return self
    }

    @discardableResult
    public func layoutSubviews() -> Self {
        value.layoutSubviews()
        return self
    }

    @available(iOS 8.0, *)
    @discardableResult
    public func layoutMarginsDidChange() -> Self {
        value.layoutMarginsDidChange()
        return self
    }

    @available(iOS 11.0, *)
    @discardableResult
    public func safeAreaInsetsDidChange() -> Self {
        value.safeAreaInsetsDidChange()
        return self
    }

    @discardableResult
    public func draw(_ rect: CGRect) -> Self {
        value.draw(rect)
        return self
    }

    @discardableResult
    public func setNeedsDisplay() -> Self {
        value.setNeedsDisplay()
        return self
    }

    @discardableResult
    public func setNeedsDisplay(_ rect: CGRect) -> Self {
        value.setNeedsDisplay(rect)
        return self
    }

    @available(iOS 7.0, *)
    @discardableResult
    public func tintColorDidChange() -> Self {
        value.tintColorDidChange()
        return self
    }

    @available(iOS 3.2, *)
    @discardableResult
    public func addGestureRecognizer(_ gestureRecognizer: UIGestureRecognizer) -> Self {
        value.addGestureRecognizer(gestureRecognizer)
        return self
    }

    @available(iOS 3.2, *)
    @discardableResult
    public func removeGestureRecognizer(_ gestureRecognizer: UIGestureRecognizer) -> Self {
        value.removeGestureRecognizer(gestureRecognizer)
        return self
    }

    @available(iOS 7.0, *)
    @discardableResult
    public func addMotionEffect(_ effect: UIMotionEffect) -> Self {
        value.addMotionEffect(effect)
        return self
    }

    @available(iOS 7.0, *)
    @discardableResult
    public func removeMotionEffect(_ effect: UIMotionEffect) -> Self {
        value.removeMotionEffect(effect)
        return self
    }

    @available(iOS 6.0, *)
    @discardableResult
    public func addConstraint(_ constraint: NSLayoutConstraint) -> Self {
        value.addConstraint(constraint)
        return self
    }

    @available(iOS 6.0, *)
    @discardableResult
    public func addConstraints(_ constraints: [NSLayoutConstraint]) -> Self {
        value.addConstraints(constraints)
        return self
    }

    @available(iOS 6.0, *)
    @discardableResult
    public func removeConstraint(_ constraint: NSLayoutConstraint) -> Self {
        value.removeConstraint(constraint)
        return self
    }

    @available(iOS 6.0, *)
    @discardableResult
    public func removeConstraints(_ constraints: [NSLayoutConstraint]) -> Self {
        value.removeConstraints(constraints)
        return self
    }

    @available(iOS 6.0, *)
    @discardableResult
    public func updateConstraintsIfNeeded() -> Self {
        value.updateConstraintsIfNeeded()
        return self
    }

    @available(iOS 6.0, *)
    @discardableResult
    public func updateConstraints() -> Self {
        value.updateConstraints()
        return self
    }

    @available(iOS 6.0, *)
    @discardableResult
    public func setNeedsUpdateConstraints() -> Self {
        value.setNeedsUpdateConstraints()
        return self
    }

    @available(iOS 6.0, *)
    @discardableResult
    public func invalidateIntrinsicContentSize() -> Self {
        value.invalidateIntrinsicContentSize()
        return self
    }

    @available(iOS 6.0, *)
    @discardableResult
    public func setContentHuggingPriority(_ priority: UILayoutPriority, for axis: NSLayoutConstraint.Axis) -> Self {
        value.setContentHuggingPriority(priority, for: axis)
        return self
    }

    @available(iOS 6.0, *)
    @discardableResult
    public func setContentCompressionResistancePriority(_ priority: UILayoutPriority, for axis: NSLayoutConstraint.Axis) -> Self {
        value.setContentCompressionResistancePriority(priority, for: axis)
        return self
    }

    @available(iOS 9.0, *)
    @discardableResult
    public func addLayoutGuide(_ layoutGuide: UILayoutGuide) -> Self {
        value.addLayoutGuide(layoutGuide)
        return self
    }

    @available(iOS 9.0, *)
    @discardableResult
    public func removeLayoutGuide(_ layoutGuide: UILayoutGuide) -> Self {
        value.removeLayoutGuide(layoutGuide)
        return self
    }

    @available(iOS 6.0, *)
    @discardableResult
    public func exerciseAmbiguityInLayout() -> Self {
        value.exerciseAmbiguityInLayout()
        return self
    }

    @available(iOS 6.0, *)
    @discardableResult
    public func encodeRestorableState(with coder: NSCoder) -> Self {
        value.encodeRestorableState(with: coder)
        return self
    }

    @available(iOS 6.0, *)
    @discardableResult
    public func decodeRestorableState(with coder: NSCoder) -> Self {
        value.decodeRestorableState(with: coder)
        return self
    }
}

#endif
