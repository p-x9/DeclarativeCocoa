
// Generated file
// DO NOT EDIT THIS FILE

#if canImport(UIKit)
import UIKit

extension Modify.DynamicMemberWrap where T: UIBezierPath {
    @discardableResult
    public func move(to point: CoreFoundation.CGPoint) -> Self {
        self.value.move(to: point)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func addLine(to point: CoreFoundation.CGPoint) -> Self {
        self.value.addLine(to: point)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func addCurve(to endPoint: CoreFoundation.CGPoint, controlPoint1: CoreFoundation.CGPoint, controlPoint2: CoreFoundation.CGPoint) -> Self {
        self.value.addCurve(to: endPoint, controlPoint1: controlPoint1, controlPoint2: controlPoint2)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func addQuadCurve(to endPoint: CoreFoundation.CGPoint, controlPoint: CoreFoundation.CGPoint) -> Self {
        self.value.addQuadCurve(to: endPoint, controlPoint: controlPoint)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 4.0, *)
    @discardableResult
    public func addArc(withCenter center: CoreFoundation.CGPoint, radius: CoreFoundation.CGFloat, startAngle: CoreFoundation.CGFloat, endAngle: CoreFoundation.CGFloat, clockwise: Swift.Bool) -> Self {
        self.value.addArc(withCenter: center, radius: radius, startAngle: startAngle, endAngle: endAngle, clockwise: clockwise)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func close() -> Self {
        self.value.close()
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func removeAllPoints() -> Self {
        self.value.removeAllPoints()
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func append(_ bezierPath: UIKit.UIBezierPath) -> Self {
        self.value.append(bezierPath)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func apply(_ transform: CoreFoundation.CGAffineTransform) -> Self {
        self.value.apply(transform)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func setLineDash(_ pattern: Swift.UnsafePointer<CoreFoundation.CGFloat>?, count: Swift.Int, phase: CoreFoundation.CGFloat) -> Self {
        self.value.setLineDash(pattern, count: count, phase: phase)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func getLineDash(_ pattern: Swift.UnsafeMutablePointer<CoreFoundation.CGFloat>?, count: Swift.UnsafeMutablePointer<Swift.Int>?, phase: Swift.UnsafeMutablePointer<CoreFoundation.CGFloat>?) -> Self {
        self.value.getLineDash(pattern, count: count, phase: phase)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func fill() -> Self {
        self.value.fill()
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func stroke() -> Self {
        self.value.stroke()
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func fill(with blendMode: CoreGraphics.CGBlendMode, alpha: CoreFoundation.CGFloat) -> Self {
        self.value.fill(with: blendMode, alpha: alpha)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func stroke(with blendMode: CoreGraphics.CGBlendMode, alpha: CoreFoundation.CGFloat) -> Self {
        self.value.stroke(with: blendMode, alpha: alpha)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func addClip() -> Self {
        self.value.addClip()
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 3.2, *)
    @discardableResult
    public func encode(with coder: Foundation.NSCoder) -> Self {
        self.value.encode(with: coder)
        return Modify.DynamicMemberWrap(self.value)
    }
}

#endif
