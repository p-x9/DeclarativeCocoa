
// Generated file
// DO NOT EDIT THIS FILE

#if canImport(UIKit)
import UIKit

extension Modify.DynamicMemberWrap where T: UICollectionViewCell {
    @discardableResult
    public func prepareForReuse() -> Self {
        self.value.prepareForReuse()
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func apply(_ layoutAttributes: UICollectionViewLayoutAttributes) -> Self {
        self.value.apply(layoutAttributes)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func willTransition(from oldLayout: UICollectionViewLayout, to newLayout: UICollectionViewLayout) -> Self {
        self.value.willTransition(from: oldLayout, to: newLayout)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func didTransition(from oldLayout: UICollectionViewLayout, to newLayout: UICollectionViewLayout) -> Self {
        self.value.didTransition(from: oldLayout, to: newLayout)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 14.0, *)
    @discardableResult
    public func setNeedsUpdateConfiguration() -> Self {
        self.value.setNeedsUpdateConfiguration()
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 11.0, *)
    @discardableResult
    public func dragStateDidChange(_ dragState: UICollectionViewCell.DragState) -> Self {
        self.value.dragStateDidChange(dragState)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(iOS 14.0, tvOS 14.0, *)
    @discardableResult
    @MainActor dynamic public func updateConfiguration(using state: UICellConfigurationState) -> Self {
        self.value.updateConfiguration(using: state)
        return Modify.DynamicMemberWrap(self.value)
    }
}

#endif
