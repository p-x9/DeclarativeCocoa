
// Generated file
// DO NOT EDIT THIS FILE

#if canImport(UIKit)
import UIKit

extension Modify.DynamicMemberWrap where T: UIPopoverController {
    @discardableResult
    public func setContentView(_ viewController: UIKit.UIViewController, animated: Swift.Bool) -> Self {
        self.value.setContentView(viewController, animated: animated)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func setContentSize(_ size: CoreFoundation.CGSize, animated: Swift.Bool) -> Self {
        self.value.setContentSize(size, animated: animated)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func present(from rect: CoreFoundation.CGRect, in view: UIKit.UIView, permittedArrowDirections arrowDirections: UIKit.UIPopoverArrowDirection, animated: Swift.Bool) -> Self {
        self.value.present(from: rect, in: view, permittedArrowDirections: arrowDirections, animated: animated)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func present(from item: UIKit.UIBarButtonItem, permittedArrowDirections arrowDirections: UIKit.UIPopoverArrowDirection, animated: Swift.Bool) -> Self {
        self.value.present(from: item, permittedArrowDirections: arrowDirections, animated: animated)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func dismiss(animated: Swift.Bool) -> Self {
        self.value.dismiss(animated: animated)
        return Modify.DynamicMemberWrap(self.value)
    }
}

#endif
