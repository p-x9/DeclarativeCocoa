
// Generated file
// DO NOT EDIT THIS FILE

#if canImport(Cocoa)
import Cocoa

extension Modify.DynamicMemberWrap where T: NSView {
    @discardableResult
    public func getRectsBeingDrawn(_ rects: Swift.UnsafeMutablePointer<Swift.UnsafePointer<Foundation.NSRect>?>?, count: Swift.UnsafeMutablePointer<Swift.Int>?) -> Self {
        self.value.getRectsBeingDrawn(rects, count: count)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.5, *)
    @discardableResult
    public func viewDidHide() -> Self {
        self.value.viewDidHide()
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.5, *)
    @discardableResult
    public func viewDidUnhide() -> Self {
        self.value.viewDidUnhide()
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func addSubview(_ view: AppKit.NSView) -> Self {
        self.value.addSubview(view)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func addSubview(_ view: AppKit.NSView, positioned place: AppKit.NSWindow.OrderingMode, relativeTo otherView: AppKit.NSView?) -> Self {
        self.value.addSubview(view, positioned: place, relativeTo: otherView)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func sortSubviews(_ compare: @convention(c) (AppKit.NSView, AppKit.NSView, Swift.UnsafeMutableRawPointer?) -> Foundation.ComparisonResult, context: Swift.UnsafeMutableRawPointer?) -> Self {
        self.value.sortSubviews(compare, context: context)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func viewWillMove(toWindow newWindow: AppKit.NSWindow?) -> Self {
        self.value.viewWillMove(toWindow: newWindow)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func viewDidMoveToWindow() -> Self {
        self.value.viewDidMoveToWindow()
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func viewWillMove(toSuperview newSuperview: AppKit.NSView?) -> Self {
        self.value.viewWillMove(toSuperview: newSuperview)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func viewDidMoveToSuperview() -> Self {
        self.value.viewDidMoveToSuperview()
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func didAddSubview(_ subview: AppKit.NSView) -> Self {
        self.value.didAddSubview(subview)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func willRemoveSubview(_ subview: AppKit.NSView) -> Self {
        self.value.willRemoveSubview(subview)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func removeFromSuperview() -> Self {
        self.value.removeFromSuperview()
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func replaceSubview(_ oldView: AppKit.NSView, with newView: AppKit.NSView) -> Self {
        self.value.replaceSubview(oldView, with: newView)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func removeFromSuperviewWithoutNeedingDisplay() -> Self {
        self.value.removeFromSuperviewWithoutNeedingDisplay()
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.7, *)
    @discardableResult
    public func viewDidChangeBackingProperties() -> Self {
        self.value.viewDidChangeBackingProperties()
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func resizeSubviews(withOldSize oldSize: Foundation.NSSize) -> Self {
        self.value.resizeSubviews(withOldSize: oldSize)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func resize(withOldSuperviewSize oldSize: Foundation.NSSize) -> Self {
        self.value.resize(withOldSuperviewSize: oldSize)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func setFrameOrigin(_ newOrigin: Foundation.NSPoint) -> Self {
        self.value.setFrameOrigin(newOrigin)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func setFrameSize(_ newSize: Foundation.NSSize) -> Self {
        self.value.setFrameSize(newSize)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func setBoundsOrigin(_ newOrigin: Foundation.NSPoint) -> Self {
        self.value.setBoundsOrigin(newOrigin)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func setBoundsSize(_ newSize: Foundation.NSSize) -> Self {
        self.value.setBoundsSize(newSize)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func translateOrigin(to translation: Foundation.NSPoint) -> Self {
        self.value.translateOrigin(to: translation)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func scaleUnitSquare(to newUnitSize: Foundation.NSSize) -> Self {
        self.value.scaleUnitSquare(to: newUnitSize)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func rotate(byDegrees angle: CoreFoundation.CGFloat) -> Self {
        self.value.rotate(byDegrees: angle)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func setNeedsDisplay(_ invalidRect: Foundation.NSRect) -> Self {
        self.value.setNeedsDisplay(invalidRect)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    @available(macOS, introduced: 10.0, deprecated: 10.14, message: "To draw, subclass NSView and implement -drawRect:; AppKit's automatic deferred display mechanism will call -drawRect: as necessary to display the view.")
    public func lockFocus() -> Self {
        self.value.lockFocus()
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    @available(macOS, introduced: 10.0, deprecated: 10.14, message: "To draw, subclass NSView and implement -drawRect:; AppKit's automatic deferred display mechanism will call -drawRect: as necessary to display the view.")
    public func unlockFocus() -> Self {
        self.value.unlockFocus()
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func display() -> Self {
        self.value.display()
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func displayIfNeeded() -> Self {
        self.value.displayIfNeeded()
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func displayIfNeededIgnoringOpacity() -> Self {
        self.value.displayIfNeededIgnoringOpacity()
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func display(_ rect: Foundation.NSRect) -> Self {
        self.value.display(rect)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func displayIfNeeded(_ rect: Foundation.NSRect) -> Self {
        self.value.displayIfNeeded(rect)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func displayIgnoringOpacity(_ rect: Foundation.NSRect) -> Self {
        self.value.displayIgnoringOpacity(rect)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func displayIfNeededIgnoringOpacity(_ rect: Foundation.NSRect) -> Self {
        self.value.displayIfNeededIgnoringOpacity(rect)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func draw(_ dirtyRect: Foundation.NSRect) -> Self {
        self.value.draw(dirtyRect)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func displayIgnoringOpacity(_ rect: Foundation.NSRect, in context: AppKit.NSGraphicsContext) -> Self {
        self.value.displayIgnoringOpacity(rect, in: context)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func cacheDisplay(in rect: Foundation.NSRect, to bitmapImageRep: AppKit.NSBitmapImageRep) -> Self {
        self.value.cacheDisplay(in: rect, to: bitmapImageRep)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.5, *)
    @discardableResult
    public func viewWillDraw() -> Self {
        self.value.viewWillDraw()
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func scroll(_ point: Foundation.NSPoint) -> Self {
        self.value.scroll(point)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    @available(macOS, introduced: 10.0, deprecated: 10.14, message: "Use NSScrollView to achieve scrolling views.")
    public func scroll(_ rect: Foundation.NSRect, by delta: Foundation.NSSize) -> Self {
        self.value.scroll(rect, by: delta)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.5, *)
    @discardableResult
    public func translateRectsNeedingDisplay(in clipRect: Foundation.NSRect, by delta: Foundation.NSSize) -> Self {
        self.value.translateRectsNeedingDisplay(in: clipRect, by: delta)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.8, *)
    @discardableResult
    public func updateLayer() -> Self {
        self.value.updateLayer()
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.7, *)
    @discardableResult
    public func layoutSubtreeIfNeeded() -> Self {
        self.value.layoutSubtreeIfNeeded()
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.7, *)
    @discardableResult
    public func layout() -> Self {
        self.value.layout()
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.11, *)
    @discardableResult
    public func willOpenMenu(_ menu: AppKit.NSMenu, with event: AppKit.NSEvent) -> Self {
        self.value.willOpenMenu(menu, with: event)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.11, *)
    @discardableResult
    public func didCloseMenu(_ menu: AppKit.NSMenu, with event: AppKit.NSEvent?) -> Self {
        self.value.didCloseMenu(menu, with: event)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func removeToolTip(_ tag: AppKit.NSView.ToolTipTag) -> Self {
        self.value.removeToolTip(tag)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func removeAllToolTips() -> Self {
        self.value.removeAllToolTips()
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func viewWillStartLiveResize() -> Self {
        self.value.viewWillStartLiveResize()
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func viewDidEndLiveResize() -> Self {
        self.value.viewDidEndLiveResize()
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func getRectsExposedDuringLiveResize(_ exposedRects: Swift.UnsafeMutablePointer<Foundation.NSRect>, count: Swift.UnsafeMutablePointer<Swift.Int>) -> Self {
        self.value.getRectsExposedDuringLiveResize(exposedRects, count: count)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.7, *)
    @discardableResult
    public func prepareForReuse() -> Self {
        self.value.prepareForReuse()
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.9, *)
    @discardableResult
    public func prepareContent(in rect: Foundation.NSRect) -> Self {
        self.value.prepareContent(in: rect)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.14, *)
    @discardableResult
    public func viewDidChangeEffectiveAppearance() -> Self {
        self.value.viewDidChangeEffectiveAppearance()
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    @_Concurrency.MainActor public func draggingExited(_ sender: AppKit.NSDraggingInfo?) -> Self {
        self.value.draggingExited(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    @_Concurrency.MainActor public func concludeDragOperation(_ sender: AppKit.NSDraggingInfo?) -> Self {
        self.value.concludeDragOperation(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    @_Concurrency.MainActor public func draggingEnded(_ sender: AppKit.NSDraggingInfo) -> Self {
        self.value.draggingEnded(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.7, *)
    @discardableResult
    @_Concurrency.MainActor public func updateDraggingItemsForDrag(_ sender: AppKit.NSDraggingInfo?) -> Self {
        self.value.updateDraggingItemsForDrag(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityElement(_ accessibilityElement: Swift.Bool) -> Self {
        self.value.setAccessibilityElement(accessibilityElement)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityFrame(_ accessibilityFrame: Foundation.NSRect) -> Self {
        self.value.setAccessibilityFrame(accessibilityFrame)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityFocused(_ accessibilityFocused: Swift.Bool) -> Self {
        self.value.setAccessibilityFocused(accessibilityFocused)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityActivationPoint(_ accessibilityActivationPoint: Foundation.NSPoint) -> Self {
        self.value.setAccessibilityActivationPoint(accessibilityActivationPoint)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityTopLevelUIElement(_ accessibilityTopLevelUIElement: Any?) -> Self {
        self.value.setAccessibilityTopLevelUIElement(accessibilityTopLevelUIElement)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityURL(_ accessibilityURL: Foundation.URL?) -> Self {
        self.value.setAccessibilityURL(accessibilityURL)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityValue(_ accessibilityValue: Any?) -> Self {
        self.value.setAccessibilityValue(accessibilityValue)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityValueDescription(_ accessibilityValueDescription: Swift.String?) -> Self {
        self.value.setAccessibilityValueDescription(accessibilityValueDescription)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityVisibleChildren(_ accessibilityVisibleChildren: [Any]?) -> Self {
        self.value.setAccessibilityVisibleChildren(accessibilityVisibleChildren)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilitySubrole(_ accessibilitySubrole: AppKit.NSAccessibility.Subrole?) -> Self {
        self.value.setAccessibilitySubrole(accessibilitySubrole)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityTitle(_ accessibilityTitle: Swift.String?) -> Self {
        self.value.setAccessibilityTitle(accessibilityTitle)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityTitleUIElement(_ accessibilityTitleUIElement: Any?) -> Self {
        self.value.setAccessibilityTitleUIElement(accessibilityTitleUIElement)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityNextContents(_ accessibilityNextContents: [Any]?) -> Self {
        self.value.setAccessibilityNextContents(accessibilityNextContents)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityOrientation(_ accessibilityOrientation: AppKit.NSAccessibilityOrientation) -> Self {
        self.value.setAccessibilityOrientation(accessibilityOrientation)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityOverflowButton(_ accessibilityOverflowButton: Any?) -> Self {
        self.value.setAccessibilityOverflowButton(accessibilityOverflowButton)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityParent(_ accessibilityParent: Any?) -> Self {
        self.value.setAccessibilityParent(accessibilityParent)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityPlaceholderValue(_ accessibilityPlaceholderValue: Swift.String?) -> Self {
        self.value.setAccessibilityPlaceholderValue(accessibilityPlaceholderValue)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityPreviousContents(_ accessibilityPreviousContents: [Any]?) -> Self {
        self.value.setAccessibilityPreviousContents(accessibilityPreviousContents)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityRole(_ accessibilityRole: AppKit.NSAccessibility.Role?) -> Self {
        self.value.setAccessibilityRole(accessibilityRole)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityRoleDescription(_ accessibilityRoleDescription: Swift.String?) -> Self {
        self.value.setAccessibilityRoleDescription(accessibilityRoleDescription)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilitySearchButton(_ accessibilitySearchButton: Any?) -> Self {
        self.value.setAccessibilitySearchButton(accessibilitySearchButton)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilitySearchMenu(_ accessibilitySearchMenu: Any?) -> Self {
        self.value.setAccessibilitySearchMenu(accessibilitySearchMenu)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilitySelected(_ accessibilitySelected: Swift.Bool) -> Self {
        self.value.setAccessibilitySelected(accessibilitySelected)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilitySelectedChildren(_ accessibilitySelectedChildren: [Any]?) -> Self {
        self.value.setAccessibilitySelectedChildren(accessibilitySelectedChildren)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityServesAsTitleForUIElements(_ accessibilityServesAsTitleForUIElements: [Any]?) -> Self {
        self.value.setAccessibilityServesAsTitleForUIElements(accessibilityServesAsTitleForUIElements)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityShownMenu(_ accessibilityShownMenu: Any?) -> Self {
        self.value.setAccessibilityShownMenu(accessibilityShownMenu)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityMinValue(_ accessibilityMinValue: Any?) -> Self {
        self.value.setAccessibilityMinValue(accessibilityMinValue)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityMaxValue(_ accessibilityMaxValue: Any?) -> Self {
        self.value.setAccessibilityMaxValue(accessibilityMaxValue)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityLinkedUIElements(_ accessibilityLinkedUIElements: [Any]?) -> Self {
        self.value.setAccessibilityLinkedUIElements(accessibilityLinkedUIElements)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityWindow(_ accessibilityWindow: Any?) -> Self {
        self.value.setAccessibilityWindow(accessibilityWindow)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityIdentifier(_ accessibilityIdentifier: Swift.String?) -> Self {
        self.value.setAccessibilityIdentifier(accessibilityIdentifier)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityHelp(_ accessibilityHelp: Swift.String?) -> Self {
        self.value.setAccessibilityHelp(accessibilityHelp)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityFilename(_ accessibilityFilename: Swift.String?) -> Self {
        self.value.setAccessibilityFilename(accessibilityFilename)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityExpanded(_ accessibilityExpanded: Swift.Bool) -> Self {
        self.value.setAccessibilityExpanded(accessibilityExpanded)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityEdited(_ accessibilityEdited: Swift.Bool) -> Self {
        self.value.setAccessibilityEdited(accessibilityEdited)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityEnabled(_ accessibilityEnabled: Swift.Bool) -> Self {
        self.value.setAccessibilityEnabled(accessibilityEnabled)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityChildren(_ accessibilityChildren: [Any]?) -> Self {
        self.value.setAccessibilityChildren(accessibilityChildren)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.13, *)
    @discardableResult
    public func setAccessibilityChildrenInNavigationOrder(_ accessibilityChildrenInNavigationOrder: [AppKit.NSAccessibilityElementProtocol]?) -> Self {
        self.value.setAccessibilityChildrenInNavigationOrder(accessibilityChildrenInNavigationOrder)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityClearButton(_ accessibilityClearButton: Any?) -> Self {
        self.value.setAccessibilityClearButton(accessibilityClearButton)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityCancelButton(_ accessibilityCancelButton: Any?) -> Self {
        self.value.setAccessibilityCancelButton(accessibilityCancelButton)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityProtectedContent(_ accessibilityProtectedContent: Swift.Bool) -> Self {
        self.value.setAccessibilityProtectedContent(accessibilityProtectedContent)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityContents(_ accessibilityContents: [Any]?) -> Self {
        self.value.setAccessibilityContents(accessibilityContents)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityLabel(_ accessibilityLabel: Swift.String?) -> Self {
        self.value.setAccessibilityLabel(accessibilityLabel)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityAlternateUIVisible(_ accessibilityAlternateUIVisible: Swift.Bool) -> Self {
        self.value.setAccessibilityAlternateUIVisible(accessibilityAlternateUIVisible)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilitySharedFocusElements(_ accessibilitySharedFocusElements: [Any]?) -> Self {
        self.value.setAccessibilitySharedFocusElements(accessibilitySharedFocusElements)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.12, *)
    @discardableResult
    public func setAccessibilityRequired(_ accessibilityRequired: Swift.Bool) -> Self {
        self.value.setAccessibilityRequired(accessibilityRequired)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.13, *)
    @discardableResult
    public func setAccessibilityCustomRotors(_ accessibilityCustomRotors: [AppKit.NSAccessibilityCustomRotor]) -> Self {
        self.value.setAccessibilityCustomRotors(accessibilityCustomRotors)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityApplicationFocusedUIElement(_ accessibilityApplicationFocusedUIElement: Any?) -> Self {
        self.value.setAccessibilityApplicationFocusedUIElement(accessibilityApplicationFocusedUIElement)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityMainWindow(_ accessibilityMainWindow: Any?) -> Self {
        self.value.setAccessibilityMainWindow(accessibilityMainWindow)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityHidden(_ accessibilityHidden: Swift.Bool) -> Self {
        self.value.setAccessibilityHidden(accessibilityHidden)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityFrontmost(_ accessibilityFrontmost: Swift.Bool) -> Self {
        self.value.setAccessibilityFrontmost(accessibilityFrontmost)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityFocusedWindow(_ accessibilityFocusedWindow: Any?) -> Self {
        self.value.setAccessibilityFocusedWindow(accessibilityFocusedWindow)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityWindows(_ accessibilityWindows: [Any]?) -> Self {
        self.value.setAccessibilityWindows(accessibilityWindows)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityExtrasMenuBar(_ accessibilityExtrasMenuBar: Any?) -> Self {
        self.value.setAccessibilityExtrasMenuBar(accessibilityExtrasMenuBar)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityMenuBar(_ accessibilityMenuBar: Any?) -> Self {
        self.value.setAccessibilityMenuBar(accessibilityMenuBar)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityColumnTitles(_ accessibilityColumnTitles: [Any]?) -> Self {
        self.value.setAccessibilityColumnTitles(accessibilityColumnTitles)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityOrderedByRow(_ accessibilityOrderedByRow: Swift.Bool) -> Self {
        self.value.setAccessibilityOrderedByRow(accessibilityOrderedByRow)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityHorizontalUnits(_ accessibilityHorizontalUnits: AppKit.NSAccessibilityUnits) -> Self {
        self.value.setAccessibilityHorizontalUnits(accessibilityHorizontalUnits)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityVerticalUnits(_ accessibilityVerticalUnits: AppKit.NSAccessibilityUnits) -> Self {
        self.value.setAccessibilityVerticalUnits(accessibilityVerticalUnits)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityHorizontalUnitDescription(_ accessibilityHorizontalUnitDescription: Swift.String?) -> Self {
        self.value.setAccessibilityHorizontalUnitDescription(accessibilityHorizontalUnitDescription)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityVerticalUnitDescription(_ accessibilityVerticalUnitDescription: Swift.String?) -> Self {
        self.value.setAccessibilityVerticalUnitDescription(accessibilityVerticalUnitDescription)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityHandles(_ accessibilityHandles: [Any]?) -> Self {
        self.value.setAccessibilityHandles(accessibilityHandles)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityWarningValue(_ accessibilityWarningValue: Any?) -> Self {
        self.value.setAccessibilityWarningValue(accessibilityWarningValue)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityCriticalValue(_ accessibilityCriticalValue: Any?) -> Self {
        self.value.setAccessibilityCriticalValue(accessibilityCriticalValue)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityDisclosed(_ accessibilityDisclosed: Swift.Bool) -> Self {
        self.value.setAccessibilityDisclosed(accessibilityDisclosed)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityDisclosedByRow(_ accessibilityDisclosedByRow: Any?) -> Self {
        self.value.setAccessibilityDisclosedByRow(accessibilityDisclosedByRow)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityDisclosedRows(_ accessibilityDisclosedRows: Any?) -> Self {
        self.value.setAccessibilityDisclosedRows(accessibilityDisclosedRows)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityDisclosureLevel(_ accessibilityDisclosureLevel: Swift.Int) -> Self {
        self.value.setAccessibilityDisclosureLevel(accessibilityDisclosureLevel)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityMarkerUIElements(_ accessibilityMarkerUIElements: [Any]?) -> Self {
        self.value.setAccessibilityMarkerUIElements(accessibilityMarkerUIElements)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityMarkerValues(_ accessibilityMarkerValues: Any?) -> Self {
        self.value.setAccessibilityMarkerValues(accessibilityMarkerValues)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityMarkerGroupUIElement(_ accessibilityMarkerGroupUIElement: Any?) -> Self {
        self.value.setAccessibilityMarkerGroupUIElement(accessibilityMarkerGroupUIElement)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityUnits(_ accessibilityUnits: AppKit.NSAccessibilityUnits) -> Self {
        self.value.setAccessibilityUnits(accessibilityUnits)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityUnitDescription(_ accessibilityUnitDescription: Swift.String?) -> Self {
        self.value.setAccessibilityUnitDescription(accessibilityUnitDescription)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityRulerMarkerType(_ accessibilityRulerMarkerType: AppKit.NSAccessibilityRulerMarkerType) -> Self {
        self.value.setAccessibilityRulerMarkerType(accessibilityRulerMarkerType)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityMarkerTypeDescription(_ accessibilityMarkerTypeDescription: Swift.String?) -> Self {
        self.value.setAccessibilityMarkerTypeDescription(accessibilityMarkerTypeDescription)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityHorizontalScrollBar(_ accessibilityHorizontalScrollBar: Any?) -> Self {
        self.value.setAccessibilityHorizontalScrollBar(accessibilityHorizontalScrollBar)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityVerticalScrollBar(_ accessibilityVerticalScrollBar: Any?) -> Self {
        self.value.setAccessibilityVerticalScrollBar(accessibilityVerticalScrollBar)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityAllowedValues(_ accessibilityAllowedValues: [Foundation.NSNumber]?) -> Self {
        self.value.setAccessibilityAllowedValues(accessibilityAllowedValues)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityLabelUIElements(_ accessibilityLabelUIElements: [Any]?) -> Self {
        self.value.setAccessibilityLabelUIElements(accessibilityLabelUIElements)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityLabelValue(_ accessibilityLabelValue: Swift.Float) -> Self {
        self.value.setAccessibilityLabelValue(accessibilityLabelValue)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilitySplitters(_ accessibilitySplitters: [Any]?) -> Self {
        self.value.setAccessibilitySplitters(accessibilitySplitters)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityDecrementButton(_ accessibilityDecrementButton: Any?) -> Self {
        self.value.setAccessibilityDecrementButton(accessibilityDecrementButton)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityIncrementButton(_ accessibilityIncrementButton: Any?) -> Self {
        self.value.setAccessibilityIncrementButton(accessibilityIncrementButton)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityTabs(_ accessibilityTabs: [Any]?) -> Self {
        self.value.setAccessibilityTabs(accessibilityTabs)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityHeader(_ accessibilityHeader: Any?) -> Self {
        self.value.setAccessibilityHeader(accessibilityHeader)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityColumnCount(_ accessibilityColumnCount: Swift.Int) -> Self {
        self.value.setAccessibilityColumnCount(accessibilityColumnCount)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityRowCount(_ accessibilityRowCount: Swift.Int) -> Self {
        self.value.setAccessibilityRowCount(accessibilityRowCount)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityIndex(_ accessibilityIndex: Swift.Int) -> Self {
        self.value.setAccessibilityIndex(accessibilityIndex)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityColumns(_ accessibilityColumns: [Any]?) -> Self {
        self.value.setAccessibilityColumns(accessibilityColumns)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityRows(_ accessibilityRows: [Any]?) -> Self {
        self.value.setAccessibilityRows(accessibilityRows)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityVisibleRows(_ accessibilityVisibleRows: [Any]?) -> Self {
        self.value.setAccessibilityVisibleRows(accessibilityVisibleRows)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilitySelectedRows(_ accessibilitySelectedRows: [Any]?) -> Self {
        self.value.setAccessibilitySelectedRows(accessibilitySelectedRows)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityVisibleColumns(_ accessibilityVisibleColumns: [Any]?) -> Self {
        self.value.setAccessibilityVisibleColumns(accessibilityVisibleColumns)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilitySelectedColumns(_ accessibilitySelectedColumns: [Any]?) -> Self {
        self.value.setAccessibilitySelectedColumns(accessibilitySelectedColumns)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilitySortDirection(_ accessibilitySortDirection: AppKit.NSAccessibilitySortDirection) -> Self {
        self.value.setAccessibilitySortDirection(accessibilitySortDirection)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityRowHeaderUIElements(_ accessibilityRowHeaderUIElements: [Any]?) -> Self {
        self.value.setAccessibilityRowHeaderUIElements(accessibilityRowHeaderUIElements)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilitySelectedCells(_ accessibilitySelectedCells: [Any]?) -> Self {
        self.value.setAccessibilitySelectedCells(accessibilitySelectedCells)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityVisibleCells(_ accessibilityVisibleCells: [Any]?) -> Self {
        self.value.setAccessibilityVisibleCells(accessibilityVisibleCells)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityColumnHeaderUIElements(_ accessibilityColumnHeaderUIElements: [Any]?) -> Self {
        self.value.setAccessibilityColumnHeaderUIElements(accessibilityColumnHeaderUIElements)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityRowIndexRange(_ accessibilityRowIndexRange: Foundation.NSRange) -> Self {
        self.value.setAccessibilityRowIndexRange(accessibilityRowIndexRange)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityColumnIndexRange(_ accessibilityColumnIndexRange: Foundation.NSRange) -> Self {
        self.value.setAccessibilityColumnIndexRange(accessibilityColumnIndexRange)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityInsertionPointLineNumber(_ accessibilityInsertionPointLineNumber: Swift.Int) -> Self {
        self.value.setAccessibilityInsertionPointLineNumber(accessibilityInsertionPointLineNumber)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilitySharedCharacterRange(_ accessibilitySharedCharacterRange: Foundation.NSRange) -> Self {
        self.value.setAccessibilitySharedCharacterRange(accessibilitySharedCharacterRange)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilitySharedTextUIElements(_ accessibilitySharedTextUIElements: [Any]?) -> Self {
        self.value.setAccessibilitySharedTextUIElements(accessibilitySharedTextUIElements)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityVisibleCharacterRange(_ accessibilityVisibleCharacterRange: Foundation.NSRange) -> Self {
        self.value.setAccessibilityVisibleCharacterRange(accessibilityVisibleCharacterRange)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityNumberOfCharacters(_ accessibilityNumberOfCharacters: Swift.Int) -> Self {
        self.value.setAccessibilityNumberOfCharacters(accessibilityNumberOfCharacters)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilitySelectedText(_ accessibilitySelectedText: Swift.String?) -> Self {
        self.value.setAccessibilitySelectedText(accessibilitySelectedText)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilitySelectedTextRange(_ accessibilitySelectedTextRange: Foundation.NSRange) -> Self {
        self.value.setAccessibilitySelectedTextRange(accessibilitySelectedTextRange)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilitySelectedTextRanges(_ accessibilitySelectedTextRanges: [Foundation.NSValue]?) -> Self {
        self.value.setAccessibilitySelectedTextRanges(accessibilitySelectedTextRanges)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityToolbarButton(_ accessibilityToolbarButton: Any?) -> Self {
        self.value.setAccessibilityToolbarButton(accessibilityToolbarButton)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityModal(_ accessibilityModal: Swift.Bool) -> Self {
        self.value.setAccessibilityModal(accessibilityModal)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityProxy(_ accessibilityProxy: Any?) -> Self {
        self.value.setAccessibilityProxy(accessibilityProxy)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityMain(_ accessibilityMain: Swift.Bool) -> Self {
        self.value.setAccessibilityMain(accessibilityMain)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityFullScreenButton(_ accessibilityFullScreenButton: Any?) -> Self {
        self.value.setAccessibilityFullScreenButton(accessibilityFullScreenButton)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityGrowArea(_ accessibilityGrowArea: Any?) -> Self {
        self.value.setAccessibilityGrowArea(accessibilityGrowArea)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityDocument(_ accessibilityDocument: Swift.String?) -> Self {
        self.value.setAccessibilityDocument(accessibilityDocument)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityDefaultButton(_ accessibilityDefaultButton: Any?) -> Self {
        self.value.setAccessibilityDefaultButton(accessibilityDefaultButton)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityCloseButton(_ accessibilityCloseButton: Any?) -> Self {
        self.value.setAccessibilityCloseButton(accessibilityCloseButton)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityZoomButton(_ accessibilityZoomButton: Any?) -> Self {
        self.value.setAccessibilityZoomButton(accessibilityZoomButton)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityMinimizeButton(_ accessibilityMinimizeButton: Any?) -> Self {
        self.value.setAccessibilityMinimizeButton(accessibilityMinimizeButton)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func setAccessibilityMinimized(_ accessibilityMinimized: Swift.Bool) -> Self {
        self.value.setAccessibilityMinimized(accessibilityMinimized)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.13, *)
    @discardableResult
    public func setAccessibilityCustomActions(_ accessibilityCustomActions: [AppKit.NSAccessibilityCustomAction]?) -> Self {
        self.value.setAccessibilityCustomActions(accessibilityCustomActions)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func rulerView(_ ruler: AppKit.NSRulerView, didMove marker: AppKit.NSRulerMarker) -> Self {
        self.value.rulerView(ruler, didMove: marker)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func rulerView(_ ruler: AppKit.NSRulerView, didRemove marker: AppKit.NSRulerMarker) -> Self {
        self.value.rulerView(ruler, didRemove: marker)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func rulerView(_ ruler: AppKit.NSRulerView, didAdd marker: AppKit.NSRulerMarker) -> Self {
        self.value.rulerView(ruler, didAdd: marker)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func rulerView(_ ruler: AppKit.NSRulerView, handleMouseDownWith event: AppKit.NSEvent) -> Self {
        self.value.rulerView(ruler, handleMouseDownWith: event)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func rulerView(_ ruler: AppKit.NSRulerView, willSetClientView newClient: AppKit.NSView) -> Self {
        self.value.rulerView(ruler, willSetClientView: newClient)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.11, *)
    @discardableResult
    public func addLayoutGuide(_ guide: AppKit.NSLayoutGuide) -> Self {
        self.value.addLayoutGuide(guide)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.11, *)
    @discardableResult
    public func removeLayoutGuide(_ guide: AppKit.NSLayoutGuide) -> Self {
        self.value.removeLayoutGuide(guide)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.7, *)
    @discardableResult
    public func exerciseAmbiguityInLayout() -> Self {
        self.value.exerciseAmbiguityInLayout()
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.7, *)
    @discardableResult
    public func invalidateIntrinsicContentSize() -> Self {
        self.value.invalidateIntrinsicContentSize()
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.7, *)
    @discardableResult
    public func setContentHuggingPriority(_ priority: AppKit.NSLayoutConstraint.Priority, for orientation: AppKit.NSLayoutConstraint.Orientation) -> Self {
        self.value.setContentHuggingPriority(priority, for: orientation)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.7, *)
    @discardableResult
    public func setContentCompressionResistancePriority(_ priority: AppKit.NSLayoutConstraint.Priority, for orientation: AppKit.NSLayoutConstraint.Orientation) -> Self {
        self.value.setContentCompressionResistancePriority(priority, for: orientation)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.7, *)
    @discardableResult
    public func updateConstraintsForSubtreeIfNeeded() -> Self {
        self.value.updateConstraintsForSubtreeIfNeeded()
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.7, *)
    @discardableResult
    public func updateConstraints() -> Self {
        self.value.updateConstraints()
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.7, *)
    @discardableResult
    public func addConstraint(_ constraint: AppKit.NSLayoutConstraint) -> Self {
        self.value.addConstraint(constraint)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.7, *)
    @discardableResult
    public func addConstraints(_ constraints: [AppKit.NSLayoutConstraint]) -> Self {
        self.value.addConstraints(constraints)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.7, *)
    @discardableResult
    public func removeConstraint(_ constraint: AppKit.NSLayoutConstraint) -> Self {
        self.value.removeConstraint(constraint)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.7, *)
    @discardableResult
    public func removeConstraints(_ constraints: [AppKit.NSLayoutConstraint]) -> Self {
        self.value.removeConstraints(constraints)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func reflectScrolledClipView(_ clipView: AppKit.NSClipView) -> Self {
        self.value.reflectScrolledClipView(clipView)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func scroll(_ clipView: AppKit.NSClipView, to point: Foundation.NSPoint) -> Self {
        self.value.scroll(clipView, to: point)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    @available(macOS, introduced: 10.0, deprecated: 10.10)
    public func allocateGState() -> Self {
        self.value.allocateGState()
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    @available(macOS, introduced: 10.0, deprecated: 10.10)
    public func releaseGState() -> Self {
        self.value.releaseGState()
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    @available(macOS, introduced: 10.0, deprecated: 10.10)
    public func setUpGState() -> Self {
        self.value.setUpGState()
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    @available(macOS, introduced: 10.0, deprecated: 10.10)
    public func renewGState() -> Self {
        self.value.renewGState()
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.5, *)
    @discardableResult
    public func addTrackingArea(_ trackingArea: AppKit.NSTrackingArea) -> Self {
        self.value.addTrackingArea(trackingArea)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.5, *)
    @discardableResult
    public func removeTrackingArea(_ trackingArea: AppKit.NSTrackingArea) -> Self {
        self.value.removeTrackingArea(trackingArea)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.5, *)
    @discardableResult
    public func updateTrackingAreas() -> Self {
        self.value.updateTrackingAreas()
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func addCursorRect(_ rect: Foundation.NSRect, cursor object: AppKit.NSCursor) -> Self {
        self.value.addCursorRect(rect, cursor: object)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func removeCursorRect(_ rect: Foundation.NSRect, cursor object: AppKit.NSCursor) -> Self {
        self.value.removeCursorRect(rect, cursor: object)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func discardCursorRects() -> Self {
        self.value.discardCursorRects()
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func resetCursorRects() -> Self {
        self.value.resetCursorRects()
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func removeTrackingRect(_ tag: AppKit.NSView.TrackingRectTag) -> Self {
        self.value.removeTrackingRect(tag)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func addGestureRecognizer(_ gestureRecognizer: AppKit.NSGestureRecognizer) -> Self {
        self.value.addGestureRecognizer(gestureRecognizer)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func removeGestureRecognizer(_ gestureRecognizer: AppKit.NSGestureRecognizer) -> Self {
        self.value.removeGestureRecognizer(gestureRecognizer)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.6, *)
    @discardableResult
    public func showDefinition(for attrString: Foundation.NSAttributedString?, at textBaselineOrigin: Foundation.NSPoint) -> Self {
        self.value.showDefinition(for: attrString, at: textBaselineOrigin)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.6, *)
    @discardableResult
    public func showDefinition(for attrString: Foundation.NSAttributedString?, range targetRange: Foundation.NSRange, options: [AppKit.NSView.DefinitionOptionKey : Any]? = nil, baselineOriginProvider originProvider: ((Foundation.NSRange) -> Foundation.NSPoint)? = nil) -> Self {
        self.value.showDefinition(for: attrString, range: targetRange, options: options, baselineOriginProvider: originProvider)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.5, *)
    @discardableResult
    public func exitFullScreenMode(options: [AppKit.NSView.FullScreenModeOptionKey : Any]? = nil) -> Self {
        self.value.exitFullScreenMode(options: options)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func registerForDraggedTypes(_ newTypes: [AppKit.NSPasteboard.PasteboardType]) -> Self {
        self.value.registerForDraggedTypes(newTypes)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func unregisterDraggedTypes() -> Self {
        self.value.unregisterDraggedTypes()
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func writeEPS(inside rect: Foundation.NSRect, to pasteboard: AppKit.NSPasteboard) -> Self {
        self.value.writeEPS(inside: rect, to: pasteboard)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func writePDF(inside rect: Foundation.NSRect, to pasteboard: AppKit.NSPasteboard) -> Self {
        self.value.writePDF(inside: rect, to: pasteboard)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func printView(_ sender: Any?) -> Self {
        self.value.printView(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func adjustPageWidthNew(_ newRight: Swift.UnsafeMutablePointer<CoreFoundation.CGFloat>, left oldLeft: CoreFoundation.CGFloat, right oldRight: CoreFoundation.CGFloat, limit rightLimit: CoreFoundation.CGFloat) -> Self {
        self.value.adjustPageWidthNew(newRight, left: oldLeft, right: oldRight, limit: rightLimit)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func adjustPageHeightNew(_ newBottom: Swift.UnsafeMutablePointer<CoreFoundation.CGFloat>, top oldTop: CoreFoundation.CGFloat, bottom oldBottom: CoreFoundation.CGFloat, limit bottomLimit: CoreFoundation.CGFloat) -> Self {
        self.value.adjustPageHeightNew(newBottom, top: oldTop, bottom: oldBottom, limit: bottomLimit)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func drawPageBorder(with borderSize: Foundation.NSSize) -> Self {
        self.value.drawPageBorder(with: borderSize)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    @available(macOS, introduced: 10.0, deprecated: 10.14, message: "This is never invoked and the NSView implementation does nothing")
    public func drawSheetBorder(with borderSize: Foundation.NSSize) -> Self {
        self.value.drawSheetBorder(with: borderSize)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func beginDocument() -> Self {
        self.value.beginDocument()
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func endDocument() -> Self {
        self.value.endDocument()
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func beginPage(in rect: Foundation.NSRect, atPlacement location: Foundation.NSPoint) -> Self {
        self.value.beginPage(in: rect, atPlacement: location)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func endPage() -> Self {
        self.value.endPage()
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func setKeyboardFocusRingNeedsDisplay(_ rect: Foundation.NSRect) -> Self {
        self.value.setKeyboardFocusRingNeedsDisplay(rect)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.7, *)
    @discardableResult
    public func drawFocusRingMask() -> Self {
        self.value.drawFocusRingMask()
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.7, *)
    @discardableResult
    public func noteFocusRingMaskChanged() -> Self {
        self.value.noteFocusRingMaskChanged()
        return Modify.DynamicMemberWrap(self.value)
    }
}

#endif
