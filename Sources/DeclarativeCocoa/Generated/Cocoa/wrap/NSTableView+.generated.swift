
// Generated file
// DO NOT EDIT THIS FILE

#if canImport(Cocoa)
import Cocoa

extension Modify.DynamicMemberWrap where T: NSTableView {
    @discardableResult
    public func noteHeightOfRows(withIndexesChanged indexSet: IndexSet) -> Self {
        self.value.noteHeightOfRows(withIndexesChanged: indexSet)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func addTableColumn(_ tableColumn: NSTableColumn) -> Self {
        self.value.addTableColumn(tableColumn)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func removeTableColumn(_ tableColumn: NSTableColumn) -> Self {
        self.value.removeTableColumn(tableColumn)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func moveColumn(_ oldIndex: Int, toColumn newIndex: Int) -> Self {
        self.value.moveColumn(oldIndex, toColumn: newIndex)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func tile() -> Self {
        self.value.tile()
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func sizeToFit() -> Self {
        self.value.sizeToFit()
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func sizeLastColumnToFit() -> Self {
        self.value.sizeLastColumnToFit()
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func scrollRowToVisible(_ row: Int) -> Self {
        self.value.scrollRowToVisible(row)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func scrollColumnToVisible(_ column: Int) -> Self {
        self.value.scrollColumnToVisible(column)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func reloadData() -> Self {
        self.value.reloadData()
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func noteNumberOfRowsChanged() -> Self {
        self.value.noteNumberOfRowsChanged()
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.6, *)
    @discardableResult
    public func reloadData(forRowIndexes rowIndexes: IndexSet, columnIndexes: IndexSet) -> Self {
        self.value.reloadData(forRowIndexes: rowIndexes, columnIndexes: columnIndexes)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func setIndicatorImage(_ image: NSImage?, in tableColumn: NSTableColumn) -> Self {
        self.value.setIndicatorImage(image, in: tableColumn)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func setDraggingSourceOperationMask(_ mask: NSDragOperation, forLocal isLocal: Bool) -> Self {
        self.value.setDraggingSourceOperationMask(mask, forLocal: isLocal)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func setDropRow(_ row: Int, dropOperation: NSTableView.DropOperation) -> Self {
        self.value.setDropRow(row, dropOperation: dropOperation)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func selectAll(_ sender: Any?) -> Self {
        self.value.selectAll(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func deselectAll(_ sender: Any?) -> Self {
        self.value.deselectAll(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func selectColumnIndexes(_ indexes: IndexSet, byExtendingSelection extend: Bool) -> Self {
        self.value.selectColumnIndexes(indexes, byExtendingSelection: extend)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func selectRowIndexes(_ indexes: IndexSet, byExtendingSelection extend: Bool) -> Self {
        self.value.selectRowIndexes(indexes, byExtendingSelection: extend)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func deselectColumn(_ column: Int) -> Self {
        self.value.deselectColumn(column)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func deselectRow(_ row: Int) -> Self {
        self.value.deselectRow(row)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func editColumn(_ column: Int, row: Int, with event: NSEvent?, select: Bool) -> Self {
        self.value.editColumn(column, row: row, with: event, select: select)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func drawRow(_ row: Int, clipRect: NSRect) -> Self {
        self.value.drawRow(row, clipRect: clipRect)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func highlightSelection(inClipRect clipRect: NSRect) -> Self {
        self.value.highlightSelection(inClipRect: clipRect)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func drawGrid(inClipRect clipRect: NSRect) -> Self {
        self.value.drawGrid(inClipRect: clipRect)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func drawBackground(inClipRect clipRect: NSRect) -> Self {
        self.value.drawBackground(inClipRect: clipRect)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.7, *)
    @discardableResult
    public func enumerateAvailableRowViews(_ handler: (NSTableRowView, Int) -> Void) -> Self {
        self.value.enumerateAvailableRowViews(handler)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.7, *)
    @discardableResult
    public func beginUpdates() -> Self {
        self.value.beginUpdates()
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.7, *)
    @discardableResult
    public func endUpdates() -> Self {
        self.value.endUpdates()
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.7, *)
    @discardableResult
    public func insertRows(at indexes: IndexSet, withAnimation animationOptions: NSTableView.AnimationOptions = []) -> Self {
        self.value.insertRows(at: indexes, withAnimation: animationOptions)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.7, *)
    @discardableResult
    public func removeRows(at indexes: IndexSet, withAnimation animationOptions: NSTableView.AnimationOptions = []) -> Self {
        self.value.removeRows(at: indexes, withAnimation: animationOptions)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.7, *)
    @discardableResult
    public func moveRow(at oldIndex: Int, to newIndex: Int) -> Self {
        self.value.moveRow(at: oldIndex, to: newIndex)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.11, *)
    @discardableResult
    public func hideRows(at indexes: IndexSet, withAnimation rowAnimation: NSTableView.AnimationOptions = []) -> Self {
        self.value.hideRows(at: indexes, withAnimation: rowAnimation)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.11, *)
    @discardableResult
    public func unhideRows(at indexes: IndexSet, withAnimation rowAnimation: NSTableView.AnimationOptions = []) -> Self {
        self.value.unhideRows(at: indexes, withAnimation: rowAnimation)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.8, *)
    @discardableResult
    public func register(_ nib: NSNib?, forIdentifier identifier: NSUserInterfaceItemIdentifier) -> Self {
        self.value.register(nib, forIdentifier: identifier)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.7, *)
    @discardableResult
    public func didAdd(_ rowView: NSTableRowView, forRow row: Int) -> Self {
        self.value.didAdd(rowView, forRow: row)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.7, *)
    @discardableResult
    public func didRemove(_ rowView: NSTableRowView, forRow row: Int) -> Self {
        self.value.didRemove(rowView, forRow: row)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS, introduced: 10.6, deprecated: 10.10, message: "Use a View Based TableView; make a particular view the first responder with [window makeFirstResponder:view] to focus it.")
    @discardableResult
    public func setFocusedColumn(_ focusedColumn: Int) -> Self {
        self.value.setFocusedColumn(focusedColumn)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS, introduced: 10.6, deprecated: 10.10, message: "Use a View Based TableView; directly interact with a particular view as required and call -performClick: on it, if necessary")
    @discardableResult
    public func performClickOnCell(atColumn column: Int, row: Int) -> Self {
        self.value.performClickOnCell(atColumn: column, row: row)
        return Modify.DynamicMemberWrap(self.value)
    }
}

#endif
