
// Generated file
// DO NOT EDIT THIS FILE

#if canImport(Cocoa)
import Cocoa

extension Modify.DynamicMemberWrap where T: NSItemProvider {
    @available(macOS 10.13, *)
    @discardableResult
    public func registerDataRepresentation(forTypeIdentifier typeIdentifier: Swift.String, visibility: Foundation.NSItemProviderRepresentationVisibility, loadHandler: @escaping @Sendable (@escaping (Foundation.Data?, Swift.Error?) -> Swift.Void) -> Foundation.Progress?) -> Self {
        self.value.registerDataRepresentation(forTypeIdentifier: typeIdentifier, visibility: visibility, loadHandler: loadHandler)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.13, *)
    @discardableResult
    public func registerFileRepresentation(forTypeIdentifier typeIdentifier: Swift.String, fileOptions: Foundation.NSItemProviderFileOptions = [], visibility: Foundation.NSItemProviderRepresentationVisibility, loadHandler: @escaping @Sendable (@escaping (Foundation.URL?, Swift.Bool, Swift.Error?) -> Swift.Void) -> Foundation.Progress?) -> Self {
        self.value.registerFileRepresentation(forTypeIdentifier: typeIdentifier, fileOptions: fileOptions, visibility: visibility, loadHandler: loadHandler)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.13, *)
    @discardableResult
    public func registerObject(_ object: Foundation.NSItemProviderWriting, visibility: Foundation.NSItemProviderRepresentationVisibility) -> Self {
        self.value.registerObject(object, visibility: visibility)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.13, *)
    @discardableResult
    public func registerObject(ofClass aClass: Foundation.NSItemProviderWriting.Type, visibility: Foundation.NSItemProviderRepresentationVisibility, loadHandler: @escaping @Sendable (@escaping (Foundation.NSItemProviderWriting?, Swift.Error?) -> Swift.Void) -> Foundation.Progress?) -> Self {
        self.value.registerObject(ofClass: aClass, visibility: visibility, loadHandler: loadHandler)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func loadPreviewImage(options: [Swift.AnyHashable : Any]! = [:], completionHandler: Foundation.NSItemProvider.CompletionHandler!) -> Self {
        self.value.loadPreviewImage(options: options, completionHandler: completionHandler)
        return Modify.DynamicMemberWrap(self.value)
    }
}

#endif
