
// Generated file
// DO NOT EDIT THIS FILE

#if canImport(Cocoa)
import Cocoa

extension Modify.DynamicMemberWrap where T: NSBitmapImageRep {
    @discardableResult
    public func getBitmapDataPlanes(_ data: Swift.UnsafeMutablePointer<Swift.UnsafeMutablePointer<Swift.UInt8>?>) -> Self {
        self.value.getBitmapDataPlanes(data)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func getCompression(_ compression: Swift.UnsafeMutablePointer<AppKit.NSBitmapImageRep.TIFFCompression>?, factor: Swift.UnsafeMutablePointer<Swift.Float>?) -> Self {
        self.value.getCompression(compression, factor: factor)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func setCompression(_ compression: AppKit.NSBitmapImageRep.TIFFCompression, factor: Swift.Float) -> Self {
        self.value.setCompression(compression, factor: factor)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func colorize(byMappingGray midPoint: CoreFoundation.CGFloat, to midPointColor: AppKit.NSColor?, blackMapping shadowColor: AppKit.NSColor?, whiteMapping lightColor: AppKit.NSColor?) -> Self {
        self.value.colorize(byMappingGray: midPoint, to: midPointColor, blackMapping: shadowColor, whiteMapping: lightColor)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func setColor(_ color: AppKit.NSColor, atX x: Swift.Int, y: Swift.Int) -> Self {
        self.value.setColor(color, atX: x, y: y)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func getPixel(_ p: Swift.UnsafeMutablePointer<Swift.Int>, atX x: Swift.Int, y: Swift.Int) -> Self {
        self.value.getPixel(p, atX: x, y: y)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func setPixel(_ p: Swift.UnsafeMutablePointer<Swift.Int>, atX x: Swift.Int, y: Swift.Int) -> Self {
        self.value.setPixel(p, atX: x, y: y)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func setProperty(_ property: AppKit.NSBitmapImageRep.PropertyKey, withValue value: Any?) -> Self {
        self.value.setProperty(property, withValue: value)
        return Modify.DynamicMemberWrap(self.value)
    }
}

#endif
