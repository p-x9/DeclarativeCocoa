
// Generated file
// DO NOT EDIT THIS FILE

#if canImport(Cocoa)
import Cocoa

extension Modify.DynamicMemberWrap where T: NSText {
    @discardableResult
    public func replaceCharacters(in range: Foundation.NSRange, with string: Swift.String) -> Self {
        self.value.replaceCharacters(in: range, with: string)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func replaceCharacters(in range: Foundation.NSRange, withRTF rtfData: Foundation.Data) -> Self {
        self.value.replaceCharacters(in: range, withRTF: rtfData)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func replaceCharacters(in range: Foundation.NSRange, withRTFD rtfdData: Foundation.Data) -> Self {
        self.value.replaceCharacters(in: range, withRTFD: rtfdData)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func scrollRangeToVisible(_ range: Foundation.NSRange) -> Self {
        self.value.scrollRangeToVisible(range)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func setTextColor(_ color: AppKit.NSColor?, range: Foundation.NSRange) -> Self {
        self.value.setTextColor(color, range: range)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func setFont(_ font: AppKit.NSFont, range: Foundation.NSRange) -> Self {
        self.value.setFont(font, range: range)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func sizeToFit() -> Self {
        self.value.sizeToFit()
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func copy(_ sender: Any?) -> Self {
        self.value.copy(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func copyFont(_ sender: Any?) -> Self {
        self.value.copyFont(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func copyRuler(_ sender: Any?) -> Self {
        self.value.copyRuler(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func cut(_ sender: Any?) -> Self {
        self.value.cut(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func delete(_ sender: Any?) -> Self {
        self.value.delete(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func paste(_ sender: Any?) -> Self {
        self.value.paste(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func pasteFont(_ sender: Any?) -> Self {
        self.value.pasteFont(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func pasteRuler(_ sender: Any?) -> Self {
        self.value.pasteRuler(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func changeFont(_ sender: Any?) -> Self {
        self.value.changeFont(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func alignLeft(_ sender: Any?) -> Self {
        self.value.alignLeft(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func alignRight(_ sender: Any?) -> Self {
        self.value.alignRight(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func alignCenter(_ sender: Any?) -> Self {
        self.value.alignCenter(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func `subscript`(_ sender: Any?) -> Self {
        self.value.`subscript`(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func superscript(_ sender: Any?) -> Self {
        self.value.superscript(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func underline(_ sender: Any?) -> Self {
        self.value.underline(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func unscript(_ sender: Any?) -> Self {
        self.value.unscript(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func showGuessPanel(_ sender: Any?) -> Self {
        self.value.showGuessPanel(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func checkSpelling(_ sender: Any?) -> Self {
        self.value.checkSpelling(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func toggleRuler(_ sender: Any?) -> Self {
        self.value.toggleRuler(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func changeSpelling(_ sender: Any?) -> Self {
        self.value.changeSpelling(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func ignoreSpelling(_ sender: Any?) -> Self {
        self.value.ignoreSpelling(sender)
        return Modify.DynamicMemberWrap(self.value)
    }
}

#endif
