
// Generated file
// DO NOT EDIT THIS FILE

#if canImport(Cocoa)
import Cocoa

extension Modify.DynamicMemberWrap where T: NSGestureRecognizer {
    @available(macOS 10.10, *)
    @discardableResult
    public func encode(with coder: Foundation.NSCoder) -> Self {
        self.value.encode(with: coder)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func reset() -> Self {
        self.value.reset()
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func mouseDown(with event: AppKit.NSEvent) -> Self {
        self.value.mouseDown(with: event)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func rightMouseDown(with event: AppKit.NSEvent) -> Self {
        self.value.rightMouseDown(with: event)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func otherMouseDown(with event: AppKit.NSEvent) -> Self {
        self.value.otherMouseDown(with: event)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func mouseUp(with event: AppKit.NSEvent) -> Self {
        self.value.mouseUp(with: event)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func rightMouseUp(with event: AppKit.NSEvent) -> Self {
        self.value.rightMouseUp(with: event)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func otherMouseUp(with event: AppKit.NSEvent) -> Self {
        self.value.otherMouseUp(with: event)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func mouseDragged(with event: AppKit.NSEvent) -> Self {
        self.value.mouseDragged(with: event)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func rightMouseDragged(with event: AppKit.NSEvent) -> Self {
        self.value.rightMouseDragged(with: event)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func otherMouseDragged(with event: AppKit.NSEvent) -> Self {
        self.value.otherMouseDragged(with: event)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func keyDown(with event: AppKit.NSEvent) -> Self {
        self.value.keyDown(with: event)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func keyUp(with event: AppKit.NSEvent) -> Self {
        self.value.keyUp(with: event)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func flagsChanged(with event: AppKit.NSEvent) -> Self {
        self.value.flagsChanged(with: event)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func tabletPoint(with event: AppKit.NSEvent) -> Self {
        self.value.tabletPoint(with: event)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func magnify(with event: AppKit.NSEvent) -> Self {
        self.value.magnify(with: event)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func rotate(with event: AppKit.NSEvent) -> Self {
        self.value.rotate(with: event)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10.3, *)
    @discardableResult
    public func pressureChange(with event: AppKit.NSEvent) -> Self {
        self.value.pressureChange(with: event)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.12.2, *)
    @discardableResult
    public func touchesBegan(with event: AppKit.NSEvent) -> Self {
        self.value.touchesBegan(with: event)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.12.2, *)
    @discardableResult
    public func touchesMoved(with event: AppKit.NSEvent) -> Self {
        self.value.touchesMoved(with: event)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.12.2, *)
    @discardableResult
    public func touchesEnded(with event: AppKit.NSEvent) -> Self {
        self.value.touchesEnded(with: event)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.12.2, *)
    @discardableResult
    public func touchesCancelled(with event: AppKit.NSEvent) -> Self {
        self.value.touchesCancelled(with: event)
        return Modify.DynamicMemberWrap(self.value)
    }
}

#endif
