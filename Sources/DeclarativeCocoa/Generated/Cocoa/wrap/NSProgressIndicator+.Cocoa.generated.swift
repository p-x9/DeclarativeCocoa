
// Generated file
// DO NOT EDIT THIS FILE

#if canImport(Cocoa)
import Cocoa

extension Modify.DynamicMemberWrap where T: NSProgressIndicator {
    @discardableResult
    public func increment(by delta: Swift.Double) -> Self {
        self.value.increment(by: delta)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func startAnimation(_ sender: Any?) -> Self {
        self.value.startAnimation(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func stopAnimation(_ sender: Any?) -> Self {
        self.value.stopAnimation(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func sizeToFit() -> Self {
        self.value.sizeToFit()
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    @available(macOS, unavailable, introduced: 10.0, deprecated: 10.6, message: "The animationDelay property does nothing.")
    public func setAnimationDelay(_ delay: Foundation.TimeInterval) -> Self {
        self.value.setAnimationDelay(delay)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    @available(macOS, unavailable, introduced: 10.0, deprecated: 10.6, message: "Use -startAnimation and -stopAnimation instead.")
    public func animate(_ sender: Any?) -> Self {
        self.value.animate(sender)
        return Modify.DynamicMemberWrap(self.value)
    }
}

#endif
