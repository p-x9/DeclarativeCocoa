
// Generated file
// DO NOT EDIT THIS FILE

#if canImport(Cocoa)
import Cocoa

extension Modify.DynamicMemberWrap where T: NSAttributedString {
    @available(macOS 10.0, *)
    @discardableResult
    public func encode(with coder: Foundation.NSCoder) -> Self {
        self.value.encode(with: coder)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func draw(with rect: Foundation.NSRect, options: Foundation.NSString.DrawingOptions = []) -> Self {
        self.value.draw(with: rect, options: options)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.11, *)
    @discardableResult
    public func draw(with rect: Foundation.NSRect, options: Foundation.NSString.DrawingOptions = [], context: AppKit.NSStringDrawingContext?) -> Self {
        self.value.draw(with: rect, options: options, context: context)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.0, *)
    @discardableResult
    public func draw(at point: Foundation.NSPoint) -> Self {
        self.value.draw(at: point)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.0, *)
    @discardableResult
    public func draw(in rect: Foundation.NSRect) -> Self {
        self.value.draw(in: rect)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.6, *)
    @discardableResult
    public func enumerateAttributes(in enumerationRange: Foundation.NSRange, options opts: Foundation.NSAttributedString.EnumerationOptions = [], using block: ([Foundation.NSAttributedString.Key : Any], Foundation.NSRange, Swift.UnsafeMutablePointer<ObjectiveC.ObjCBool>) -> Swift.Void) -> Self {
        self.value.enumerateAttributes(in: enumerationRange, options: opts, using: block)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.6, *)
    @discardableResult
    public func enumerateAttribute(_ attrName: Foundation.NSAttributedString.Key, in enumerationRange: Foundation.NSRange, options opts: Foundation.NSAttributedString.EnumerationOptions = [], using block: (Any?, Foundation.NSRange, Swift.UnsafeMutablePointer<ObjectiveC.ObjCBool>) -> Swift.Void) -> Self {
        self.value.enumerateAttribute(attrName, in: enumerationRange, options: opts, using: block)
        return Modify.DynamicMemberWrap(self.value)
    }
}

#endif
