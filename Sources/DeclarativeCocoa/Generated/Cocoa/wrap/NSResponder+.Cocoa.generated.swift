
// Generated file
// DO NOT EDIT THIS FILE

#if canImport(Cocoa)
import Cocoa

extension Modify.DynamicMemberWrap where T: NSResponder {
    @discardableResult
    public func mouseDown(with event: AppKit.NSEvent) -> Self {
        self.value.mouseDown(with: event)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func rightMouseDown(with event: AppKit.NSEvent) -> Self {
        self.value.rightMouseDown(with: event)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func otherMouseDown(with event: AppKit.NSEvent) -> Self {
        self.value.otherMouseDown(with: event)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func mouseUp(with event: AppKit.NSEvent) -> Self {
        self.value.mouseUp(with: event)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func rightMouseUp(with event: AppKit.NSEvent) -> Self {
        self.value.rightMouseUp(with: event)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func otherMouseUp(with event: AppKit.NSEvent) -> Self {
        self.value.otherMouseUp(with: event)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func mouseMoved(with event: AppKit.NSEvent) -> Self {
        self.value.mouseMoved(with: event)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func mouseDragged(with event: AppKit.NSEvent) -> Self {
        self.value.mouseDragged(with: event)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func scrollWheel(with event: AppKit.NSEvent) -> Self {
        self.value.scrollWheel(with: event)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func rightMouseDragged(with event: AppKit.NSEvent) -> Self {
        self.value.rightMouseDragged(with: event)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func otherMouseDragged(with event: AppKit.NSEvent) -> Self {
        self.value.otherMouseDragged(with: event)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func mouseEntered(with event: AppKit.NSEvent) -> Self {
        self.value.mouseEntered(with: event)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func mouseExited(with event: AppKit.NSEvent) -> Self {
        self.value.mouseExited(with: event)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func keyDown(with event: AppKit.NSEvent) -> Self {
        self.value.keyDown(with: event)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func keyUp(with event: AppKit.NSEvent) -> Self {
        self.value.keyUp(with: event)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func flagsChanged(with event: AppKit.NSEvent) -> Self {
        self.value.flagsChanged(with: event)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func tabletPoint(with event: AppKit.NSEvent) -> Self {
        self.value.tabletPoint(with: event)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func tabletProximity(with event: AppKit.NSEvent) -> Self {
        self.value.tabletProximity(with: event)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.5, *)
    @discardableResult
    public func cursorUpdate(with event: AppKit.NSEvent) -> Self {
        self.value.cursorUpdate(with: event)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.5, *)
    @discardableResult
    public func magnify(with event: AppKit.NSEvent) -> Self {
        self.value.magnify(with: event)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.5, *)
    @discardableResult
    public func rotate(with event: AppKit.NSEvent) -> Self {
        self.value.rotate(with: event)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.5, *)
    @discardableResult
    public func swipe(with event: AppKit.NSEvent) -> Self {
        self.value.swipe(with: event)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.5, *)
    @discardableResult
    public func beginGesture(with event: AppKit.NSEvent) -> Self {
        self.value.beginGesture(with: event)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.5, *)
    @discardableResult
    public func endGesture(with event: AppKit.NSEvent) -> Self {
        self.value.endGesture(with: event)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.8, *)
    @discardableResult
    public func smartMagnify(with event: AppKit.NSEvent) -> Self {
        self.value.smartMagnify(with: event)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.15, *)
    @discardableResult
    public func changeMode(with event: AppKit.NSEvent) -> Self {
        self.value.changeMode(with: event)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.6, *)
    @discardableResult
    public func touchesBegan(with event: AppKit.NSEvent) -> Self {
        self.value.touchesBegan(with: event)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.6, *)
    @discardableResult
    public func touchesMoved(with event: AppKit.NSEvent) -> Self {
        self.value.touchesMoved(with: event)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.6, *)
    @discardableResult
    public func touchesEnded(with event: AppKit.NSEvent) -> Self {
        self.value.touchesEnded(with: event)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.6, *)
    @discardableResult
    public func touchesCancelled(with event: AppKit.NSEvent) -> Self {
        self.value.touchesCancelled(with: event)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.8, *)
    @discardableResult
    public func quickLook(with event: AppKit.NSEvent) -> Self {
        self.value.quickLook(with: event)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10.3, *)
    @discardableResult
    public func pressureChange(with event: AppKit.NSEvent) -> Self {
        self.value.pressureChange(with: event)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func noResponder(for eventSelector: ObjectiveC.Selector) -> Self {
        self.value.noResponder(for: eventSelector)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func interpretKeyEvents(_ eventArray: [AppKit.NSEvent]) -> Self {
        self.value.interpretKeyEvents(eventArray)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func flushBufferedKeyEvents() -> Self {
        self.value.flushBufferedKeyEvents()
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func showContextHelp(_ sender: Any?) -> Self {
        self.value.showContextHelp(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func helpRequested(_ eventPtr: AppKit.NSEvent) -> Self {
        self.value.helpRequested(eventPtr)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func encode(with coder: Foundation.NSCoder) -> Self {
        self.value.encode(with: coder)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.7, *)
    @discardableResult
    public func encodeRestorableState(with coder: Foundation.NSCoder) -> Self {
        self.value.encodeRestorableState(with: coder)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.13, *)
    @discardableResult
    public func encodeRestorableState(with coder: Foundation.NSCoder, backgroundQueue queue: Foundation.OperationQueue) -> Self {
        self.value.encodeRestorableState(with: coder, backgroundQueue: queue)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.7, *)
    @discardableResult
    public func restoreState(with coder: Foundation.NSCoder) -> Self {
        self.value.restoreState(with: coder)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.7, *)
    @discardableResult
    public func invalidateRestorableState() -> Self {
        self.value.invalidateRestorableState()
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    @available(macOS, unavailable, introduced: 10.0, deprecated: 10.8, message: "APIs deprecated as of macOS 10.9 and earlier are unavailable in Swift")
    public func setInterfaceStyle(_ interfaceStyle: Swift.Int) -> Self {
        self.value.setInterfaceStyle(interfaceStyle)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func updateUserActivityState(_ userActivity: Foundation.NSUserActivity) -> Self {
        self.value.updateUserActivityState(userActivity)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_Concurrency.MainActor public func restoreUserActivityState(_ userActivity: Foundation.NSUserActivity) -> Self {
        self.value.restoreUserActivityState(userActivity)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.7, *)
    @discardableResult
    public func performTextFinderAction(_ sender: Any?) -> Self {
        self.value.performTextFinderAction(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func presentError(_ error: Swift.Error, modalFor window: AppKit.NSWindow, delegate: Any?, didPresent didPresentSelector: ObjectiveC.Selector?, contextInfo: Swift.UnsafeMutableRawPointer?) -> Self {
        self.value.presentError(error, modalFor: window, delegate: delegate, didPresent: didPresentSelector, contextInfo: contextInfo)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func insertText(_ insertString: Any) -> Self {
        self.value.insertText(insertString)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func doCommand(by selector: ObjectiveC.Selector) -> Self {
        self.value.doCommand(by: selector)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func moveForward(_ sender: Any?) -> Self {
        self.value.moveForward(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func moveRight(_ sender: Any?) -> Self {
        self.value.moveRight(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func moveBackward(_ sender: Any?) -> Self {
        self.value.moveBackward(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func moveLeft(_ sender: Any?) -> Self {
        self.value.moveLeft(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func moveUp(_ sender: Any?) -> Self {
        self.value.moveUp(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func moveDown(_ sender: Any?) -> Self {
        self.value.moveDown(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func moveWordForward(_ sender: Any?) -> Self {
        self.value.moveWordForward(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func moveWordBackward(_ sender: Any?) -> Self {
        self.value.moveWordBackward(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func moveToBeginningOfLine(_ sender: Any?) -> Self {
        self.value.moveToBeginningOfLine(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func moveToEndOfLine(_ sender: Any?) -> Self {
        self.value.moveToEndOfLine(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func moveToBeginningOfParagraph(_ sender: Any?) -> Self {
        self.value.moveToBeginningOfParagraph(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func moveToEndOfParagraph(_ sender: Any?) -> Self {
        self.value.moveToEndOfParagraph(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func moveToEndOfDocument(_ sender: Any?) -> Self {
        self.value.moveToEndOfDocument(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func moveToBeginningOfDocument(_ sender: Any?) -> Self {
        self.value.moveToBeginningOfDocument(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func pageDown(_ sender: Any?) -> Self {
        self.value.pageDown(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func pageUp(_ sender: Any?) -> Self {
        self.value.pageUp(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func centerSelectionInVisibleArea(_ sender: Any?) -> Self {
        self.value.centerSelectionInVisibleArea(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func moveBackwardAndModifySelection(_ sender: Any?) -> Self {
        self.value.moveBackwardAndModifySelection(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func moveForwardAndModifySelection(_ sender: Any?) -> Self {
        self.value.moveForwardAndModifySelection(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func moveWordForwardAndModifySelection(_ sender: Any?) -> Self {
        self.value.moveWordForwardAndModifySelection(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func moveWordBackwardAndModifySelection(_ sender: Any?) -> Self {
        self.value.moveWordBackwardAndModifySelection(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func moveUpAndModifySelection(_ sender: Any?) -> Self {
        self.value.moveUpAndModifySelection(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func moveDownAndModifySelection(_ sender: Any?) -> Self {
        self.value.moveDownAndModifySelection(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func moveToBeginningOfLineAndModifySelection(_ sender: Any?) -> Self {
        self.value.moveToBeginningOfLineAndModifySelection(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func moveToEndOfLineAndModifySelection(_ sender: Any?) -> Self {
        self.value.moveToEndOfLineAndModifySelection(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func moveToBeginningOfParagraphAndModifySelection(_ sender: Any?) -> Self {
        self.value.moveToBeginningOfParagraphAndModifySelection(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func moveToEndOfParagraphAndModifySelection(_ sender: Any?) -> Self {
        self.value.moveToEndOfParagraphAndModifySelection(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func moveToEndOfDocumentAndModifySelection(_ sender: Any?) -> Self {
        self.value.moveToEndOfDocumentAndModifySelection(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func moveToBeginningOfDocumentAndModifySelection(_ sender: Any?) -> Self {
        self.value.moveToBeginningOfDocumentAndModifySelection(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func pageDownAndModifySelection(_ sender: Any?) -> Self {
        self.value.pageDownAndModifySelection(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func pageUpAndModifySelection(_ sender: Any?) -> Self {
        self.value.pageUpAndModifySelection(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func moveParagraphForwardAndModifySelection(_ sender: Any?) -> Self {
        self.value.moveParagraphForwardAndModifySelection(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func moveParagraphBackwardAndModifySelection(_ sender: Any?) -> Self {
        self.value.moveParagraphBackwardAndModifySelection(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func moveWordRight(_ sender: Any?) -> Self {
        self.value.moveWordRight(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func moveWordLeft(_ sender: Any?) -> Self {
        self.value.moveWordLeft(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func moveRightAndModifySelection(_ sender: Any?) -> Self {
        self.value.moveRightAndModifySelection(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func moveLeftAndModifySelection(_ sender: Any?) -> Self {
        self.value.moveLeftAndModifySelection(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func moveWordRightAndModifySelection(_ sender: Any?) -> Self {
        self.value.moveWordRightAndModifySelection(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func moveWordLeftAndModifySelection(_ sender: Any?) -> Self {
        self.value.moveWordLeftAndModifySelection(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.6, *)
    @discardableResult
    public func moveToLeftEndOfLine(_ sender: Any?) -> Self {
        self.value.moveToLeftEndOfLine(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.6, *)
    @discardableResult
    public func moveToRightEndOfLine(_ sender: Any?) -> Self {
        self.value.moveToRightEndOfLine(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.6, *)
    @discardableResult
    public func moveToLeftEndOfLineAndModifySelection(_ sender: Any?) -> Self {
        self.value.moveToLeftEndOfLineAndModifySelection(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.6, *)
    @discardableResult
    public func moveToRightEndOfLineAndModifySelection(_ sender: Any?) -> Self {
        self.value.moveToRightEndOfLineAndModifySelection(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func scrollPageUp(_ sender: Any?) -> Self {
        self.value.scrollPageUp(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func scrollPageDown(_ sender: Any?) -> Self {
        self.value.scrollPageDown(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func scrollLineUp(_ sender: Any?) -> Self {
        self.value.scrollLineUp(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func scrollLineDown(_ sender: Any?) -> Self {
        self.value.scrollLineDown(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func scrollToBeginningOfDocument(_ sender: Any?) -> Self {
        self.value.scrollToBeginningOfDocument(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func scrollToEndOfDocument(_ sender: Any?) -> Self {
        self.value.scrollToEndOfDocument(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func transpose(_ sender: Any?) -> Self {
        self.value.transpose(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func transposeWords(_ sender: Any?) -> Self {
        self.value.transposeWords(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func selectAll(_ sender: Any?) -> Self {
        self.value.selectAll(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func selectParagraph(_ sender: Any?) -> Self {
        self.value.selectParagraph(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func selectLine(_ sender: Any?) -> Self {
        self.value.selectLine(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func selectWord(_ sender: Any?) -> Self {
        self.value.selectWord(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func indent(_ sender: Any?) -> Self {
        self.value.indent(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func insertTab(_ sender: Any?) -> Self {
        self.value.insertTab(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func insertBacktab(_ sender: Any?) -> Self {
        self.value.insertBacktab(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func insertNewline(_ sender: Any?) -> Self {
        self.value.insertNewline(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func insertParagraphSeparator(_ sender: Any?) -> Self {
        self.value.insertParagraphSeparator(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func insertNewlineIgnoringFieldEditor(_ sender: Any?) -> Self {
        self.value.insertNewlineIgnoringFieldEditor(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func insertTabIgnoringFieldEditor(_ sender: Any?) -> Self {
        self.value.insertTabIgnoringFieldEditor(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func insertLineBreak(_ sender: Any?) -> Self {
        self.value.insertLineBreak(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func insertContainerBreak(_ sender: Any?) -> Self {
        self.value.insertContainerBreak(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.5, *)
    @discardableResult
    public func insertSingleQuoteIgnoringSubstitution(_ sender: Any?) -> Self {
        self.value.insertSingleQuoteIgnoringSubstitution(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.5, *)
    @discardableResult
    public func insertDoubleQuoteIgnoringSubstitution(_ sender: Any?) -> Self {
        self.value.insertDoubleQuoteIgnoringSubstitution(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func changeCaseOfLetter(_ sender: Any?) -> Self {
        self.value.changeCaseOfLetter(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func uppercaseWord(_ sender: Any?) -> Self {
        self.value.uppercaseWord(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func lowercaseWord(_ sender: Any?) -> Self {
        self.value.lowercaseWord(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func capitalizeWord(_ sender: Any?) -> Self {
        self.value.capitalizeWord(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func deleteForward(_ sender: Any?) -> Self {
        self.value.deleteForward(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func deleteBackward(_ sender: Any?) -> Self {
        self.value.deleteBackward(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func deleteBackwardByDecomposingPreviousCharacter(_ sender: Any?) -> Self {
        self.value.deleteBackwardByDecomposingPreviousCharacter(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func deleteWordForward(_ sender: Any?) -> Self {
        self.value.deleteWordForward(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func deleteWordBackward(_ sender: Any?) -> Self {
        self.value.deleteWordBackward(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func deleteToBeginningOfLine(_ sender: Any?) -> Self {
        self.value.deleteToBeginningOfLine(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func deleteToEndOfLine(_ sender: Any?) -> Self {
        self.value.deleteToEndOfLine(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func deleteToBeginningOfParagraph(_ sender: Any?) -> Self {
        self.value.deleteToBeginningOfParagraph(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func deleteToEndOfParagraph(_ sender: Any?) -> Self {
        self.value.deleteToEndOfParagraph(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func yank(_ sender: Any?) -> Self {
        self.value.yank(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func complete(_ sender: Any?) -> Self {
        self.value.complete(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func setMark(_ sender: Any?) -> Self {
        self.value.setMark(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func deleteToMark(_ sender: Any?) -> Self {
        self.value.deleteToMark(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func selectToMark(_ sender: Any?) -> Self {
        self.value.selectToMark(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func swapWithMark(_ sender: Any?) -> Self {
        self.value.swapWithMark(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func cancelOperation(_ sender: Any?) -> Self {
        self.value.cancelOperation(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.6, *)
    @discardableResult
    public func makeBaseWritingDirectionNatural(_ sender: Any?) -> Self {
        self.value.makeBaseWritingDirectionNatural(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.6, *)
    @discardableResult
    public func makeBaseWritingDirectionLeftToRight(_ sender: Any?) -> Self {
        self.value.makeBaseWritingDirectionLeftToRight(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.6, *)
    @discardableResult
    public func makeBaseWritingDirectionRightToLeft(_ sender: Any?) -> Self {
        self.value.makeBaseWritingDirectionRightToLeft(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.6, *)
    @discardableResult
    public func makeTextWritingDirectionNatural(_ sender: Any?) -> Self {
        self.value.makeTextWritingDirectionNatural(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.6, *)
    @discardableResult
    public func makeTextWritingDirectionLeftToRight(_ sender: Any?) -> Self {
        self.value.makeTextWritingDirectionLeftToRight(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.6, *)
    @discardableResult
    public func makeTextWritingDirectionRightToLeft(_ sender: Any?) -> Self {
        self.value.makeTextWritingDirectionRightToLeft(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.8, *)
    @discardableResult
    public func quickLookPreviewItems(_ sender: Any?) -> Self {
        self.value.quickLookPreviewItems(sender)
        return Modify.DynamicMemberWrap(self.value)
    }
}

#endif
