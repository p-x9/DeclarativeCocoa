
// Generated file
// DO NOT EDIT THIS FILE

#if canImport(Cocoa)
import Cocoa

extension Modify.DynamicMemberWrap where T: NSGradient {
    @discardableResult
    public func draw(from startingPoint: Foundation.NSPoint, to endingPoint: Foundation.NSPoint, options: AppKit.NSGradient.DrawingOptions = []) -> Self {
        self.value.draw(from: startingPoint, to: endingPoint, options: options)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func draw(in rect: Foundation.NSRect, angle: CoreFoundation.CGFloat) -> Self {
        self.value.draw(in: rect, angle: angle)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func draw(in path: AppKit.NSBezierPath, angle: CoreFoundation.CGFloat) -> Self {
        self.value.draw(in: path, angle: angle)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func draw(fromCenter startCenter: Foundation.NSPoint, radius startRadius: CoreFoundation.CGFloat, toCenter endCenter: Foundation.NSPoint, radius endRadius: CoreFoundation.CGFloat, options: AppKit.NSGradient.DrawingOptions = []) -> Self {
        self.value.draw(fromCenter: startCenter, radius: startRadius, toCenter: endCenter, radius: endRadius, options: options)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func draw(in rect: Foundation.NSRect, relativeCenterPosition: Foundation.NSPoint) -> Self {
        self.value.draw(in: rect, relativeCenterPosition: relativeCenterPosition)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func draw(in path: AppKit.NSBezierPath, relativeCenterPosition: Foundation.NSPoint) -> Self {
        self.value.draw(in: path, relativeCenterPosition: relativeCenterPosition)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func getColor(_ color: Swift.AutoreleasingUnsafeMutablePointer<AppKit.NSColor>?, location: Swift.UnsafeMutablePointer<CoreFoundation.CGFloat>?, at index: Swift.Int) -> Self {
        self.value.getColor(color, location: location, at: index)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.5, *)
    @discardableResult
    public func encode(with coder: Foundation.NSCoder) -> Self {
        self.value.encode(with: coder)
        return Modify.DynamicMemberWrap(self.value)
    }
}

#endif
