
// Generated file
// DO NOT EDIT THIS FILE

#if canImport(Cocoa)
import Cocoa

extension Modify.DynamicMemberWrap where T: NSWindow {
    @available(macOS 10.10, *)
    @discardableResult
    public func addTitlebarAccessoryViewController(_ childViewController: NSTitlebarAccessoryViewController) -> Self {
        value.addTitlebarAccessoryViewController(childViewController)
        return self
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func insertTitlebarAccessoryViewController(_ childViewController: NSTitlebarAccessoryViewController, at index: Int) -> Self {
        value.insertTitlebarAccessoryViewController(childViewController, at: index)
        return self
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func removeTitlebarAccessoryViewController(at index: Int) -> Self {
        value.removeTitlebarAccessoryViewController(at: index)
        return self
    }

    @discardableResult
    public func setTitleWithRepresentedFilename(_ filename: String) -> Self {
        value.setTitleWithRepresentedFilename(filename)
        return self
    }

    @discardableResult
    public func endEditing(for object: Any?) -> Self {
        value.endEditing(for: object)
        return self
    }

    @discardableResult
    public func setFrame(_ frameRect: NSRect, display flag: Bool) -> Self {
        value.setFrame(frameRect, display: flag)
        return self
    }

    @discardableResult
    public func setContentSize(_ size: NSSize) -> Self {
        value.setContentSize(size)
        return self
    }

    @discardableResult
    public func setFrameOrigin(_ point: NSPoint) -> Self {
        value.setFrameOrigin(point)
        return self
    }

    @discardableResult
    public func setFrameTopLeftPoint(_ point: NSPoint) -> Self {
        value.setFrameTopLeftPoint(point)
        return self
    }

    @discardableResult
    public func setFrame(_ frameRect: NSRect, display displayFlag: Bool, animate animateFlag: Bool) -> Self {
        value.setFrame(frameRect, display: displayFlag, animate: animateFlag)
        return self
    }

    @discardableResult
    public func displayIfNeeded() -> Self {
        value.displayIfNeeded()
        return self
    }

    @discardableResult
    public func display() -> Self {
        value.display()
        return self
    }

    @discardableResult
    public func update() -> Self {
        value.update()
        return self
    }

    @discardableResult
    public func close() -> Self {
        value.close()
        return self
    }

    @discardableResult
    public func miniaturize(_ sender: Any?) -> Self {
        value.miniaturize(sender)
        return self
    }

    @discardableResult
    public func deminiaturize(_ sender: Any?) -> Self {
        value.deminiaturize(sender)
        return self
    }

    @discardableResult
    public func zoom(_ sender: Any?) -> Self {
        value.zoom(sender)
        return self
    }

    @available(macOS 10.5, *)
    @discardableResult
    public func setContentBorderThickness(_ thickness: CGFloat, for edge: NSRectEdge) -> Self {
        value.setContentBorderThickness(thickness, for: edge)
        return self
    }

    @available(macOS 10.5, *)
    @discardableResult
    public func setAutorecalculatesContentBorderThickness(_ flag: Bool, for edge: NSRectEdge) -> Self {
        value.setAutorecalculatesContentBorderThickness(flag, for: edge)
        return self
    }

    @discardableResult
    public func center() -> Self {
        value.center()
        return self
    }

    @discardableResult
    public func makeKeyAndOrderFront(_ sender: Any?) -> Self {
        value.makeKeyAndOrderFront(sender)
        return self
    }

    @discardableResult
    public func orderFront(_ sender: Any?) -> Self {
        value.orderFront(sender)
        return self
    }

    @discardableResult
    public func orderBack(_ sender: Any?) -> Self {
        value.orderBack(sender)
        return self
    }

    @discardableResult
    public func orderOut(_ sender: Any?) -> Self {
        value.orderOut(sender)
        return self
    }

    @discardableResult
    public func order(_ place: NSWindow.OrderingMode, relativeTo otherWin: Int) -> Self {
        value.order(place, relativeTo: otherWin)
        return self
    }

    @discardableResult
    public func orderFrontRegardless() -> Self {
        value.orderFrontRegardless()
        return self
    }

    @discardableResult
    public func makeKey() -> Self {
        value.makeKey()
        return self
    }

    @discardableResult
    public func makeMain() -> Self {
        value.makeMain()
        return self
    }

    @discardableResult
    public func becomeKey() -> Self {
        value.becomeKey()
        return self
    }

    @discardableResult
    public func resignKey() -> Self {
        value.resignKey()
        return self
    }

    @discardableResult
    public func becomeMain() -> Self {
        value.becomeMain()
        return self
    }

    @discardableResult
    public func resignMain() -> Self {
        value.resignMain()
        return self
    }

    @discardableResult
    public func performClose(_ sender: Any?) -> Self {
        value.performClose(sender)
        return self
    }

    @discardableResult
    public func performMiniaturize(_ sender: Any?) -> Self {
        value.performMiniaturize(sender)
        return self
    }

    @discardableResult
    public func performZoom(_ sender: Any?) -> Self {
        value.performZoom(sender)
        return self
    }

    @discardableResult
    public func printWindow(_ sender: Any?) -> Self {
        value.printWindow(sender)
        return self
    }

    @discardableResult
    public func setDynamicDepthLimit(_ flag: Bool) -> Self {
        value.setDynamicDepthLimit(flag)
        return self
    }

    @discardableResult
    public func invalidateShadow() -> Self {
        value.invalidateShadow()
        return self
    }

    @discardableResult
    public func disableScreenUpdatesUntilFlush() -> Self {
        value.disableScreenUpdatesUntilFlush()
        return self
    }

    @available(macOS 10.7, *)
    @discardableResult
    public func toggleFullScreen(_ sender: Any?) -> Self {
        value.toggleFullScreen(sender)
        return self
    }

    @discardableResult
    public func setFrame(from string: NSWindow.PersistableFrameDescriptor) -> Self {
        value.setFrame(from: string)
        return self
    }

    @discardableResult
    public func saveFrame(usingName name: NSWindow.FrameAutosaveName) -> Self {
        value.saveFrame(usingName: name)
        return self
    }

    @available(macOS 10.9, *)
    @discardableResult
    public func beginSheet(_ sheetWindow: NSWindow, completionHandler handler: ((NSApplication.ModalResponse) -> Void)? = nil) -> Self {
        value.beginSheet(sheetWindow, completionHandler: handler)
        return self
    }

    @available(macOS 10.9, *)
    @discardableResult
    public func beginCriticalSheet(_ sheetWindow: NSWindow, completionHandler handler: ((NSApplication.ModalResponse) -> Void)? = nil) -> Self {
        value.beginCriticalSheet(sheetWindow, completionHandler: handler)
        return self
    }

    @available(macOS 10.9, *)
    @discardableResult
    public func endSheet(_ sheetWindow: NSWindow) -> Self {
        value.endSheet(sheetWindow)
        return self
    }

    @available(macOS 10.9, *)
    @discardableResult
    public func endSheet(_ sheetWindow: NSWindow, returnCode: NSApplication.ModalResponse) -> Self {
        value.endSheet(sheetWindow, returnCode: returnCode)
        return self
    }

    @discardableResult
    public func addChildWindow(_ childWin: NSWindow, ordered place: NSWindow.OrderingMode) -> Self {
        value.addChildWindow(childWin, ordered: place)
        return self
    }

    @discardableResult
    public func removeChildWindow(_ childWin: NSWindow) -> Self {
        value.removeChildWindow(childWin)
        return self
    }

    @available(macOS 10.11, *)
    @discardableResult
    public func performDrag(with event: NSEvent) -> Self {
        value.performDrag(with: event)
        return self
    }

    @discardableResult
    public func selectNextKeyView(_ sender: Any?) -> Self {
        value.selectNextKeyView(sender)
        return self
    }

    @discardableResult
    public func selectPreviousKeyView(_ sender: Any?) -> Self {
        value.selectPreviousKeyView(sender)
        return self
    }

    @discardableResult
    public func selectKeyView(following view: NSView) -> Self {
        value.selectKeyView(following: view)
        return self
    }

    @discardableResult
    public func selectKeyView(preceding view: NSView) -> Self {
        value.selectKeyView(preceding: view)
        return self
    }

    @discardableResult
    public func disableKeyEquivalentForDefaultButtonCell() -> Self {
        value.disableKeyEquivalentForDefaultButtonCell()
        return self
    }

    @discardableResult
    public func enableKeyEquivalentForDefaultButtonCell() -> Self {
        value.enableKeyEquivalentForDefaultButtonCell()
        return self
    }

    @discardableResult
    public func recalculateKeyViewLoop() -> Self {
        value.recalculateKeyViewLoop()
        return self
    }

    @discardableResult
    public func toggleToolbarShown(_ sender: Any?) -> Self {
        value.toggleToolbarShown(sender)
        return self
    }

    @discardableResult
    public func runToolbarCustomizationPalette(_ sender: Any?) -> Self {
        value.runToolbarCustomizationPalette(sender)
        return self
    }

    @available(macOS 10.12, *)
    @discardableResult
    public func addTabbedWindow(_ window: NSWindow, ordered: NSWindow.OrderingMode) -> Self {
        value.addTabbedWindow(window, ordered: ordered)
        return self
    }

    @available(macOS 10.10, *)
    @discardableResult
    public func trackEvents(matching mask: NSEvent.EventTypeMask, timeout: TimeInterval, mode: RunLoop.Mode, handler trackingHandler: (NSEvent?, UnsafeMutablePointer<ObjCBool>) -> Void) -> Self {
        value.trackEvents(matching: mask, timeout: timeout, mode: mode, handler: trackingHandler)
        return self
    }

    @discardableResult
    public func discardEvents(matching mask: NSEvent.EventTypeMask, before lastEvent: NSEvent?) -> Self {
        value.discardEvents(matching: mask, before: lastEvent)
        return self
    }

    @discardableResult
    public func postEvent(_ event: NSEvent, atStart flag: Bool) -> Self {
        value.postEvent(event, atStart: flag)
        return self
    }

    @discardableResult
    public func sendEvent(_ event: NSEvent) -> Self {
        value.sendEvent(event)
        return self
    }

    @discardableResult
    public func disableCursorRects() -> Self {
        value.disableCursorRects()
        return self
    }

    @discardableResult
    public func enableCursorRects() -> Self {
        value.enableCursorRects()
        return self
    }

    @discardableResult
    public func discardCursorRects() -> Self {
        value.discardCursorRects()
        return self
    }

    @discardableResult
    public func invalidateCursorRects(for view: NSView) -> Self {
        value.invalidateCursorRects(for: view)
        return self
    }

    @discardableResult
    public func resetCursorRects() -> Self {
        value.resetCursorRects()
        return self
    }

    @discardableResult
    public func registerForDraggedTypes(_ newTypes: [NSPasteboard.PasteboardType]) -> Self {
        value.registerForDraggedTypes(newTypes)
        return self
    }

    @discardableResult
    public func unregisterDraggedTypes() -> Self {
        value.unregisterDraggedTypes()
        return self
    }

    @available(macOS, introduced: 10.0, deprecated: 10.13, message: "This method shouldn’t be used as it doesn’t work in all drawing situations; instead, a subview should be used that implements the desired drawing behavior")
    @discardableResult
    public func cacheImage(in rect: NSRect) -> Self {
        value.cacheImage(in: rect)
        return self
    }

    @available(macOS, introduced: 10.0, deprecated: 10.13, message: "This method shouldn’t be used as it doesn’t work in all drawing situations; instead, a subview should be used that implements the desired drawing behavior")
    @discardableResult
    public func restoreCachedImage() -> Self {
        value.restoreCachedImage()
        return self
    }

    @available(macOS, introduced: 10.0, deprecated: 10.13, message: "This method shouldn’t be used as it doesn’t work in all drawing situations; instead, a subview should be used that implements the desired drawing behavior")
    @discardableResult
    public func discardCachedImage() -> Self {
        value.discardCachedImage()
        return self
    }

    @available(macOS, introduced: 10.0, deprecated: 10.10, message: "This method does not do anything and should not be called.")
    @discardableResult
    public func useOptimizedDrawing(_ flag: Bool) -> Self {
        value.useOptimizedDrawing(flag)
        return self
    }

    @available(macOS, introduced: 10.0, deprecated: 10.14, message: "Use +[NSAnimationContext runAnimationGroup:completionHandler:] to perform atomic updates across runloop invocations.")
    @discardableResult
    public func disableFlushing() -> Self {
        value.disableFlushing()
        return self
    }

    @available(macOS, introduced: 10.0, deprecated: 10.14, message: "Use +[NSAnimationContext runAnimationGroup:completionHandler:] to perform atomic updates across runloop invocations.")
    @discardableResult
    public func enableFlushing() -> Self {
        value.enableFlushing()
        return self
    }

    @available(macOS, introduced: 10.0, deprecated: 10.14, message: "Allow AppKit's automatic deferred display mechanism to take care of flushing any graphics contexts as needed.")
    @discardableResult
    public func flush() -> Self {
        value.flush()
        return self
    }

    @available(macOS, introduced: 10.0, deprecated: 10.14, message: "Allow AppKit's automatic deferred display mechanism to take care of flushing any graphics contexts as needed.")
    @discardableResult
    public func flushIfNeeded() -> Self {
        value.flushIfNeeded()
        return self
    }
}

#endif
