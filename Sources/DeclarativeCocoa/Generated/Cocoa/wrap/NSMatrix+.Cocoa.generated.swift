
// Generated file
// DO NOT EDIT THIS FILE

#if canImport(Cocoa)
import Cocoa

extension Modify.DynamicMemberWrap where T: NSMatrix {
    @discardableResult
    public func sendAction(_ selector: ObjectiveC.Selector, to object: Any, forAllCells flag: Swift.Bool) -> Self {
        self.value.sendAction(selector, to: object, forAllCells: flag)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func sort(using comparator: ObjectiveC.Selector) -> Self {
        self.value.sort(using: comparator)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func sort(using compare: @convention(c) (Any, Any, Swift.UnsafeMutableRawPointer?) -> Swift.Int, context: Swift.UnsafeMutableRawPointer?) -> Self {
        self.value.sort(using: compare, context: context)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func setSelectionFrom(_ startPos: Swift.Int, to endPos: Swift.Int, anchor anchorPos: Swift.Int, highlight lit: Swift.Bool) -> Self {
        self.value.setSelectionFrom(startPos, to: endPos, anchor: anchorPos, highlight: lit)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func deselectSelectedCell() -> Self {
        self.value.deselectSelectedCell()
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func deselectAllCells() -> Self {
        self.value.deselectAllCells()
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func selectCell(atRow row: Swift.Int, column col: Swift.Int) -> Self {
        self.value.selectCell(atRow: row, column: col)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func setScrollable(_ flag: Swift.Bool) -> Self {
        self.value.setScrollable(flag)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func setState(_ value: Swift.Int, atRow row: Swift.Int, column col: Swift.Int) -> Self {
        self.value.setState(value, atRow: row, column: col)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func getNumberOfRows(_ rowCount: Swift.UnsafeMutablePointer<Swift.Int>?, columns colCount: Swift.UnsafeMutablePointer<Swift.Int>?) -> Self {
        self.value.getNumberOfRows(rowCount, columns: colCount)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func renewRows(_ newRows: Swift.Int, columns newCols: Swift.Int) -> Self {
        self.value.renewRows(newRows, columns: newCols)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func putCell(_ newCell: AppKit.NSCell, atRow row: Swift.Int, column col: Swift.Int) -> Self {
        self.value.putCell(newCell, atRow: row, column: col)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func addRow() -> Self {
        self.value.addRow()
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func addRow(with newCells: [AppKit.NSCell]) -> Self {
        self.value.addRow(with: newCells)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func insertRow(_ row: Swift.Int) -> Self {
        self.value.insertRow(row)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func insertRow(_ row: Swift.Int, with newCells: [AppKit.NSCell]?) -> Self {
        self.value.insertRow(row, with: newCells)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func removeRow(_ row: Swift.Int) -> Self {
        self.value.removeRow(row)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func addColumn() -> Self {
        self.value.addColumn()
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func addColumn(with newCells: [AppKit.NSCell]) -> Self {
        self.value.addColumn(with: newCells)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func insertColumn(_ column: Swift.Int) -> Self {
        self.value.insertColumn(column)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func insertColumn(_ column: Swift.Int, with newCells: [AppKit.NSCell]?) -> Self {
        self.value.insertColumn(column, with: newCells)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func removeColumn(_ col: Swift.Int) -> Self {
        self.value.removeColumn(col)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func sizeToCells() -> Self {
        self.value.sizeToCells()
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func setValidateSize(_ flag: Swift.Bool) -> Self {
        self.value.setValidateSize(flag)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func drawCell(atRow row: Swift.Int, column col: Swift.Int) -> Self {
        self.value.drawCell(atRow: row, column: col)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func highlightCell(_ flag: Swift.Bool, atRow row: Swift.Int, column col: Swift.Int) -> Self {
        self.value.highlightCell(flag, atRow: row, column: col)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func scrollCellToVisible(atRow row: Swift.Int, column col: Swift.Int) -> Self {
        self.value.scrollCellToVisible(atRow: row, column: col)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func sendDoubleAction() -> Self {
        self.value.sendDoubleAction()
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func textDidBeginEditing(_ notification: Foundation.Notification) -> Self {
        self.value.textDidBeginEditing(notification)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func textDidEndEditing(_ notification: Foundation.Notification) -> Self {
        self.value.textDidEndEditing(notification)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func textDidChange(_ notification: Foundation.Notification) -> Self {
        self.value.textDidChange(notification)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func selectText(_ sender: Any?) -> Self {
        self.value.selectText(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func setToolTip(_ toolTipString: Swift.String?, for cell: AppKit.NSCell) -> Self {
        self.value.setToolTip(toolTipString, for: cell)
        return Modify.DynamicMemberWrap(self.value)
    }
}

#endif
