
// Generated file
// DO NOT EDIT THIS FILE

#if canImport(Cocoa)
import Cocoa

extension Modify.DynamicMemberWrap where T: NSStackView {
    @discardableResult
    public func setCustomSpacing(_ spacing: CGFloat, after view: NSView) -> Self {
        value.setCustomSpacing(spacing, after: view)
        return self
    }

    @available(macOS 10.11, *)
    @discardableResult
    public func addArrangedSubview(_ view: NSView) -> Self {
        value.addArrangedSubview(view)
        return self
    }

    @available(macOS 10.11, *)
    @discardableResult
    public func insertArrangedSubview(_ view: NSView, at index: Int) -> Self {
        value.insertArrangedSubview(view, at: index)
        return self
    }

    @available(macOS 10.11, *)
    @discardableResult
    public func removeArrangedSubview(_ view: NSView) -> Self {
        value.removeArrangedSubview(view)
        return self
    }

    @discardableResult
    public func setVisibilityPriority(_ priority: NSStackView.VisibilityPriority, for view: NSView) -> Self {
        value.setVisibilityPriority(priority, for: view)
        return self
    }

    @discardableResult
    public func setClippingResistancePriority(_ clippingResistancePriority: NSLayoutConstraint.Priority, for orientation: NSLayoutConstraint.Orientation) -> Self {
        value.setClippingResistancePriority(clippingResistancePriority, for: orientation)
        return self
    }

    @discardableResult
    public func setHuggingPriority(_ huggingPriority: NSLayoutConstraint.Priority, for orientation: NSLayoutConstraint.Orientation) -> Self {
        value.setHuggingPriority(huggingPriority, for: orientation)
        return self
    }

    @discardableResult
    public func addView(_ view: NSView, in gravity: NSStackView.Gravity) -> Self {
        value.addView(view, in: gravity)
        return self
    }

    @discardableResult
    public func insertView(_ view: NSView, at index: Int, in gravity: NSStackView.Gravity) -> Self {
        value.insertView(view, at: index, in: gravity)
        return self
    }

    @discardableResult
    public func removeView(_ view: NSView) -> Self {
        value.removeView(view)
        return self
    }

    @discardableResult
    public func setViews(_ views: [NSView], in gravity: NSStackView.Gravity) -> Self {
        value.setViews(views, in: gravity)
        return self
    }
}

#endif
