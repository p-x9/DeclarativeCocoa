
// Generated file
// DO NOT EDIT THIS FILE

#if canImport(Cocoa)
import Cocoa

extension Modify.DynamicMemberWrap where T: NSTabView {
    @discardableResult
    public func selectTabViewItem(_ tabViewItem: AppKit.NSTabViewItem?) -> Self {
        self.value.selectTabViewItem(tabViewItem)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func selectTabViewItem(at index: Swift.Int) -> Self {
        self.value.selectTabViewItem(at: index)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func selectTabViewItem(withIdentifier identifier: Any) -> Self {
        self.value.selectTabViewItem(withIdentifier: identifier)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func takeSelectedTabViewItemFromSender(_ sender: Any?) -> Self {
        self.value.takeSelectedTabViewItemFromSender(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func selectFirstTabViewItem(_ sender: Any?) -> Self {
        self.value.selectFirstTabViewItem(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func selectLastTabViewItem(_ sender: Any?) -> Self {
        self.value.selectLastTabViewItem(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func selectNextTabViewItem(_ sender: Any?) -> Self {
        self.value.selectNextTabViewItem(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func selectPreviousTabViewItem(_ sender: Any?) -> Self {
        self.value.selectPreviousTabViewItem(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func addTabViewItem(_ tabViewItem: AppKit.NSTabViewItem) -> Self {
        self.value.addTabViewItem(tabViewItem)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func insertTabViewItem(_ tabViewItem: AppKit.NSTabViewItem, at index: Swift.Int) -> Self {
        self.value.insertTabViewItem(tabViewItem, at: index)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func removeTabViewItem(_ tabViewItem: AppKit.NSTabViewItem) -> Self {
        self.value.removeTabViewItem(tabViewItem)
        return Modify.DynamicMemberWrap(self.value)
    }
}

#endif
