
// Generated file
// DO NOT EDIT THIS FILE

#if canImport(Cocoa)
import Cocoa

extension Modify.DynamicMemberWrap where T: NSDocumentController {
    @discardableResult
    public func addDocument(_ document: AppKit.NSDocument) -> Self {
        self.value.addDocument(document)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func removeDocument(_ document: AppKit.NSDocument) -> Self {
        self.value.removeDocument(document)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.8, *)
    @discardableResult
    public func beginOpenPanel(completionHandler: @escaping ([Foundation.URL]?) -> Swift.Void) -> Self {
        self.value.beginOpenPanel(completionHandler: completionHandler)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.8, *)
    @discardableResult
    public func beginOpenPanel(_ openPanel: AppKit.NSOpenPanel, forTypes inTypes: [Swift.String]?, completionHandler: @escaping (Swift.Int) -> Swift.Void) -> Self {
        self.value.beginOpenPanel(openPanel, forTypes: inTypes, completionHandler: completionHandler)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.7, *)
    @discardableResult
    public func openDocument(withContentsOf url: Foundation.URL, display displayDocument: Swift.Bool, completionHandler: @escaping (AppKit.NSDocument?, Swift.Bool, Swift.Error?) -> Swift.Void) -> Self {
        self.value.openDocument(withContentsOf: url, display: displayDocument, completionHandler: completionHandler)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.7, *)
    @discardableResult
    public func reopenDocument(for urlOrNil: Foundation.URL?, withContentsOf contentsURL: Foundation.URL, display displayDocument: Swift.Bool, completionHandler: @escaping (AppKit.NSDocument?, Swift.Bool, Swift.Error?) -> Swift.Void) -> Self {
        self.value.reopenDocument(for: urlOrNil, withContentsOf: contentsURL, display: displayDocument, completionHandler: completionHandler)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func reviewUnsavedDocuments(withAlertTitle title: Swift.String?, cancellable: Swift.Bool, delegate: Any?, didReviewAllSelector: ObjectiveC.Selector?, contextInfo: Swift.UnsafeMutableRawPointer?) -> Self {
        self.value.reviewUnsavedDocuments(withAlertTitle: title, cancellable: cancellable, delegate: delegate, didReviewAllSelector: didReviewAllSelector, contextInfo: contextInfo)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func closeAllDocuments(withDelegate delegate: Any?, didCloseAllSelector: ObjectiveC.Selector?, contextInfo: Swift.UnsafeMutableRawPointer?) -> Self {
        self.value.closeAllDocuments(withDelegate: delegate, didCloseAllSelector: didCloseAllSelector, contextInfo: contextInfo)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func presentError(_ error: Swift.Error, modalFor window: AppKit.NSWindow, delegate: Any?, didPresent didPresentSelector: ObjectiveC.Selector?, contextInfo: Swift.UnsafeMutableRawPointer?) -> Self {
        self.value.presentError(error, modalFor: window, delegate: delegate, didPresent: didPresentSelector, contextInfo: contextInfo)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func noteNewRecentDocument(_ document: AppKit.NSDocument) -> Self {
        self.value.noteNewRecentDocument(document)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func noteNewRecentDocumentURL(_ url: Foundation.URL) -> Self {
        self.value.noteNewRecentDocumentURL(url)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func encode(with coder: Foundation.NSCoder) -> Self {
        self.value.encode(with: coder)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    @available(macOS, unavailable, introduced: 10.0, deprecated: 10.4, message: "APIs deprecated as of macOS 10.9 and earlier are unavailable in Swift")
    public func setShouldCreateUI(_ flag: Swift.Bool) -> Self {
        self.value.setShouldCreateUI(flag)
        return Modify.DynamicMemberWrap(self.value)
    }
}

#endif
