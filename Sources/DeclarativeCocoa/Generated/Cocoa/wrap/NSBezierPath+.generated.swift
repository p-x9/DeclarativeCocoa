
// Generated file
// DO NOT EDIT THIS FILE

#if canImport(Cocoa)
import Cocoa

extension Modify.DynamicMemberWrap where T: NSBezierPath {
    @discardableResult
    public func move(to point: Foundation.NSPoint) -> Self {
        self.value.move(to: point)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func line(to point: Foundation.NSPoint) -> Self {
        self.value.line(to: point)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func curve(to endPoint: Foundation.NSPoint, controlPoint1: Foundation.NSPoint, controlPoint2: Foundation.NSPoint) -> Self {
        self.value.curve(to: endPoint, controlPoint1: controlPoint1, controlPoint2: controlPoint2)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func close() -> Self {
        self.value.close()
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func removeAllPoints() -> Self {
        self.value.removeAllPoints()
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func relativeMove(to point: Foundation.NSPoint) -> Self {
        self.value.relativeMove(to: point)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func relativeLine(to point: Foundation.NSPoint) -> Self {
        self.value.relativeLine(to: point)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func relativeCurve(to endPoint: Foundation.NSPoint, controlPoint1: Foundation.NSPoint, controlPoint2: Foundation.NSPoint) -> Self {
        self.value.relativeCurve(to: endPoint, controlPoint1: controlPoint1, controlPoint2: controlPoint2)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func getLineDash(_ pattern: Swift.UnsafeMutablePointer<CoreFoundation.CGFloat>?, count: Swift.UnsafeMutablePointer<Swift.Int>?, phase: Swift.UnsafeMutablePointer<CoreFoundation.CGFloat>?) -> Self {
        self.value.getLineDash(pattern, count: count, phase: phase)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func setLineDash(_ pattern: Swift.UnsafePointer<CoreFoundation.CGFloat>?, count: Swift.Int, phase: CoreFoundation.CGFloat) -> Self {
        self.value.setLineDash(pattern, count: count, phase: phase)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func stroke() -> Self {
        self.value.stroke()
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func fill() -> Self {
        self.value.fill()
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func addClip() -> Self {
        self.value.addClip()
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func setClip() -> Self {
        self.value.setClip()
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func transform(using transform: Foundation.AffineTransform) -> Self {
        self.value.transform(using: transform)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func setAssociatedPoints(_ points: Foundation.NSPointArray?, at index: Swift.Int) -> Self {
        self.value.setAssociatedPoints(points, at: index)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func append(_ path: AppKit.NSBezierPath) -> Self {
        self.value.append(path)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func appendRect(_ rect: Foundation.NSRect) -> Self {
        self.value.appendRect(rect)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func appendPoints(_ points: Foundation.NSPointArray, count: Swift.Int) -> Self {
        self.value.appendPoints(points, count: count)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func appendOval(in rect: Foundation.NSRect) -> Self {
        self.value.appendOval(in: rect)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func appendArc(withCenter center: Foundation.NSPoint, radius: CoreFoundation.CGFloat, startAngle: CoreFoundation.CGFloat, endAngle: CoreFoundation.CGFloat, clockwise: Swift.Bool) -> Self {
        self.value.appendArc(withCenter: center, radius: radius, startAngle: startAngle, endAngle: endAngle, clockwise: clockwise)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func appendArc(withCenter center: Foundation.NSPoint, radius: CoreFoundation.CGFloat, startAngle: CoreFoundation.CGFloat, endAngle: CoreFoundation.CGFloat) -> Self {
        self.value.appendArc(withCenter: center, radius: radius, startAngle: startAngle, endAngle: endAngle)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func appendArc(from point1: Foundation.NSPoint, to point2: Foundation.NSPoint, radius: CoreFoundation.CGFloat) -> Self {
        self.value.appendArc(from: point1, to: point2, radius: radius)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.13, *)
    @discardableResult
    public func append(withCGGlyph glyph: CoreGraphics.CGGlyph, in font: AppKit.NSFont) -> Self {
        self.value.append(withCGGlyph: glyph, in: font)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.13, *)
    @discardableResult
    public func append(withCGGlyphs glyphs: Swift.UnsafePointer<CoreGraphics.CGGlyph>, count: Swift.Int, in font: AppKit.NSFont) -> Self {
        self.value.append(withCGGlyphs: glyphs, count: count, in: font)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.5, *)
    @discardableResult
    public func appendRoundedRect(_ rect: Foundation.NSRect, xRadius: CoreFoundation.CGFloat, yRadius: CoreFoundation.CGFloat) -> Self {
        self.value.appendRoundedRect(rect, xRadius: xRadius, yRadius: yRadius)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func encode(with coder: Foundation.NSCoder) -> Self {
        self.value.encode(with: coder)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    @available(macOS, unavailable, introduced: 10.0, deprecated: 10.0, message: "APIs deprecated as of macOS 10.9 and earlier are unavailable in Swift")
    public func setCaches(_ flag: Swift.Bool) -> Self {
        self.value.setCaches(flag)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    @available(macOS, introduced: 10.0, deprecated: 10.14, message: "Use -appendBezierPathWithCGGlyph:inFont: instead")
    public func appendGlyph(_ glyph: AppKit.NSGlyph, in font: AppKit.NSFont) -> Self {
        self.value.appendGlyph(glyph, in: font)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    @available(macOS, introduced: 10.0, deprecated: 10.14, message: "Use -appendBezierPathWithCGGlyphs:count:inFont: instead")
    public func appendGlyphs(_ glyphs: Swift.UnsafeMutablePointer<AppKit.NSGlyph>, count: Swift.Int, in font: AppKit.NSFont) -> Self {
        self.value.appendGlyphs(glyphs, count: count, in: font)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    @available(macOS, introduced: 10.0, deprecated: 10.14, message: "Use -appendBezierPathWithCGGlyphs:count:inFont: instead")
    public func appendPackedGlyphs(_ packedGlyphs: Swift.UnsafePointer<Swift.CChar>) -> Self {
        self.value.appendPackedGlyphs(packedGlyphs)
        return Modify.DynamicMemberWrap(self.value)
    }
}

#endif
