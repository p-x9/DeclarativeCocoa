
// Generated file
// DO NOT EDIT THIS FILE

#if canImport(Cocoa)
import Cocoa

extension Modify.DynamicMemberWrap where T: NSFont {
    @available(macOS 10.13, *)
    @discardableResult
    public func getBoundingRects(_ bounds: Foundation.NSRectArray, forCGGlyphs glyphs: Swift.UnsafePointer<CoreGraphics.CGGlyph>, count glyphCount: Swift.Int) -> Self {
        self.value.getBoundingRects(bounds, forCGGlyphs: glyphs, count: glyphCount)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.13, *)
    @discardableResult
    public func getAdvancements(_ advancements: Foundation.NSSizeArray, forCGGlyphs glyphs: Swift.UnsafePointer<CoreGraphics.CGGlyph>, count glyphCount: Swift.Int) -> Self {
        self.value.getAdvancements(advancements, forCGGlyphs: glyphs, count: glyphCount)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func set() -> Self {
        self.value.set()
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func set(in graphicsContext: AppKit.NSGraphicsContext) -> Self {
        self.value.set(in: graphicsContext)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func encode(with coder: Foundation.NSCoder) -> Self {
        self.value.encode(with: coder)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func getBoundingRects(_ bounds: Foundation.NSRectArray, forGlyphs glyphs: Swift.UnsafePointer<AppKit.NSGlyph>, count glyphCount: Swift.Int) -> Self {
        self.value.getBoundingRects(bounds, forGlyphs: glyphs, count: glyphCount)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func getAdvancements(_ advancements: Foundation.NSSizeArray, forGlyphs glyphs: Swift.UnsafePointer<AppKit.NSGlyph>, count glyphCount: Swift.Int) -> Self {
        self.value.getAdvancements(advancements, forGlyphs: glyphs, count: glyphCount)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func getAdvancements(_ advancements: Foundation.NSSizeArray, forPackedGlyphs packedGlyphs: Swift.UnsafeRawPointer, length: Swift.Int) -> Self {
        self.value.getAdvancements(advancements, forPackedGlyphs: packedGlyphs, length: length)
        return Modify.DynamicMemberWrap(self.value)
    }
}

#endif
