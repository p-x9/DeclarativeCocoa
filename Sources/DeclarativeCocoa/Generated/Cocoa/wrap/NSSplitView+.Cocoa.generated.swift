
// Generated file
// DO NOT EDIT THIS FILE

#if canImport(Cocoa)
import Cocoa

extension Modify.DynamicMemberWrap where T: NSSplitView {
    @discardableResult
    public func drawDivider(in rect: Foundation.NSRect) -> Self {
        self.value.drawDivider(in: rect)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func adjustSubviews() -> Self {
        self.value.adjustSubviews()
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.5, *)
    @discardableResult
    public func setPosition(_ position: CoreFoundation.CGFloat, ofDividerAt dividerIndex: Swift.Int) -> Self {
        self.value.setPosition(position, ofDividerAt: dividerIndex)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.8, *)
    @discardableResult
    public func setHoldingPriority(_ priority: AppKit.NSLayoutConstraint.Priority, forSubviewAt subviewIndex: Swift.Int) -> Self {
        self.value.setHoldingPriority(priority, forSubviewAt: subviewIndex)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    @available(macOS, unavailable, introduced: 10.0, deprecated: 10.6, message: "APIs deprecated as of macOS 10.9 and earlier are unavailable in Swift")
    public func setIsPaneSplitter(_ flag: Swift.Bool) -> Self {
        self.value.setIsPaneSplitter(flag)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.11, *)
    @discardableResult
    public func addArrangedSubview(_ view: AppKit.NSView) -> Self {
        self.value.addArrangedSubview(view)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.11, *)
    @discardableResult
    public func insertArrangedSubview(_ view: AppKit.NSView, at index: Swift.Int) -> Self {
        self.value.insertArrangedSubview(view, at: index)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.11, *)
    @discardableResult
    public func removeArrangedSubview(_ view: AppKit.NSView) -> Self {
        self.value.removeArrangedSubview(view)
        return Modify.DynamicMemberWrap(self.value)
    }
}

#endif
