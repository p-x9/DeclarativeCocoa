
// Generated file
// DO NOT EDIT THIS FILE

#if canImport(Cocoa)
import Cocoa

extension Modify.DynamicMemberWrap where T: NSWorkspace {
    @available(macOS 10.15, *)
    @discardableResult
    public func open(_ url: Foundation.URL, configuration: AppKit.NSWorkspace.OpenConfiguration, completionHandler: ((AppKit.NSRunningApplication?, Swift.Error?) -> Swift.Void)? = nil) -> Self {
        self.value.open(url, configuration: configuration, completionHandler: completionHandler)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.15, *)
    @discardableResult
    public func open(_ urls: [Foundation.URL], withApplicationAt applicationURL: Foundation.URL, configuration: AppKit.NSWorkspace.OpenConfiguration, completionHandler: ((AppKit.NSRunningApplication?, Swift.Error?) -> Swift.Void)? = nil) -> Self {
        self.value.open(urls, withApplicationAt: applicationURL, configuration: configuration, completionHandler: completionHandler)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.15, *)
    @discardableResult
    public func openApplication(at applicationURL: Foundation.URL, configuration: AppKit.NSWorkspace.OpenConfiguration, completionHandler: ((AppKit.NSRunningApplication?, Swift.Error?) -> Swift.Void)? = nil) -> Self {
        self.value.openApplication(at: applicationURL, configuration: configuration, completionHandler: completionHandler)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.6, *)
    @discardableResult
    public func activateFileViewerSelecting(_ fileURLs: [Foundation.URL]) -> Self {
        self.value.activateFileViewerSelecting(fileURLs)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func noteFileSystemChanged(_ path: Swift.String) -> Self {
        self.value.noteFileSystemChanged(path)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.6, *)
    @discardableResult
    public func recycle(_ URLs: [Foundation.URL], completionHandler handler: (([Foundation.URL : Foundation.URL], Swift.Error?) -> Swift.Void)? = nil) -> Self {
        self.value.recycle(URLs, completionHandler: handler)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.6, *)
    @discardableResult
    public func duplicate(_ URLs: [Foundation.URL], completionHandler handler: (([Foundation.URL : Foundation.URL], Swift.Error?) -> Swift.Void)? = nil) -> Self {
        self.value.duplicate(URLs, completionHandler: handler)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func hideOtherApplications() -> Self {
        self.value.hideOtherApplications()
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 12.0, *)
    @discardableResult
    public func setDefaultApplication(at applicationURL: Foundation.URL, toOpenContentTypeOfFileAt url: Foundation.URL, completion completionHandler: ((Swift.Error?) -> Swift.Void)? = nil) -> Self {
        self.value.setDefaultApplication(at: applicationURL, toOpenContentTypeOfFileAt: url, completion: completionHandler)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 12.0, *)
    @discardableResult
    public func setDefaultApplication(at applicationURL: Foundation.URL, toOpenURLsWithScheme urlScheme: Swift.String, completion completionHandler: ((Swift.Error?) -> Swift.Void)? = nil) -> Self {
        self.value.setDefaultApplication(at: applicationURL, toOpenURLsWithScheme: urlScheme, completion: completionHandler)
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 12.0, *)
    @discardableResult
    public func setDefaultApplication(at applicationURL: Foundation.URL, toOpenFileAt url: Foundation.URL, completion completionHandler: ((Swift.Error?) -> Swift.Void)? = nil) -> Self {
        self.value.setDefaultApplication(at: applicationURL, toOpenFileAt: url, completion: completionHandler)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    @available(macOS, unavailable, introduced: 10.0, deprecated: 10.6, message: "APIs deprecated as of macOS 10.9 and earlier are unavailable in Swift")
    public func findApplications() -> Self {
        self.value.findApplications()
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    @available(macOS, unavailable, introduced: 10.0, deprecated: 10.6, message: "APIs deprecated as of macOS 10.9 and earlier are unavailable in Swift")
    public func noteUserDefaultsChanged() -> Self {
        self.value.noteUserDefaultsChanged()
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    @available(macOS, unavailable, introduced: 10.0, deprecated: 10.6, message: "APIs deprecated as of macOS 10.9 and earlier are unavailable in Swift")
    public func slideImage(_ image: AppKit.NSImage, from fromPoint: Foundation.NSPoint, to toPoint: Foundation.NSPoint) -> Self {
        self.value.slideImage(image, from: fromPoint, to: toPoint)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    @available(macOS, unavailable, introduced: 10.0, deprecated: 10.6, message: "APIs deprecated as of macOS 10.9 and earlier are unavailable in Swift")
    public func checkForRemovableMedia() -> Self {
        self.value.checkForRemovableMedia()
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    @available(macOS, unavailable, introduced: 10.0, deprecated: 10.6, message: "APIs deprecated as of macOS 10.9 and earlier are unavailable in Swift")
    public func noteFileSystemChanged() -> Self {
        self.value.noteFileSystemChanged()
        return Modify.DynamicMemberWrap(self.value)
    }

    @available(macOS 10.14, *)
    @discardableResult
    public func requestAuthorization(to type: AppKit.NSWorkspace.AuthorizationType, completionHandler: @escaping (AppKit.NSWorkspace.Authorization?, Swift.Error?) -> Swift.Void) -> Self {
        self.value.requestAuthorization(to: type, completionHandler: completionHandler)
        return Modify.DynamicMemberWrap(self.value)
    }
}

#endif
