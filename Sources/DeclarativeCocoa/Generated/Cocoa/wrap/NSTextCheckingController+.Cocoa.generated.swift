
// Generated file
// DO NOT EDIT THIS FILE

#if canImport(Cocoa)
import Cocoa

@available(macOS 10.15, *)
extension Modify.DynamicMemberWrap where T: NSTextCheckingController {
    @discardableResult
    public func invalidate() -> Self {
        self.value.invalidate()
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func didChangeText(in range: Foundation.NSRange) -> Self {
        self.value.didChangeText(in: range)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func insertedText(in range: Foundation.NSRange) -> Self {
        self.value.insertedText(in: range)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func didChangeSelectedRange() -> Self {
        self.value.didChangeSelectedRange()
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func considerTextChecking(for range: Foundation.NSRange) -> Self {
        self.value.considerTextChecking(for: range)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func checkText(in range: Foundation.NSRange, types checkingTypes: Foundation.NSTextCheckingTypes, options: [AppKit.NSSpellChecker.OptionKey : Any] = [:]) -> Self {
        self.value.checkText(in: range, types: checkingTypes, options: options)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func checkTextInSelection(_ sender: Any?) -> Self {
        self.value.checkTextInSelection(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func checkTextInDocument(_ sender: Any?) -> Self {
        self.value.checkTextInDocument(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func orderFrontSubstitutionsPanel(_ sender: Any?) -> Self {
        self.value.orderFrontSubstitutionsPanel(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func checkSpelling(_ sender: Any?) -> Self {
        self.value.checkSpelling(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func showGuessPanel(_ sender: Any?) -> Self {
        self.value.showGuessPanel(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func changeSpelling(_ sender: Any?) -> Self {
        self.value.changeSpelling(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func ignoreSpelling(_ sender: Any?) -> Self {
        self.value.ignoreSpelling(sender)
        return Modify.DynamicMemberWrap(self.value)
    }

    @discardableResult
    public func updateCandidates() -> Self {
        self.value.updateCandidates()
        return Modify.DynamicMemberWrap(self.value)
    }
}

#endif
