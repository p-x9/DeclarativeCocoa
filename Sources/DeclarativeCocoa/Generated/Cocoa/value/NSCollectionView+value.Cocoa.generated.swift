
// Generated file
// DO NOT EDIT THIS FILE

#if canImport(Cocoa)
import Cocoa

extension Modify.DynamicMemberWrap where T: NSCollectionView {
    @available(macOS 10.11, *)
    @discardableResult
    @_disfavoredOverload
    public func reloadData() -> T {
        self.value.reloadData()
        return self.value
    }

    @available(macOS 10.11, *)
    @discardableResult
    @_disfavoredOverload
    public func selectItems(at indexPaths: Swift.Set<Foundation.IndexPath>, scrollPosition: AppKit.NSCollectionView.ScrollPosition) -> T {
        self.value.selectItems(at: indexPaths, scrollPosition: scrollPosition)
        return self.value
    }

    @available(macOS 10.11, *)
    @discardableResult
    @_disfavoredOverload
    public func deselectItems(at indexPaths: Swift.Set<Foundation.IndexPath>) -> T {
        self.value.deselectItems(at: indexPaths)
        return self.value
    }

    @available(macOS 10.11, *)
    @discardableResult
    @_disfavoredOverload
    public func register(_ itemClass: Swift.AnyClass?, forItemWithIdentifier identifier: AppKit.NSUserInterfaceItemIdentifier) -> T {
        self.value.register(itemClass, forItemWithIdentifier: identifier)
        return self.value
    }

    @available(macOS 10.11, *)
    @discardableResult
    @_disfavoredOverload
    public func register(_ nib: AppKit.NSNib?, forItemWithIdentifier identifier: AppKit.NSUserInterfaceItemIdentifier) -> T {
        self.value.register(nib, forItemWithIdentifier: identifier)
        return self.value
    }

    @available(macOS 10.11, *)
    @discardableResult
    @_disfavoredOverload
    public func register(_ viewClass: Swift.AnyClass?, forSupplementaryViewOfKind kind: AppKit.NSCollectionView.SupplementaryElementKind, withIdentifier identifier: AppKit.NSUserInterfaceItemIdentifier) -> T {
        self.value.register(viewClass, forSupplementaryViewOfKind: kind, withIdentifier: identifier)
        return self.value
    }

    @available(macOS 10.11, *)
    @discardableResult
    @_disfavoredOverload
    public func register(_ nib: AppKit.NSNib?, forSupplementaryViewOfKind kind: AppKit.NSCollectionView.SupplementaryElementKind, withIdentifier identifier: AppKit.NSUserInterfaceItemIdentifier) -> T {
        self.value.register(nib, forSupplementaryViewOfKind: kind, withIdentifier: identifier)
        return self.value
    }

    @available(macOS 10.11, *)
    @discardableResult
    @_disfavoredOverload
    public func insertSections(_ sections: Foundation.IndexSet) -> T {
        self.value.insertSections(sections)
        return self.value
    }

    @available(macOS 10.11, *)
    @discardableResult
    @_disfavoredOverload
    public func deleteSections(_ sections: Foundation.IndexSet) -> T {
        self.value.deleteSections(sections)
        return self.value
    }

    @available(macOS 10.11, *)
    @discardableResult
    @_disfavoredOverload
    public func reloadSections(_ sections: Foundation.IndexSet) -> T {
        self.value.reloadSections(sections)
        return self.value
    }

    @available(macOS 10.11, *)
    @discardableResult
    @_disfavoredOverload
    public func moveSection(_ section: Swift.Int, toSection newSection: Swift.Int) -> T {
        self.value.moveSection(section, toSection: newSection)
        return self.value
    }

    @available(macOS 10.11, *)
    @discardableResult
    @_disfavoredOverload
    public func insertItems(at indexPaths: Swift.Set<Foundation.IndexPath>) -> T {
        self.value.insertItems(at: indexPaths)
        return self.value
    }

    @available(macOS 10.11, *)
    @discardableResult
    @_disfavoredOverload
    public func deleteItems(at indexPaths: Swift.Set<Foundation.IndexPath>) -> T {
        self.value.deleteItems(at: indexPaths)
        return self.value
    }

    @available(macOS 10.11, *)
    @discardableResult
    @_disfavoredOverload
    public func reloadItems(at indexPaths: Swift.Set<Foundation.IndexPath>) -> T {
        self.value.reloadItems(at: indexPaths)
        return self.value
    }

    @available(macOS 10.11, *)
    @discardableResult
    @_disfavoredOverload
    public func moveItem(at indexPath: Foundation.IndexPath, to newIndexPath: Foundation.IndexPath) -> T {
        self.value.moveItem(at: indexPath, to: newIndexPath)
        return self.value
    }

    @available(macOS 10.11, *)
    @discardableResult
    @_disfavoredOverload
    public func performBatchUpdates(_ updates: (() -> Swift.Void)?, completionHandler: ((Swift.Bool) -> Swift.Void)? = nil) -> T {
        self.value.performBatchUpdates(updates, completionHandler: completionHandler)
        return self.value
    }

    @available(macOS 10.11, *)
    @discardableResult
    @_disfavoredOverload
    public func scrollToItems(at indexPaths: Swift.Set<Foundation.IndexPath>, scrollPosition: AppKit.NSCollectionView.ScrollPosition) -> T {
        self.value.scrollToItems(at: indexPaths, scrollPosition: scrollPosition)
        return self.value
    }

    @available(macOS 10.6, *)
    @discardableResult
    @_disfavoredOverload
    public func setDraggingSourceOperationMask(_ dragOperationMask: AppKit.NSDragOperation, forLocal localDestination: Swift.Bool) -> T {
        self.value.setDraggingSourceOperationMask(dragOperationMask, forLocal: localDestination)
        return self.value
    }

    @available(macOS 10.7, *)
    @discardableResult
    @_disfavoredOverload
    @_Concurrency.MainActor public func draggingSession(_ session: AppKit.NSDraggingSession, willBeginAt screenPoint: Foundation.NSPoint) -> T {
        self.value.draggingSession(session, willBeginAt: screenPoint)
        return self.value
    }

    @available(macOS 10.7, *)
    @discardableResult
    @_disfavoredOverload
    @_Concurrency.MainActor public func draggingSession(_ session: AppKit.NSDraggingSession, movedTo screenPoint: Foundation.NSPoint) -> T {
        self.value.draggingSession(session, movedTo: screenPoint)
        return self.value
    }

    @available(macOS 10.7, *)
    @discardableResult
    @_disfavoredOverload
    @_Concurrency.MainActor public func draggingSession(_ session: AppKit.NSDraggingSession, endedAt screenPoint: Foundation.NSPoint, operation: AppKit.NSDragOperation) -> T {
        self.value.draggingSession(session, endedAt: screenPoint, operation: operation)
        return self.value
    }
}

#endif
