
// Generated file
// DO NOT EDIT THIS FILE

#if canImport(Cocoa)
import Cocoa

extension Modify.DynamicMemberWrap where T: NSSpellChecker {
    @discardableResult
    @_disfavoredOverload
    public func updateSpellingPanel(withMisspelledWord word: Swift.String) -> T {
        self.value.updateSpellingPanel(withMisspelledWord: word)
        return self.value
    }

    @available(macOS 10.5, *)
    @discardableResult
    @_disfavoredOverload
    public func updateSpellingPanel(withGrammarString string: Swift.String, detail: [Swift.String : Any]) -> T {
        self.value.updateSpellingPanel(withGrammarString: string, detail: detail)
        return self.value
    }

    @available(macOS 10.6, *)
    @discardableResult
    @_disfavoredOverload
    public func updatePanels() -> T {
        self.value.updatePanels()
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func ignoreWord(_ wordToIgnore: Swift.String, inSpellDocumentWithTag tag: Swift.Int) -> T {
        self.value.ignoreWord(wordToIgnore, inSpellDocumentWithTag: tag)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func setIgnoredWords(_ words: [Swift.String], inSpellDocumentWithTag tag: Swift.Int) -> T {
        self.value.setIgnoredWords(words, inSpellDocumentWithTag: tag)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func closeSpellDocument(withTag tag: Swift.Int) -> T {
        self.value.closeSpellDocument(withTag: tag)
        return self.value
    }

    @available(macOS 10.7, *)
    @discardableResult
    @_disfavoredOverload
    public func record(_ response: AppKit.NSSpellChecker.CorrectionResponse, toCorrection correction: Swift.String, forWord word: Swift.String, language: Swift.String?, inSpellDocumentWithTag tag: Swift.Int) -> T {
        self.value.record(response, toCorrection: correction, forWord: word, language: language, inSpellDocumentWithTag: tag)
        return self.value
    }

    @available(macOS 10.7, *)
    @discardableResult
    @_disfavoredOverload
    public func showCorrectionIndicator(of type: AppKit.NSSpellChecker.CorrectionIndicatorType, primaryString: Swift.String, alternativeStrings: [Swift.String], forStringIn rectOfTypedString: Foundation.NSRect, view: AppKit.NSView, completionHandler completionBlock: ((Swift.String?) -> Swift.Void)? = nil) -> T {
        self.value.showCorrectionIndicator(of: type, primaryString: primaryString, alternativeStrings: alternativeStrings, forStringIn: rectOfTypedString, view: view, completionHandler: completionBlock)
        return self.value
    }

    @available(macOS 10.7, *)
    @discardableResult
    @_disfavoredOverload
    public func dismissCorrectionIndicator(for view: AppKit.NSView) -> T {
        self.value.dismissCorrectionIndicator(for: view)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func setWordFieldStringValue(_ string: Swift.String) -> T {
        self.value.setWordFieldStringValue(string)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func learnWord(_ word: Swift.String) -> T {
        self.value.learnWord(word)
        return self.value
    }

    @available(macOS 10.5, *)
    @discardableResult
    @_disfavoredOverload
    public func unlearnWord(_ word: Swift.String) -> T {
        self.value.unlearnWord(word)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    @available(macOS, unavailable, introduced: 10.0, deprecated: 10.5, message: "APIs deprecated as of macOS 10.9 and earlier are unavailable in Swift")
    public func forgetWord(_ word: Swift.String!) -> T {
        self.value.forgetWord(word)
        return self.value
    }
}

#endif
