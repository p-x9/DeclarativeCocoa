
// Generated file
// DO NOT EDIT THIS FILE

#if canImport(Cocoa)
import Cocoa

extension Modify.DynamicMemberWrap where T: NSMenu {
    @discardableResult
    @_disfavoredOverload
    public func insertItem(_ newItem: NSMenuItem, at index: Int) -> T {
        self.value.insertItem(newItem, at: index)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func addItem(_ newItem: NSMenuItem) -> T {
        self.value.addItem(newItem)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func removeItem(at index: Int) -> T {
        self.value.removeItem(at: index)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func removeItem(_ item: NSMenuItem) -> T {
        self.value.removeItem(item)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func setSubmenu(_ menu: NSMenu?, for item: NSMenuItem) -> T {
        self.value.setSubmenu(menu, for: item)
        return self.value
    }

    @available(macOS 10.6, *)
    @discardableResult
    @_disfavoredOverload
    public func removeAllItems() -> T {
        self.value.removeAllItems()
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func update() -> T {
        self.value.update()
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func itemChanged(_ item: NSMenuItem) -> T {
        self.value.itemChanged(item)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func performActionForItem(at index: Int) -> T {
        self.value.performActionForItem(at: index)
        return self.value
    }

    @available(macOS 10.5, *)
    @discardableResult
    @_disfavoredOverload
    public func cancelTracking() -> T {
        self.value.cancelTracking()
        return self.value
    }

    @available(macOS 10.6, *)
    @discardableResult
    @_disfavoredOverload
    public func cancelTrackingWithoutAnimation() -> T {
        self.value.cancelTrackingWithoutAnimation()
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func submenuAction(_ sender: Any?) -> T {
        self.value.submenuAction(sender)
        return self.value
    }

    @available(macOS, introduced: 10.0, deprecated: 10.11)
    @discardableResult
    @_disfavoredOverload
    public func helpRequested(with eventPtr: NSEvent) -> T {
        self.value.helpRequested(with: eventPtr)
        return self.value
    }
}

#endif
