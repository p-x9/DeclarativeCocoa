
// Generated file
// DO NOT EDIT THIS FILE

#if canImport(Cocoa)
import Cocoa

extension Modify.DynamicMemberWrap where T: NSWindow {
    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func addTitlebarAccessoryViewController(_ childViewController: AppKit.NSTitlebarAccessoryViewController) -> T {
        self.value.addTitlebarAccessoryViewController(childViewController)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func insertTitlebarAccessoryViewController(_ childViewController: AppKit.NSTitlebarAccessoryViewController, at index: Swift.Int) -> T {
        self.value.insertTitlebarAccessoryViewController(childViewController, at: index)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func removeTitlebarAccessoryViewController(at index: Swift.Int) -> T {
        self.value.removeTitlebarAccessoryViewController(at: index)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func setTitleWithRepresentedFilename(_ filename: Swift.String) -> T {
        self.value.setTitleWithRepresentedFilename(filename)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func endEditing(for object: Any?) -> T {
        self.value.endEditing(for: object)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func setFrame(_ frameRect: Foundation.NSRect, display flag: Swift.Bool) -> T {
        self.value.setFrame(frameRect, display: flag)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func setContentSize(_ size: Foundation.NSSize) -> T {
        self.value.setContentSize(size)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func setFrameOrigin(_ point: Foundation.NSPoint) -> T {
        self.value.setFrameOrigin(point)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func setFrameTopLeftPoint(_ point: Foundation.NSPoint) -> T {
        self.value.setFrameTopLeftPoint(point)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func setFrame(_ frameRect: Foundation.NSRect, display displayFlag: Swift.Bool, animate animateFlag: Swift.Bool) -> T {
        self.value.setFrame(frameRect, display: displayFlag, animate: animateFlag)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func displayIfNeeded() -> T {
        self.value.displayIfNeeded()
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func display() -> T {
        self.value.display()
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func update() -> T {
        self.value.update()
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func close() -> T {
        self.value.close()
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func miniaturize(_ sender: Any?) -> T {
        self.value.miniaturize(sender)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func deminiaturize(_ sender: Any?) -> T {
        self.value.deminiaturize(sender)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func zoom(_ sender: Any?) -> T {
        self.value.zoom(sender)
        return self.value
    }

    @available(macOS 10.5, *)
    @discardableResult
    @_disfavoredOverload
    public func setContentBorderThickness(_ thickness: CoreFoundation.CGFloat, for edge: Foundation.NSRectEdge) -> T {
        self.value.setContentBorderThickness(thickness, for: edge)
        return self.value
    }

    @available(macOS 10.5, *)
    @discardableResult
    @_disfavoredOverload
    public func setAutorecalculatesContentBorderThickness(_ flag: Swift.Bool, for edge: Foundation.NSRectEdge) -> T {
        self.value.setAutorecalculatesContentBorderThickness(flag, for: edge)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func center() -> T {
        self.value.center()
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func makeKeyAndOrderFront(_ sender: Any?) -> T {
        self.value.makeKeyAndOrderFront(sender)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func orderFront(_ sender: Any?) -> T {
        self.value.orderFront(sender)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func orderBack(_ sender: Any?) -> T {
        self.value.orderBack(sender)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func orderOut(_ sender: Any?) -> T {
        self.value.orderOut(sender)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func order(_ place: AppKit.NSWindow.OrderingMode, relativeTo otherWin: Swift.Int) -> T {
        self.value.order(place, relativeTo: otherWin)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func orderFrontRegardless() -> T {
        self.value.orderFrontRegardless()
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func makeKey() -> T {
        self.value.makeKey()
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func makeMain() -> T {
        self.value.makeMain()
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func becomeKey() -> T {
        self.value.becomeKey()
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func resignKey() -> T {
        self.value.resignKey()
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func becomeMain() -> T {
        self.value.becomeMain()
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func resignMain() -> T {
        self.value.resignMain()
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func performClose(_ sender: Any?) -> T {
        self.value.performClose(sender)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func performMiniaturize(_ sender: Any?) -> T {
        self.value.performMiniaturize(sender)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func performZoom(_ sender: Any?) -> T {
        self.value.performZoom(sender)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func printWindow(_ sender: Any?) -> T {
        self.value.printWindow(sender)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func setDynamicDepthLimit(_ flag: Swift.Bool) -> T {
        self.value.setDynamicDepthLimit(flag)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func invalidateShadow() -> T {
        self.value.invalidateShadow()
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func disableScreenUpdatesUntilFlush() -> T {
        self.value.disableScreenUpdatesUntilFlush()
        return self.value
    }

    @available(macOS 10.7, *)
    @discardableResult
    @_disfavoredOverload
    public func toggleFullScreen(_ sender: Any?) -> T {
        self.value.toggleFullScreen(sender)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func setFrame(from string: AppKit.NSWindow.PersistableFrameDescriptor) -> T {
        self.value.setFrame(from: string)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func saveFrame(usingName name: AppKit.NSWindow.FrameAutosaveName) -> T {
        self.value.saveFrame(usingName: name)
        return self.value
    }

    @available(macOS 10.9, *)
    @discardableResult
    @_disfavoredOverload
    public func beginSheet(_ sheetWindow: AppKit.NSWindow, completionHandler handler: ((AppKit.NSApplication.ModalResponse) -> Swift.Void)? = nil) -> T {
        self.value.beginSheet(sheetWindow, completionHandler: handler)
        return self.value
    }

    @available(macOS 10.9, *)
    @discardableResult
    @_disfavoredOverload
    public func beginCriticalSheet(_ sheetWindow: AppKit.NSWindow, completionHandler handler: ((AppKit.NSApplication.ModalResponse) -> Swift.Void)? = nil) -> T {
        self.value.beginCriticalSheet(sheetWindow, completionHandler: handler)
        return self.value
    }

    @available(macOS 10.9, *)
    @discardableResult
    @_disfavoredOverload
    public func endSheet(_ sheetWindow: AppKit.NSWindow) -> T {
        self.value.endSheet(sheetWindow)
        return self.value
    }

    @available(macOS 10.9, *)
    @discardableResult
    @_disfavoredOverload
    public func endSheet(_ sheetWindow: AppKit.NSWindow, returnCode: AppKit.NSApplication.ModalResponse) -> T {
        self.value.endSheet(sheetWindow, returnCode: returnCode)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func addChildWindow(_ childWin: AppKit.NSWindow, ordered place: AppKit.NSWindow.OrderingMode) -> T {
        self.value.addChildWindow(childWin, ordered: place)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func removeChildWindow(_ childWin: AppKit.NSWindow) -> T {
        self.value.removeChildWindow(childWin)
        return self.value
    }

    @available(macOS 10.11, *)
    @discardableResult
    @_disfavoredOverload
    public func performDrag(with event: AppKit.NSEvent) -> T {
        self.value.performDrag(with: event)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func selectNextKeyView(_ sender: Any?) -> T {
        self.value.selectNextKeyView(sender)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func selectPreviousKeyView(_ sender: Any?) -> T {
        self.value.selectPreviousKeyView(sender)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func selectKeyView(following view: AppKit.NSView) -> T {
        self.value.selectKeyView(following: view)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func selectKeyView(preceding view: AppKit.NSView) -> T {
        self.value.selectKeyView(preceding: view)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func disableKeyEquivalentForDefaultButtonCell() -> T {
        self.value.disableKeyEquivalentForDefaultButtonCell()
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func enableKeyEquivalentForDefaultButtonCell() -> T {
        self.value.enableKeyEquivalentForDefaultButtonCell()
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func recalculateKeyViewLoop() -> T {
        self.value.recalculateKeyViewLoop()
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func toggleToolbarShown(_ sender: Any?) -> T {
        self.value.toggleToolbarShown(sender)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func runToolbarCustomizationPalette(_ sender: Any?) -> T {
        self.value.runToolbarCustomizationPalette(sender)
        return self.value
    }

    @available(macOS 10.12, *)
    @discardableResult
    @_disfavoredOverload
    public func addTabbedWindow(_ window: AppKit.NSWindow, ordered: AppKit.NSWindow.OrderingMode) -> T {
        self.value.addTabbedWindow(window, ordered: ordered)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityElement(_ accessibilityElement: Swift.Bool) -> T {
        self.value.setAccessibilityElement(accessibilityElement)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityFrame(_ accessibilityFrame: Foundation.NSRect) -> T {
        self.value.setAccessibilityFrame(accessibilityFrame)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityFocused(_ accessibilityFocused: Swift.Bool) -> T {
        self.value.setAccessibilityFocused(accessibilityFocused)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityActivationPoint(_ accessibilityActivationPoint: Foundation.NSPoint) -> T {
        self.value.setAccessibilityActivationPoint(accessibilityActivationPoint)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityTopLevelUIElement(_ accessibilityTopLevelUIElement: Any?) -> T {
        self.value.setAccessibilityTopLevelUIElement(accessibilityTopLevelUIElement)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityURL(_ accessibilityURL: Foundation.URL?) -> T {
        self.value.setAccessibilityURL(accessibilityURL)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityValue(_ accessibilityValue: Any?) -> T {
        self.value.setAccessibilityValue(accessibilityValue)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityValueDescription(_ accessibilityValueDescription: Swift.String?) -> T {
        self.value.setAccessibilityValueDescription(accessibilityValueDescription)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityVisibleChildren(_ accessibilityVisibleChildren: [Any]?) -> T {
        self.value.setAccessibilityVisibleChildren(accessibilityVisibleChildren)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilitySubrole(_ accessibilitySubrole: AppKit.NSAccessibility.Subrole?) -> T {
        self.value.setAccessibilitySubrole(accessibilitySubrole)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityTitle(_ accessibilityTitle: Swift.String?) -> T {
        self.value.setAccessibilityTitle(accessibilityTitle)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityTitleUIElement(_ accessibilityTitleUIElement: Any?) -> T {
        self.value.setAccessibilityTitleUIElement(accessibilityTitleUIElement)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityNextContents(_ accessibilityNextContents: [Any]?) -> T {
        self.value.setAccessibilityNextContents(accessibilityNextContents)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityOrientation(_ accessibilityOrientation: AppKit.NSAccessibilityOrientation) -> T {
        self.value.setAccessibilityOrientation(accessibilityOrientation)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityOverflowButton(_ accessibilityOverflowButton: Any?) -> T {
        self.value.setAccessibilityOverflowButton(accessibilityOverflowButton)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityParent(_ accessibilityParent: Any?) -> T {
        self.value.setAccessibilityParent(accessibilityParent)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityPlaceholderValue(_ accessibilityPlaceholderValue: Swift.String?) -> T {
        self.value.setAccessibilityPlaceholderValue(accessibilityPlaceholderValue)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityPreviousContents(_ accessibilityPreviousContents: [Any]?) -> T {
        self.value.setAccessibilityPreviousContents(accessibilityPreviousContents)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityRole(_ accessibilityRole: AppKit.NSAccessibility.Role?) -> T {
        self.value.setAccessibilityRole(accessibilityRole)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityRoleDescription(_ accessibilityRoleDescription: Swift.String?) -> T {
        self.value.setAccessibilityRoleDescription(accessibilityRoleDescription)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilitySearchButton(_ accessibilitySearchButton: Any?) -> T {
        self.value.setAccessibilitySearchButton(accessibilitySearchButton)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilitySearchMenu(_ accessibilitySearchMenu: Any?) -> T {
        self.value.setAccessibilitySearchMenu(accessibilitySearchMenu)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilitySelected(_ accessibilitySelected: Swift.Bool) -> T {
        self.value.setAccessibilitySelected(accessibilitySelected)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilitySelectedChildren(_ accessibilitySelectedChildren: [Any]?) -> T {
        self.value.setAccessibilitySelectedChildren(accessibilitySelectedChildren)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityServesAsTitleForUIElements(_ accessibilityServesAsTitleForUIElements: [Any]?) -> T {
        self.value.setAccessibilityServesAsTitleForUIElements(accessibilityServesAsTitleForUIElements)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityShownMenu(_ accessibilityShownMenu: Any?) -> T {
        self.value.setAccessibilityShownMenu(accessibilityShownMenu)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityMinValue(_ accessibilityMinValue: Any?) -> T {
        self.value.setAccessibilityMinValue(accessibilityMinValue)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityMaxValue(_ accessibilityMaxValue: Any?) -> T {
        self.value.setAccessibilityMaxValue(accessibilityMaxValue)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityLinkedUIElements(_ accessibilityLinkedUIElements: [Any]?) -> T {
        self.value.setAccessibilityLinkedUIElements(accessibilityLinkedUIElements)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityWindow(_ accessibilityWindow: Any?) -> T {
        self.value.setAccessibilityWindow(accessibilityWindow)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityIdentifier(_ accessibilityIdentifier: Swift.String?) -> T {
        self.value.setAccessibilityIdentifier(accessibilityIdentifier)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityHelp(_ accessibilityHelp: Swift.String?) -> T {
        self.value.setAccessibilityHelp(accessibilityHelp)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityFilename(_ accessibilityFilename: Swift.String?) -> T {
        self.value.setAccessibilityFilename(accessibilityFilename)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityExpanded(_ accessibilityExpanded: Swift.Bool) -> T {
        self.value.setAccessibilityExpanded(accessibilityExpanded)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityEdited(_ accessibilityEdited: Swift.Bool) -> T {
        self.value.setAccessibilityEdited(accessibilityEdited)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityEnabled(_ accessibilityEnabled: Swift.Bool) -> T {
        self.value.setAccessibilityEnabled(accessibilityEnabled)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityChildren(_ accessibilityChildren: [Any]?) -> T {
        self.value.setAccessibilityChildren(accessibilityChildren)
        return self.value
    }

    @available(macOS 10.13, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityChildrenInNavigationOrder(_ accessibilityChildrenInNavigationOrder: [AppKit.NSAccessibilityElementProtocol]?) -> T {
        self.value.setAccessibilityChildrenInNavigationOrder(accessibilityChildrenInNavigationOrder)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityClearButton(_ accessibilityClearButton: Any?) -> T {
        self.value.setAccessibilityClearButton(accessibilityClearButton)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityCancelButton(_ accessibilityCancelButton: Any?) -> T {
        self.value.setAccessibilityCancelButton(accessibilityCancelButton)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityProtectedContent(_ accessibilityProtectedContent: Swift.Bool) -> T {
        self.value.setAccessibilityProtectedContent(accessibilityProtectedContent)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityContents(_ accessibilityContents: [Any]?) -> T {
        self.value.setAccessibilityContents(accessibilityContents)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityLabel(_ accessibilityLabel: Swift.String?) -> T {
        self.value.setAccessibilityLabel(accessibilityLabel)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityAlternateUIVisible(_ accessibilityAlternateUIVisible: Swift.Bool) -> T {
        self.value.setAccessibilityAlternateUIVisible(accessibilityAlternateUIVisible)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilitySharedFocusElements(_ accessibilitySharedFocusElements: [Any]?) -> T {
        self.value.setAccessibilitySharedFocusElements(accessibilitySharedFocusElements)
        return self.value
    }

    @available(macOS 10.12, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityRequired(_ accessibilityRequired: Swift.Bool) -> T {
        self.value.setAccessibilityRequired(accessibilityRequired)
        return self.value
    }

    @available(macOS 10.13, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityCustomRotors(_ accessibilityCustomRotors: [AppKit.NSAccessibilityCustomRotor]) -> T {
        self.value.setAccessibilityCustomRotors(accessibilityCustomRotors)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityApplicationFocusedUIElement(_ accessibilityApplicationFocusedUIElement: Any?) -> T {
        self.value.setAccessibilityApplicationFocusedUIElement(accessibilityApplicationFocusedUIElement)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityMainWindow(_ accessibilityMainWindow: Any?) -> T {
        self.value.setAccessibilityMainWindow(accessibilityMainWindow)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityHidden(_ accessibilityHidden: Swift.Bool) -> T {
        self.value.setAccessibilityHidden(accessibilityHidden)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityFrontmost(_ accessibilityFrontmost: Swift.Bool) -> T {
        self.value.setAccessibilityFrontmost(accessibilityFrontmost)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityFocusedWindow(_ accessibilityFocusedWindow: Any?) -> T {
        self.value.setAccessibilityFocusedWindow(accessibilityFocusedWindow)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityWindows(_ accessibilityWindows: [Any]?) -> T {
        self.value.setAccessibilityWindows(accessibilityWindows)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityExtrasMenuBar(_ accessibilityExtrasMenuBar: Any?) -> T {
        self.value.setAccessibilityExtrasMenuBar(accessibilityExtrasMenuBar)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityMenuBar(_ accessibilityMenuBar: Any?) -> T {
        self.value.setAccessibilityMenuBar(accessibilityMenuBar)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityColumnTitles(_ accessibilityColumnTitles: [Any]?) -> T {
        self.value.setAccessibilityColumnTitles(accessibilityColumnTitles)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityOrderedByRow(_ accessibilityOrderedByRow: Swift.Bool) -> T {
        self.value.setAccessibilityOrderedByRow(accessibilityOrderedByRow)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityHorizontalUnits(_ accessibilityHorizontalUnits: AppKit.NSAccessibilityUnits) -> T {
        self.value.setAccessibilityHorizontalUnits(accessibilityHorizontalUnits)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityVerticalUnits(_ accessibilityVerticalUnits: AppKit.NSAccessibilityUnits) -> T {
        self.value.setAccessibilityVerticalUnits(accessibilityVerticalUnits)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityHorizontalUnitDescription(_ accessibilityHorizontalUnitDescription: Swift.String?) -> T {
        self.value.setAccessibilityHorizontalUnitDescription(accessibilityHorizontalUnitDescription)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityVerticalUnitDescription(_ accessibilityVerticalUnitDescription: Swift.String?) -> T {
        self.value.setAccessibilityVerticalUnitDescription(accessibilityVerticalUnitDescription)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityHandles(_ accessibilityHandles: [Any]?) -> T {
        self.value.setAccessibilityHandles(accessibilityHandles)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityWarningValue(_ accessibilityWarningValue: Any?) -> T {
        self.value.setAccessibilityWarningValue(accessibilityWarningValue)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityCriticalValue(_ accessibilityCriticalValue: Any?) -> T {
        self.value.setAccessibilityCriticalValue(accessibilityCriticalValue)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityDisclosed(_ accessibilityDisclosed: Swift.Bool) -> T {
        self.value.setAccessibilityDisclosed(accessibilityDisclosed)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityDisclosedByRow(_ accessibilityDisclosedByRow: Any?) -> T {
        self.value.setAccessibilityDisclosedByRow(accessibilityDisclosedByRow)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityDisclosedRows(_ accessibilityDisclosedRows: Any?) -> T {
        self.value.setAccessibilityDisclosedRows(accessibilityDisclosedRows)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityDisclosureLevel(_ accessibilityDisclosureLevel: Swift.Int) -> T {
        self.value.setAccessibilityDisclosureLevel(accessibilityDisclosureLevel)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityMarkerUIElements(_ accessibilityMarkerUIElements: [Any]?) -> T {
        self.value.setAccessibilityMarkerUIElements(accessibilityMarkerUIElements)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityMarkerValues(_ accessibilityMarkerValues: Any?) -> T {
        self.value.setAccessibilityMarkerValues(accessibilityMarkerValues)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityMarkerGroupUIElement(_ accessibilityMarkerGroupUIElement: Any?) -> T {
        self.value.setAccessibilityMarkerGroupUIElement(accessibilityMarkerGroupUIElement)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityUnits(_ accessibilityUnits: AppKit.NSAccessibilityUnits) -> T {
        self.value.setAccessibilityUnits(accessibilityUnits)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityUnitDescription(_ accessibilityUnitDescription: Swift.String?) -> T {
        self.value.setAccessibilityUnitDescription(accessibilityUnitDescription)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityRulerMarkerType(_ accessibilityRulerMarkerType: AppKit.NSAccessibilityRulerMarkerType) -> T {
        self.value.setAccessibilityRulerMarkerType(accessibilityRulerMarkerType)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityMarkerTypeDescription(_ accessibilityMarkerTypeDescription: Swift.String?) -> T {
        self.value.setAccessibilityMarkerTypeDescription(accessibilityMarkerTypeDescription)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityHorizontalScrollBar(_ accessibilityHorizontalScrollBar: Any?) -> T {
        self.value.setAccessibilityHorizontalScrollBar(accessibilityHorizontalScrollBar)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityVerticalScrollBar(_ accessibilityVerticalScrollBar: Any?) -> T {
        self.value.setAccessibilityVerticalScrollBar(accessibilityVerticalScrollBar)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityAllowedValues(_ accessibilityAllowedValues: [Foundation.NSNumber]?) -> T {
        self.value.setAccessibilityAllowedValues(accessibilityAllowedValues)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityLabelUIElements(_ accessibilityLabelUIElements: [Any]?) -> T {
        self.value.setAccessibilityLabelUIElements(accessibilityLabelUIElements)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityLabelValue(_ accessibilityLabelValue: Swift.Float) -> T {
        self.value.setAccessibilityLabelValue(accessibilityLabelValue)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilitySplitters(_ accessibilitySplitters: [Any]?) -> T {
        self.value.setAccessibilitySplitters(accessibilitySplitters)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityDecrementButton(_ accessibilityDecrementButton: Any?) -> T {
        self.value.setAccessibilityDecrementButton(accessibilityDecrementButton)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityIncrementButton(_ accessibilityIncrementButton: Any?) -> T {
        self.value.setAccessibilityIncrementButton(accessibilityIncrementButton)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityTabs(_ accessibilityTabs: [Any]?) -> T {
        self.value.setAccessibilityTabs(accessibilityTabs)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityHeader(_ accessibilityHeader: Any?) -> T {
        self.value.setAccessibilityHeader(accessibilityHeader)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityColumnCount(_ accessibilityColumnCount: Swift.Int) -> T {
        self.value.setAccessibilityColumnCount(accessibilityColumnCount)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityRowCount(_ accessibilityRowCount: Swift.Int) -> T {
        self.value.setAccessibilityRowCount(accessibilityRowCount)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityIndex(_ accessibilityIndex: Swift.Int) -> T {
        self.value.setAccessibilityIndex(accessibilityIndex)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityColumns(_ accessibilityColumns: [Any]?) -> T {
        self.value.setAccessibilityColumns(accessibilityColumns)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityRows(_ accessibilityRows: [Any]?) -> T {
        self.value.setAccessibilityRows(accessibilityRows)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityVisibleRows(_ accessibilityVisibleRows: [Any]?) -> T {
        self.value.setAccessibilityVisibleRows(accessibilityVisibleRows)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilitySelectedRows(_ accessibilitySelectedRows: [Any]?) -> T {
        self.value.setAccessibilitySelectedRows(accessibilitySelectedRows)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityVisibleColumns(_ accessibilityVisibleColumns: [Any]?) -> T {
        self.value.setAccessibilityVisibleColumns(accessibilityVisibleColumns)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilitySelectedColumns(_ accessibilitySelectedColumns: [Any]?) -> T {
        self.value.setAccessibilitySelectedColumns(accessibilitySelectedColumns)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilitySortDirection(_ accessibilitySortDirection: AppKit.NSAccessibilitySortDirection) -> T {
        self.value.setAccessibilitySortDirection(accessibilitySortDirection)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityRowHeaderUIElements(_ accessibilityRowHeaderUIElements: [Any]?) -> T {
        self.value.setAccessibilityRowHeaderUIElements(accessibilityRowHeaderUIElements)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilitySelectedCells(_ accessibilitySelectedCells: [Any]?) -> T {
        self.value.setAccessibilitySelectedCells(accessibilitySelectedCells)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityVisibleCells(_ accessibilityVisibleCells: [Any]?) -> T {
        self.value.setAccessibilityVisibleCells(accessibilityVisibleCells)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityColumnHeaderUIElements(_ accessibilityColumnHeaderUIElements: [Any]?) -> T {
        self.value.setAccessibilityColumnHeaderUIElements(accessibilityColumnHeaderUIElements)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityRowIndexRange(_ accessibilityRowIndexRange: Foundation.NSRange) -> T {
        self.value.setAccessibilityRowIndexRange(accessibilityRowIndexRange)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityColumnIndexRange(_ accessibilityColumnIndexRange: Foundation.NSRange) -> T {
        self.value.setAccessibilityColumnIndexRange(accessibilityColumnIndexRange)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityInsertionPointLineNumber(_ accessibilityInsertionPointLineNumber: Swift.Int) -> T {
        self.value.setAccessibilityInsertionPointLineNumber(accessibilityInsertionPointLineNumber)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilitySharedCharacterRange(_ accessibilitySharedCharacterRange: Foundation.NSRange) -> T {
        self.value.setAccessibilitySharedCharacterRange(accessibilitySharedCharacterRange)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilitySharedTextUIElements(_ accessibilitySharedTextUIElements: [Any]?) -> T {
        self.value.setAccessibilitySharedTextUIElements(accessibilitySharedTextUIElements)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityVisibleCharacterRange(_ accessibilityVisibleCharacterRange: Foundation.NSRange) -> T {
        self.value.setAccessibilityVisibleCharacterRange(accessibilityVisibleCharacterRange)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityNumberOfCharacters(_ accessibilityNumberOfCharacters: Swift.Int) -> T {
        self.value.setAccessibilityNumberOfCharacters(accessibilityNumberOfCharacters)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilitySelectedText(_ accessibilitySelectedText: Swift.String?) -> T {
        self.value.setAccessibilitySelectedText(accessibilitySelectedText)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilitySelectedTextRange(_ accessibilitySelectedTextRange: Foundation.NSRange) -> T {
        self.value.setAccessibilitySelectedTextRange(accessibilitySelectedTextRange)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilitySelectedTextRanges(_ accessibilitySelectedTextRanges: [Foundation.NSValue]?) -> T {
        self.value.setAccessibilitySelectedTextRanges(accessibilitySelectedTextRanges)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityToolbarButton(_ accessibilityToolbarButton: Any?) -> T {
        self.value.setAccessibilityToolbarButton(accessibilityToolbarButton)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityModal(_ accessibilityModal: Swift.Bool) -> T {
        self.value.setAccessibilityModal(accessibilityModal)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityProxy(_ accessibilityProxy: Any?) -> T {
        self.value.setAccessibilityProxy(accessibilityProxy)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityMain(_ accessibilityMain: Swift.Bool) -> T {
        self.value.setAccessibilityMain(accessibilityMain)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityFullScreenButton(_ accessibilityFullScreenButton: Any?) -> T {
        self.value.setAccessibilityFullScreenButton(accessibilityFullScreenButton)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityGrowArea(_ accessibilityGrowArea: Any?) -> T {
        self.value.setAccessibilityGrowArea(accessibilityGrowArea)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityDocument(_ accessibilityDocument: Swift.String?) -> T {
        self.value.setAccessibilityDocument(accessibilityDocument)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityDefaultButton(_ accessibilityDefaultButton: Any?) -> T {
        self.value.setAccessibilityDefaultButton(accessibilityDefaultButton)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityCloseButton(_ accessibilityCloseButton: Any?) -> T {
        self.value.setAccessibilityCloseButton(accessibilityCloseButton)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityZoomButton(_ accessibilityZoomButton: Any?) -> T {
        self.value.setAccessibilityZoomButton(accessibilityZoomButton)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityMinimizeButton(_ accessibilityMinimizeButton: Any?) -> T {
        self.value.setAccessibilityMinimizeButton(accessibilityMinimizeButton)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityMinimized(_ accessibilityMinimized: Swift.Bool) -> T {
        self.value.setAccessibilityMinimized(accessibilityMinimized)
        return self.value
    }

    @available(macOS 10.13, *)
    @discardableResult
    @_disfavoredOverload
    public func setAccessibilityCustomActions(_ accessibilityCustomActions: [AppKit.NSAccessibilityCustomAction]?) -> T {
        self.value.setAccessibilityCustomActions(accessibilityCustomActions)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func disableSnapshotRestoration() -> T {
        self.value.disableSnapshotRestoration()
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func enableSnapshotRestoration() -> T {
        self.value.enableSnapshotRestoration()
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func setIsMiniaturized(_ flag: Swift.Bool) -> T {
        self.value.setIsMiniaturized(flag)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func setIsVisible(_ flag: Swift.Bool) -> T {
        self.value.setIsVisible(flag)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func setIsZoomed(_ flag: Swift.Bool) -> T {
        self.value.setIsZoomed(flag)
        return self.value
    }

    @available(macOS 10.7, *)
    @discardableResult
    @_disfavoredOverload
    public func visualizeConstraints(_ constraints: [AppKit.NSLayoutConstraint]?) -> T {
        self.value.visualizeConstraints(constraints)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func setAnchorAttribute(_ attr: AppKit.NSLayoutConstraint.Attribute, for orientation: AppKit.NSLayoutConstraint.Orientation) -> T {
        self.value.setAnchorAttribute(attr, for: orientation)
        return self.value
    }

    @available(macOS 10.7, *)
    @discardableResult
    @_disfavoredOverload
    public func updateConstraintsIfNeeded() -> T {
        self.value.updateConstraintsIfNeeded()
        return self.value
    }

    @available(macOS 10.7, *)
    @discardableResult
    @_disfavoredOverload
    public func layoutIfNeeded() -> T {
        self.value.layoutIfNeeded()
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    @available(macOS, introduced: 10.0, deprecated: 10.13, message: "This method shouldn’t be used as it doesn’t work in all drawing situations; instead, a subview should be used that implements the desired drawing behavior")
    public func cacheImage(in rect: Foundation.NSRect) -> T {
        self.value.cacheImage(in: rect)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    @available(macOS, introduced: 10.0, deprecated: 10.13, message: "This method shouldn’t be used as it doesn’t work in all drawing situations; instead, a subview should be used that implements the desired drawing behavior")
    public func restoreCachedImage() -> T {
        self.value.restoreCachedImage()
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    @available(macOS, introduced: 10.0, deprecated: 10.13, message: "This method shouldn’t be used as it doesn’t work in all drawing situations; instead, a subview should be used that implements the desired drawing behavior")
    public func discardCachedImage() -> T {
        self.value.discardCachedImage()
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    @available(macOS, introduced: 10.0, deprecated: 10.10, message: "This method does not do anything and should not be called.")
    public func useOptimizedDrawing(_ flag: Swift.Bool) -> T {
        self.value.useOptimizedDrawing(flag)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    @available(macOS, introduced: 10.0, deprecated: 10.14, message: "Use +[NSAnimationContext runAnimationGroup:completionHandler:] to perform atomic updates across runloop invocations.")
    public func disableFlushing() -> T {
        self.value.disableFlushing()
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    @available(macOS, introduced: 10.0, deprecated: 10.14, message: "Use +[NSAnimationContext runAnimationGroup:completionHandler:] to perform atomic updates across runloop invocations.")
    public func enableFlushing() -> T {
        self.value.enableFlushing()
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    @available(macOS, introduced: 10.0, deprecated: 10.14, message: "Allow AppKit's automatic deferred display mechanism to take care of flushing any graphics contexts as needed.")
    public func flush() -> T {
        self.value.flush()
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    @available(macOS, introduced: 10.0, deprecated: 10.14, message: "Allow AppKit's automatic deferred display mechanism to take care of flushing any graphics contexts as needed.")
    public func flushIfNeeded() -> T {
        self.value.flushIfNeeded()
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func registerForDraggedTypes(_ newTypes: [AppKit.NSPasteboard.PasteboardType]) -> T {
        self.value.registerForDraggedTypes(newTypes)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func unregisterDraggedTypes() -> T {
        self.value.unregisterDraggedTypes()
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func disableCursorRects() -> T {
        self.value.disableCursorRects()
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func enableCursorRects() -> T {
        self.value.enableCursorRects()
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func discardCursorRects() -> T {
        self.value.discardCursorRects()
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func invalidateCursorRects(for view: AppKit.NSView) -> T {
        self.value.invalidateCursorRects(for: view)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func resetCursorRects() -> T {
        self.value.resetCursorRects()
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func trackEvents(matching mask: AppKit.NSEvent.EventTypeMask, timeout: Foundation.TimeInterval, mode: Foundation.RunLoop.Mode, handler trackingHandler: (AppKit.NSEvent?, Swift.UnsafeMutablePointer<ObjectiveC.ObjCBool>) -> Swift.Void) -> T {
        self.value.trackEvents(matching: mask, timeout: timeout, mode: mode, handler: trackingHandler)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func discardEvents(matching mask: AppKit.NSEvent.EventTypeMask, before lastEvent: AppKit.NSEvent?) -> T {
        self.value.discardEvents(matching: mask, before: lastEvent)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func postEvent(_ event: AppKit.NSEvent, atStart flag: Swift.Bool) -> T {
        self.value.postEvent(event, atStart: flag)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func sendEvent(_ event: AppKit.NSEvent) -> T {
        self.value.sendEvent(event)
        return self.value
    }
}

#endif
