
// Generated file
// DO NOT EDIT THIS FILE

#if canImport(Cocoa)
import Cocoa

extension Modify.DynamicMemberWrap where T: NSGestureRecognizer {
    @discardableResult
    @_disfavoredOverload
    public func reset() -> T {
        value.reset()
        return value
    }

    @discardableResult
    @_disfavoredOverload
    public func mouseDown(with event: NSEvent) -> T {
        value.mouseDown(with: event)
        return value
    }

    @discardableResult
    @_disfavoredOverload
    public func rightMouseDown(with event: NSEvent) -> T {
        value.rightMouseDown(with: event)
        return value
    }

    @discardableResult
    @_disfavoredOverload
    public func otherMouseDown(with event: NSEvent) -> T {
        value.otherMouseDown(with: event)
        return value
    }

    @discardableResult
    @_disfavoredOverload
    public func mouseUp(with event: NSEvent) -> T {
        value.mouseUp(with: event)
        return value
    }

    @discardableResult
    @_disfavoredOverload
    public func rightMouseUp(with event: NSEvent) -> T {
        value.rightMouseUp(with: event)
        return value
    }

    @discardableResult
    @_disfavoredOverload
    public func otherMouseUp(with event: NSEvent) -> T {
        value.otherMouseUp(with: event)
        return value
    }

    @discardableResult
    @_disfavoredOverload
    public func mouseDragged(with event: NSEvent) -> T {
        value.mouseDragged(with: event)
        return value
    }

    @discardableResult
    @_disfavoredOverload
    public func rightMouseDragged(with event: NSEvent) -> T {
        value.rightMouseDragged(with: event)
        return value
    }

    @discardableResult
    @_disfavoredOverload
    public func otherMouseDragged(with event: NSEvent) -> T {
        value.otherMouseDragged(with: event)
        return value
    }

    @discardableResult
    @_disfavoredOverload
    public func keyDown(with event: NSEvent) -> T {
        value.keyDown(with: event)
        return value
    }

    @discardableResult
    @_disfavoredOverload
    public func keyUp(with event: NSEvent) -> T {
        value.keyUp(with: event)
        return value
    }

    @discardableResult
    @_disfavoredOverload
    public func flagsChanged(with event: NSEvent) -> T {
        value.flagsChanged(with: event)
        return value
    }

    @discardableResult
    @_disfavoredOverload
    public func tabletPoint(with event: NSEvent) -> T {
        value.tabletPoint(with: event)
        return value
    }

    @discardableResult
    @_disfavoredOverload
    public func magnify(with event: NSEvent) -> T {
        value.magnify(with: event)
        return value
    }

    @discardableResult
    @_disfavoredOverload
    public func rotate(with event: NSEvent) -> T {
        value.rotate(with: event)
        return value
    }

    @available(macOS 10.10.3, *)
    @discardableResult
    @_disfavoredOverload
    public func pressureChange(with event: NSEvent) -> T {
        value.pressureChange(with: event)
        return value
    }

    @available(macOS 10.12.2, *)
    @discardableResult
    @_disfavoredOverload
    public func touchesBegan(with event: NSEvent) -> T {
        value.touchesBegan(with: event)
        return value
    }

    @available(macOS 10.12.2, *)
    @discardableResult
    @_disfavoredOverload
    public func touchesMoved(with event: NSEvent) -> T {
        value.touchesMoved(with: event)
        return value
    }

    @available(macOS 10.12.2, *)
    @discardableResult
    @_disfavoredOverload
    public func touchesEnded(with event: NSEvent) -> T {

        return value
    }

    @available(macOS 10.12.2, *)
    @discardableResult
    @_disfavoredOverload
    public func touchesCancelled(with event: NSEvent) -> T {
        value.touchesCancelled(with: event)
        return value
    }
}

#endif
