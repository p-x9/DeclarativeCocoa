
// Generated file
// DO NOT EDIT THIS FILE

#if canImport(Cocoa)
import Cocoa

extension Modify.DynamicMemberWrap where T: NSPopUpButtonCell {
    @discardableResult
    @_disfavoredOverload
    public func addItem(withTitle title: Swift.String) -> T {
        self.value.addItem(withTitle: title)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func addItems(withTitles itemTitles: [Swift.String]) -> T {
        self.value.addItems(withTitles: itemTitles)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func insertItem(withTitle title: Swift.String, at index: Swift.Int) -> T {
        self.value.insertItem(withTitle: title, at: index)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func removeItem(withTitle title: Swift.String) -> T {
        self.value.removeItem(withTitle: title)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func removeItem(at index: Swift.Int) -> T {
        self.value.removeItem(at: index)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func removeAllItems() -> T {
        self.value.removeAllItems()
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func select(_ item: AppKit.NSMenuItem?) -> T {
        self.value.select(item)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func selectItem(at index: Swift.Int) -> T {
        self.value.selectItem(at: index)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func selectItem(withTitle title: Swift.String) -> T {
        self.value.selectItem(withTitle: title)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func setTitle(_ string: Swift.String?) -> T {
        self.value.setTitle(string)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func synchronizeTitleAndSelectedItem() -> T {
        self.value.synchronizeTitleAndSelectedItem()
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func attachPopUp(withFrame cellFrame: Foundation.NSRect, in controlView: AppKit.NSView) -> T {
        self.value.attachPopUp(withFrame: cellFrame, in: controlView)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func dismissPopUp() -> T {
        self.value.dismissPopUp()
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func performClick(withFrame frame: Foundation.NSRect, in controlView: AppKit.NSView) -> T {
        self.value.performClick(withFrame: frame, in: controlView)
        return self.value
    }
}

#endif
