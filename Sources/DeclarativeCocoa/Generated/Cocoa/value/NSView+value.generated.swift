
// Generated file
// DO NOT EDIT THIS FILE

#if canImport(Cocoa)
import Cocoa

extension Modify.DynamicMemberWrap where T: NSView {
    @discardableResult
    @_disfavoredOverload
    public func getRectsBeingDrawn(_ rects: UnsafeMutablePointer<UnsafePointer<NSRect>?>?, count: UnsafeMutablePointer<Int>?) -> T {
        self.value.getRectsBeingDrawn(rects, count: count)
        return self.value
    }

    @available(macOS 10.5, *)
    @discardableResult
    @_disfavoredOverload
    public func viewDidHide() -> T {
        self.value.viewDidHide()
        return self.value
    }

    @available(macOS 10.5, *)
    @discardableResult
    @_disfavoredOverload
    public func viewDidUnhide() -> T {
        self.value.viewDidUnhide()
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func addSubview(_ view: NSView) -> T {
        self.value.addSubview(view)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func addSubview(_ view: NSView, positioned place: NSWindow.OrderingMode, relativeTo otherView: NSView?) -> T {
        self.value.addSubview(view, positioned: place, relativeTo: otherView)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func sortSubviews(_ compare: @convention(c) (NSView, NSView, UnsafeMutableRawPointer?) -> ComparisonResult, context: UnsafeMutableRawPointer?) -> T {
        self.value.sortSubviews(compare, context: context)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func viewWillMove(toWindow newWindow: NSWindow?) -> T {
        self.value.viewWillMove(toWindow: newWindow)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func viewDidMoveToWindow() -> T {
        self.value.viewDidMoveToWindow()
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func viewWillMove(toSuperview newSuperview: NSView?) -> T {
        self.value.viewWillMove(toSuperview: newSuperview)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func viewDidMoveToSuperview() -> T {
        self.value.viewDidMoveToSuperview()
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func didAddSubview(_ subview: NSView) -> T {
        self.value.didAddSubview(subview)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func willRemoveSubview(_ subview: NSView) -> T {
        self.value.willRemoveSubview(subview)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func removeFromSuperview() -> T {
        self.value.removeFromSuperview()
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func replaceSubview(_ oldView: NSView, with newView: NSView) -> T {
        self.value.replaceSubview(oldView, with: newView)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func removeFromSuperviewWithoutNeedingDisplay() -> T {
        self.value.removeFromSuperviewWithoutNeedingDisplay()
        return self.value
    }

    @available(macOS 10.7, *)
    @discardableResult
    @_disfavoredOverload
    public func viewDidChangeBackingProperties() -> T {
        self.value.viewDidChangeBackingProperties()
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func resizeSubviews(withOldSize oldSize: NSSize) -> T {
        self.value.resizeSubviews(withOldSize: oldSize)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func resize(withOldSuperviewSize oldSize: NSSize) -> T {
        self.value.resize(withOldSuperviewSize: oldSize)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func setFrameOrigin(_ newOrigin: NSPoint) -> T {
        self.value.setFrameOrigin(newOrigin)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func setFrameSize(_ newSize: NSSize) -> T {
        self.value.setFrameSize(newSize)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func setBoundsOrigin(_ newOrigin: NSPoint) -> T {
        self.value.setBoundsOrigin(newOrigin)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func setBoundsSize(_ newSize: NSSize) -> T {
        self.value.setBoundsSize(newSize)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func translateOrigin(to translation: NSPoint) -> T {
        self.value.translateOrigin(to: translation)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func scaleUnitSquare(to newUnitSize: NSSize) -> T {
        self.value.scaleUnitSquare(to: newUnitSize)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func rotate(byDegrees angle: CGFloat) -> T {
        self.value.rotate(byDegrees: angle)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func setNeedsDisplay(_ invalidRect: NSRect) -> T {
        self.value.setNeedsDisplay(invalidRect)
        return self.value
    }

    @available(macOS, introduced: 10.0, deprecated: 10.14, message: "To draw, subclass NSView and implement -drawRect:; AppKit's automatic deferred display mechanism will call -drawRect: as necessary to display the view.")
    @discardableResult
    @_disfavoredOverload
    public func lockFocus() -> T {
        self.value.lockFocus()
        return self.value
    }

    @available(macOS, introduced: 10.0, deprecated: 10.14, message: "To draw, subclass NSView and implement -drawRect:; AppKit's automatic deferred display mechanism will call -drawRect: as necessary to display the view.")
    @discardableResult
    @_disfavoredOverload
    public func unlockFocus() -> T {
        self.value.unlockFocus()
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func display() -> T {
        self.value.display()
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func displayIfNeeded() -> T {
        self.value.displayIfNeeded()
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func displayIfNeededIgnoringOpacity() -> T {
        self.value.displayIfNeededIgnoringOpacity()
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func display(_ rect: NSRect) -> T {
        self.value.display(rect)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func displayIfNeeded(_ rect: NSRect) -> T {
        self.value.displayIfNeeded(rect)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func displayIgnoringOpacity(_ rect: NSRect) -> T {
        self.value.displayIgnoringOpacity(rect)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func displayIfNeededIgnoringOpacity(_ rect: NSRect) -> T {
        self.value.displayIfNeededIgnoringOpacity(rect)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func draw(_ dirtyRect: NSRect) -> T {
        self.value.draw(dirtyRect)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func displayIgnoringOpacity(_ rect: NSRect, in context: NSGraphicsContext) -> T {
        self.value.displayIgnoringOpacity(rect, in: context)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func cacheDisplay(in rect: NSRect, to bitmapImageRep: NSBitmapImageRep) -> T {
        self.value.cacheDisplay(in: rect, to: bitmapImageRep)
        return self.value
    }

    @available(macOS 10.5, *)
    @discardableResult
    @_disfavoredOverload
    public func viewWillDraw() -> T {
        self.value.viewWillDraw()
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func scroll(_ point: NSPoint) -> T {
        self.value.scroll(point)
        return self.value
    }

    @available(macOS, introduced: 10.0, deprecated: 10.14, message: "Use NSScrollView to achieve scrolling views.")
    @discardableResult
    @_disfavoredOverload
    public func scroll(_ rect: NSRect, by delta: NSSize) -> T {
        self.value.scroll(rect, by: delta)
        return self.value
    }

    @available(macOS 10.5, *)
    @discardableResult
    @_disfavoredOverload
    public func translateRectsNeedingDisplay(in clipRect: NSRect, by delta: NSSize) -> T {
        self.value.translateRectsNeedingDisplay(in: clipRect, by: delta)
        return self.value
    }

    @available(macOS 10.8, *)
    @discardableResult
    @_disfavoredOverload
    public func updateLayer() -> T {
        self.value.updateLayer()
        return self.value
    }

    @available(macOS 10.7, *)
    @discardableResult
    @_disfavoredOverload
    public func layoutSubtreeIfNeeded() -> T {
        self.value.layoutSubtreeIfNeeded()
        return self.value
    }

    @available(macOS 10.7, *)
    @discardableResult
    @_disfavoredOverload
    public func layout() -> T {
        self.value.layout()
        return self.value
    }

    @available(macOS 10.11, *)
    @discardableResult
    @_disfavoredOverload
    public func willOpenMenu(_ menu: NSMenu, with event: NSEvent) -> T {
        self.value.willOpenMenu(menu, with: event)
        return self.value
    }

    @available(macOS 10.11, *)
    @discardableResult
    @_disfavoredOverload
    public func didCloseMenu(_ menu: NSMenu, with event: NSEvent?) -> T {
        self.value.didCloseMenu(menu, with: event)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func removeToolTip(_ tag: NSView.ToolTipTag) -> T {
        self.value.removeToolTip(tag)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func removeAllToolTips() -> T {
        self.value.removeAllToolTips()
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func viewWillStartLiveResize() -> T {
        self.value.viewWillStartLiveResize()
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func viewDidEndLiveResize() -> T {
        self.value.viewDidEndLiveResize()
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func getRectsExposedDuringLiveResize(_ exposedRects: UnsafeMutablePointer<NSRect>, count: UnsafeMutablePointer<Int>) -> T {
        self.value.getRectsExposedDuringLiveResize(exposedRects, count: count)
        return self.value
    }

    @available(macOS 10.7, *)
    @discardableResult
    @_disfavoredOverload
    public func prepareForReuse() -> T {
        self.value.prepareForReuse()
        return self.value
    }

    @available(macOS 10.9, *)
    @discardableResult
    @_disfavoredOverload
    public func prepareContent(in rect: NSRect) -> T {
        self.value.prepareContent(in: rect)
        return self.value
    }

    @available(macOS 10.14, *)
    @discardableResult
    @_disfavoredOverload
    public func viewDidChangeEffectiveAppearance() -> T {
        self.value.viewDidChangeEffectiveAppearance()
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func setKeyboardFocusRingNeedsDisplay(_ rect: NSRect) -> T {
        self.value.setKeyboardFocusRingNeedsDisplay(rect)
        return self.value
    }

    @available(macOS 10.7, *)
    @discardableResult
    @_disfavoredOverload
    public func drawFocusRingMask() -> T {
        self.value.drawFocusRingMask()
        return self.value
    }

    @available(macOS 10.7, *)
    @discardableResult
    @_disfavoredOverload
    public func noteFocusRingMaskChanged() -> T {
        self.value.noteFocusRingMaskChanged()
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func writeEPS(inside rect: NSRect, to pasteboard: NSPasteboard) -> T {
        self.value.writeEPS(inside: rect, to: pasteboard)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func writePDF(inside rect: NSRect, to pasteboard: NSPasteboard) -> T {
        self.value.writePDF(inside: rect, to: pasteboard)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func printView(_ sender: Any?) -> T {
        self.value.printView(sender)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func adjustPageWidthNew(_ newRight: UnsafeMutablePointer<CGFloat>, left oldLeft: CGFloat, right oldRight: CGFloat, limit rightLimit: CGFloat) -> T {
        self.value.adjustPageWidthNew(newRight, left: oldLeft, right: oldRight, limit: rightLimit)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func adjustPageHeightNew(_ newBottom: UnsafeMutablePointer<CGFloat>, top oldTop: CGFloat, bottom oldBottom: CGFloat, limit bottomLimit: CGFloat) -> T {
        self.value.adjustPageHeightNew(newBottom, top: oldTop, bottom: oldBottom, limit: bottomLimit)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func drawPageBorder(with borderSize: NSSize) -> T {
        self.value.drawPageBorder(with: borderSize)
        return self.value
    }

    @available(macOS, introduced: 10.0, deprecated: 10.14, message: "This is never invoked and the NSView implementation does nothing")
    @discardableResult
    @_disfavoredOverload
    public func drawSheetBorder(with borderSize: NSSize) -> T {
        self.value.drawSheetBorder(with: borderSize)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func beginDocument() -> T {
        self.value.beginDocument()
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func endDocument() -> T {
        self.value.endDocument()
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func beginPage(in rect: NSRect, atPlacement location: NSPoint) -> T {
        self.value.beginPage(in: rect, atPlacement: location)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func endPage() -> T {
        self.value.endPage()
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func registerForDraggedTypes(_ newTypes: [NSPasteboard.PasteboardType]) -> T {
        self.value.registerForDraggedTypes(newTypes)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func unregisterDraggedTypes() -> T {
        self.value.unregisterDraggedTypes()
        return self.value
    }

    @available(macOS 10.5, *)
    @discardableResult
    @_disfavoredOverload
    public func exitFullScreenMode(options: [NSView.FullScreenModeOptionKey : Any]? = nil) -> T {
        self.value.exitFullScreenMode(options: options)
        return self.value
    }

    @available(macOS 10.6, *)
    @discardableResult
    @_disfavoredOverload
    public func showDefinition(for attrString: NSAttributedString?, at textBaselineOrigin: NSPoint) -> T {
        self.value.showDefinition(for: attrString, at: textBaselineOrigin)
        return self.value
    }

    @available(macOS 10.6, *)
    @discardableResult
    @_disfavoredOverload
    public func showDefinition(for attrString: NSAttributedString?, range targetRange: NSRange, options: [NSView.DefinitionOptionKey : Any]? = nil, baselineOriginProvider originProvider: ((NSRange) -> NSPoint)? = nil) -> T {
        self.value.showDefinition(for: attrString, range: targetRange, options: options, baselineOriginProvider: originProvider)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func addGestureRecognizer(_ gestureRecognizer: NSGestureRecognizer) -> T {
        self.value.addGestureRecognizer(gestureRecognizer)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func removeGestureRecognizer(_ gestureRecognizer: NSGestureRecognizer) -> T {
        self.value.removeGestureRecognizer(gestureRecognizer)
        return self.value
    }

    @available(macOS 10.5, *)
    @discardableResult
    @_disfavoredOverload
    public func addTrackingArea(_ trackingArea: NSTrackingArea) -> T {
        self.value.addTrackingArea(trackingArea)
        return self.value
    }

    @available(macOS 10.5, *)
    @discardableResult
    @_disfavoredOverload
    public func removeTrackingArea(_ trackingArea: NSTrackingArea) -> T {
        self.value.removeTrackingArea(trackingArea)
        return self.value
    }

    @available(macOS 10.5, *)
    @discardableResult
    @_disfavoredOverload
    public func updateTrackingAreas() -> T {
        self.value.updateTrackingAreas()
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func addCursorRect(_ rect: NSRect, cursor object: NSCursor) -> T {
        self.value.addCursorRect(rect, cursor: object)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func removeCursorRect(_ rect: NSRect, cursor object: NSCursor) -> T {
        self.value.removeCursorRect(rect, cursor: object)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func discardCursorRects() -> T {
        self.value.discardCursorRects()
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func resetCursorRects() -> T {
        self.value.resetCursorRects()
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func removeTrackingRect(_ tag: NSView.TrackingRectTag) -> T {
        self.value.removeTrackingRect(tag)
        return self.value
    }

    @available(macOS, introduced: 10.0, deprecated: 10.10)
    @discardableResult
    @_disfavoredOverload
    public func allocateGState() -> T {
        self.value.allocateGState()
        return self.value
    }

    @available(macOS, introduced: 10.0, deprecated: 10.10)
    @discardableResult
    @_disfavoredOverload
    public func releaseGState() -> T {
        self.value.releaseGState()
        return self.value
    }

    @available(macOS, introduced: 10.0, deprecated: 10.10)
    @discardableResult
    @_disfavoredOverload
    public func setUpGState() -> T {
        self.value.setUpGState()
        return self.value
    }

    @available(macOS, introduced: 10.0, deprecated: 10.10)
    @discardableResult
    @_disfavoredOverload
    public func renewGState() -> T {
        self.value.renewGState()
        return self.value
    }
}

#endif
