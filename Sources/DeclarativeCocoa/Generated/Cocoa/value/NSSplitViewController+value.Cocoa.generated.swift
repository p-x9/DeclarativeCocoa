
// Generated file
// DO NOT EDIT THIS FILE

#if canImport(Cocoa)
import Cocoa

extension Modify.DynamicMemberWrap where T: NSSplitViewController {
    @discardableResult
    @_disfavoredOverload
    public func addSplitViewItem(_ splitViewItem: AppKit.NSSplitViewItem) -> T {
        self.value.addSplitViewItem(splitViewItem)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func insertSplitViewItem(_ splitViewItem: AppKit.NSSplitViewItem, at index: Swift.Int) -> T {
        self.value.insertSplitViewItem(splitViewItem, at: index)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func removeSplitViewItem(_ splitViewItem: AppKit.NSSplitViewItem) -> T {
        self.value.removeSplitViewItem(splitViewItem)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    @_Concurrency.MainActor public func splitView(_ splitView: AppKit.NSSplitView, resizeSubviewsWithOldSize oldSize: Foundation.NSSize) -> T {
        self.value.splitView(splitView, resizeSubviewsWithOldSize: oldSize)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    @_Concurrency.MainActor public func splitViewWillResizeSubviews(_ notification: Foundation.Notification) -> T {
        self.value.splitViewWillResizeSubviews(notification)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    @_Concurrency.MainActor public func splitViewDidResizeSubviews(_ notification: Foundation.Notification) -> T {
        self.value.splitViewDidResizeSubviews(notification)
        return self.value
    }
}

#endif
