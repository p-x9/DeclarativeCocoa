
// Generated file
// DO NOT EDIT THIS FILE

#if canImport(Cocoa)
import Cocoa

extension Modify.DynamicMemberWrap where T: NSControl {
    @discardableResult
    @_disfavoredOverload
    public func sizeToFit() -> T {
        self.value.sizeToFit()
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func takeIntValueFrom(_ sender: Any?) -> T {
        self.value.takeIntValueFrom(sender)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func takeFloatValueFrom(_ sender: Any?) -> T {
        self.value.takeFloatValueFrom(sender)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func takeDoubleValueFrom(_ sender: Any?) -> T {
        self.value.takeDoubleValueFrom(sender)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func takeStringValueFrom(_ sender: Any?) -> T {
        self.value.takeStringValueFrom(sender)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func takeObjectValueFrom(_ sender: Any?) -> T {
        self.value.takeObjectValueFrom(sender)
        return self.value
    }

    @available(macOS 10.5, *)
    @discardableResult
    @_disfavoredOverload
    public func takeIntegerValueFrom(_ sender: Any?) -> T {
        self.value.takeIntegerValueFrom(sender)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func mouseDown(with event: NSEvent) -> T {
        self.value.mouseDown(with: event)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func performClick(_ sender: Any?) -> T {
        self.value.performClick(sender)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func draw(withExpansionFrame contentFrame: NSRect, in view: NSView) -> T {
        self.value.draw(withExpansionFrame: contentFrame, in: view)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func validateEditing() -> T {
        self.value.validateEditing()
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func edit(withFrame rect: NSRect, editor textObj: NSText, delegate: Any?, event: NSEvent) -> T {
        self.value.edit(withFrame: rect, editor: textObj, delegate: delegate, event: event)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func select(withFrame rect: NSRect, editor textObj: NSText, delegate: Any?, start selStart: Int, length selLength: Int) -> T {
        self.value.select(withFrame: rect, editor: textObj, delegate: delegate, start: selStart, length: selLength)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func endEditing(_ textObj: NSText) -> T {
        self.value.endEditing(textObj)
        return self.value
    }

    @available(macOS, introduced: 10.0, deprecated: 10.14, message: "Set the needsDisplay property to YES instead")
    @discardableResult
    @_disfavoredOverload
    public func setNeedsDisplay() -> T {
        self.value.setNeedsDisplay()
        return self.value
    }

    @available(macOS, introduced: 10.0, deprecated: 10.14, message: "Override -layout instead. This method should never be called")
    @discardableResult
    @_disfavoredOverload
    public func calcSize() -> T {
        self.value.calcSize()
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func updateCell(_ cell: NSCell) -> T {
        self.value.updateCell(cell)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func updateCellInside(_ cell: NSCell) -> T {
        self.value.updateCellInside(cell)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func drawCellInside(_ cell: NSCell) -> T {
        self.value.drawCellInside(cell)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func drawCell(_ cell: NSCell) -> T {
        self.value.drawCell(cell)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func selectCell(_ cell: NSCell) -> T {
        self.value.selectCell(cell)
        return self.value
    }
}

#endif
