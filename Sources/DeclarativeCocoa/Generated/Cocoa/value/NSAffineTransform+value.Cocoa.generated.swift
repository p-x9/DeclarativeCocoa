
// Generated file
// DO NOT EDIT THIS FILE

#if canImport(Cocoa)
import Cocoa

extension Modify.DynamicMemberWrap where T: NSAffineTransform {
    @discardableResult
    @_disfavoredOverload
    public func translateX(by deltaX: CoreFoundation.CGFloat, yBy deltaY: CoreFoundation.CGFloat) -> T {
        self.value.translateX(by: deltaX, yBy: deltaY)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func rotate(byDegrees angle: CoreFoundation.CGFloat) -> T {
        self.value.rotate(byDegrees: angle)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func rotate(byRadians angle: CoreFoundation.CGFloat) -> T {
        self.value.rotate(byRadians: angle)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func scale(by scale: CoreFoundation.CGFloat) -> T {
        self.value.scale(by: scale)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func scaleX(by scaleX: CoreFoundation.CGFloat, yBy scaleY: CoreFoundation.CGFloat) -> T {
        self.value.scaleX(by: scaleX, yBy: scaleY)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func invert() -> T {
        self.value.invert()
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func append(_ transform: Foundation.AffineTransform) -> T {
        self.value.append(transform)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func prepend(_ transform: Foundation.AffineTransform) -> T {
        self.value.prepend(transform)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func encode(with coder: Foundation.NSCoder) -> T {
        self.value.encode(with: coder)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func set() -> T {
        self.value.set()
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func concat() -> T {
        self.value.concat()
        return self.value
    }
}

#endif
