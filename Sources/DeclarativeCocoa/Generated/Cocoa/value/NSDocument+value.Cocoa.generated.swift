
// Generated file
// DO NOT EDIT THIS FILE

#if canImport(Cocoa)
import Cocoa

extension Modify.DynamicMemberWrap where T: NSDocument {
    @available(macOS 10.7, *)
    @discardableResult
    @_disfavoredOverload
    public func performActivity(withSynchronousWaiting waitSynchronously: Swift.Bool, using block: @escaping (@escaping () -> Swift.Void) -> Swift.Void) -> T {
        self.value.performActivity(withSynchronousWaiting: waitSynchronously, using: block)
        return self.value
    }

    @available(macOS 10.7, *)
    @discardableResult
    @_disfavoredOverload
    public func continueActivity(_ block: () -> Swift.Void) -> T {
        self.value.continueActivity(block)
        return self.value
    }

    @available(macOS 10.7, *)
    @discardableResult
    @_disfavoredOverload
    nonisolated public func continueAsynchronousWorkOnMainThread(_ block: @escaping () -> Swift.Void) -> T {
        self.value.continueAsynchronousWorkOnMainThread(block)
        return self.value
    }

    @available(macOS 10.7, *)
    @discardableResult
    @_disfavoredOverload
    nonisolated public func performSynchronousFileAccess(_ block: () -> Swift.Void) -> T {
        self.value.performSynchronousFileAccess(block)
        return self.value
    }

    @available(macOS 10.7, *)
    @discardableResult
    @_disfavoredOverload
    nonisolated public func performAsynchronousFileAccess(_ block: @escaping (@escaping () -> Swift.Void) -> Swift.Void) -> T {
        self.value.performAsynchronousFileAccess(block)
        return self.value
    }

    @available(macOS 10.7, *)
    @discardableResult
    @_disfavoredOverload
    nonisolated public func unblockUserInteraction() -> T {
        self.value.unblockUserInteraction()
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func save(withDelegate delegate: Any?, didSave didSaveSelector: ObjectiveC.Selector?, contextInfo: Swift.UnsafeMutableRawPointer?) -> T {
        self.value.save(withDelegate: delegate, didSave: didSaveSelector, contextInfo: contextInfo)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func runModalSavePanel(for saveOperation: AppKit.NSDocument.SaveOperationType, delegate: Any?, didSave didSaveSelector: ObjectiveC.Selector?, contextInfo: Swift.UnsafeMutableRawPointer?) -> T {
        self.value.runModalSavePanel(for: saveOperation, delegate: delegate, didSave: didSaveSelector, contextInfo: contextInfo)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func save(to url: Foundation.URL, ofType typeName: Swift.String, for saveOperation: AppKit.NSDocument.SaveOperationType, delegate: Any?, didSave didSaveSelector: ObjectiveC.Selector?, contextInfo: Swift.UnsafeMutableRawPointer?) -> T {
        self.value.save(to: url, ofType: typeName, for: saveOperation, delegate: delegate, didSave: didSaveSelector, contextInfo: contextInfo)
        return self.value
    }

    @available(macOS 10.7, *)
    @discardableResult
    @_disfavoredOverload
    public func save(to url: Foundation.URL, ofType typeName: Swift.String, for saveOperation: AppKit.NSDocument.SaveOperationType, completionHandler: @escaping (Swift.Error?) -> Swift.Void) -> T {
        self.value.save(to: url, ofType: typeName, for: saveOperation, completionHandler: completionHandler)
        return self.value
    }

    @available(macOS 10.7, *)
    @discardableResult
    @_disfavoredOverload
    public func scheduleAutosaving() -> T {
        self.value.scheduleAutosaving()
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func autosave(withDelegate delegate: Any?, didAutosave didAutosaveSelector: ObjectiveC.Selector?, contextInfo: Swift.UnsafeMutableRawPointer?) -> T {
        self.value.autosave(withDelegate: delegate, didAutosave: didAutosaveSelector, contextInfo: contextInfo)
        return self.value
    }

    @available(macOS 10.7, *)
    @discardableResult
    @_disfavoredOverload
    public func autosave(withImplicitCancellability autosavingIsImplicitlyCancellable: Swift.Bool, completionHandler: @escaping (Swift.Error?) -> Swift.Void) -> T {
        self.value.autosave(withImplicitCancellability: autosavingIsImplicitlyCancellable, completionHandler: completionHandler)
        return self.value
    }

    @available(macOS 10.12, *)
    @discardableResult
    @_disfavoredOverload
    public func stopBrowsingVersions(completionHandler: (() -> Swift.Void)? = nil) -> T {
        self.value.stopBrowsingVersions(completionHandler: completionHandler)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func canClose(withDelegate delegate: Any, shouldClose shouldCloseSelector: ObjectiveC.Selector?, contextInfo: Swift.UnsafeMutableRawPointer?) -> T {
        self.value.canClose(withDelegate: delegate, shouldClose: shouldCloseSelector, contextInfo: contextInfo)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func close() -> T {
        self.value.close()
        return self.value
    }

    @available(macOS 10.7, *)
    @discardableResult
    @_disfavoredOverload
    public func duplicate(withDelegate delegate: Any?, didDuplicate didDuplicateSelector: ObjectiveC.Selector?, contextInfo: Swift.UnsafeMutableRawPointer?) -> T {
        self.value.duplicate(withDelegate: delegate, didDuplicate: didDuplicateSelector, contextInfo: contextInfo)
        return self.value
    }

    @available(macOS 10.8, *)
    @discardableResult
    @_disfavoredOverload
    public func move(completionHandler: ((Swift.Bool) -> Swift.Void)? = nil) -> T {
        self.value.move(completionHandler: completionHandler)
        return self.value
    }

    @available(macOS 10.8, *)
    @discardableResult
    @_disfavoredOverload
    public func move(to url: Foundation.URL, completionHandler: ((Swift.Error?) -> Swift.Void)? = nil) -> T {
        self.value.move(to: url, completionHandler: completionHandler)
        return self.value
    }

    @available(macOS 10.8, *)
    @discardableResult
    @_disfavoredOverload
    public func lock(completionHandler: ((Swift.Bool) -> Swift.Void)? = nil) -> T {
        self.value.lock(completionHandler: completionHandler)
        return self.value
    }

    @available(macOS 10.8, *)
    @discardableResult
    @_disfavoredOverload
    public func lock(completionHandler: ((Swift.Error?) -> Swift.Void)? = nil) -> T {
        self.value.lock(completionHandler: completionHandler)
        return self.value
    }

    @available(macOS 10.8, *)
    @discardableResult
    @_disfavoredOverload
    public func unlock(completionHandler: ((Swift.Bool) -> Swift.Void)? = nil) -> T {
        self.value.unlock(completionHandler: completionHandler)
        return self.value
    }

    @available(macOS 10.8, *)
    @discardableResult
    @_disfavoredOverload
    public func unlock(completionHandler: ((Swift.Error?) -> Swift.Void)? = nil) -> T {
        self.value.unlock(completionHandler: completionHandler)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func runModalPageLayout(with printInfo: AppKit.NSPrintInfo, delegate: Any?, didRun didRunSelector: ObjectiveC.Selector?, contextInfo: Swift.UnsafeMutableRawPointer?) -> T {
        self.value.runModalPageLayout(with: printInfo, delegate: delegate, didRun: didRunSelector, contextInfo: contextInfo)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func print(withSettings printSettings: [AppKit.NSPrintInfo.AttributeKey : Any], showPrintPanel: Swift.Bool, delegate: Any?, didPrint didPrintSelector: ObjectiveC.Selector?, contextInfo: Swift.UnsafeMutableRawPointer?) -> T {
        self.value.print(withSettings: printSettings, showPrintPanel: showPrintPanel, delegate: delegate, didPrint: didPrintSelector, contextInfo: contextInfo)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func runModalPrintOperation(_ printOperation: AppKit.NSPrintOperation, delegate: Any?, didRun didRunSelector: ObjectiveC.Selector?, contextInfo: Swift.UnsafeMutableRawPointer?) -> T {
        self.value.runModalPrintOperation(printOperation, delegate: delegate, didRun: didRunSelector, contextInfo: contextInfo)
        return self.value
    }

    @available(macOS 10.13, *)
    @discardableResult
    @_disfavoredOverload
    public func share(with sharingService: AppKit.NSSharingService, completionHandler: ((Swift.Bool) -> Swift.Void)? = nil) -> T {
        self.value.share(with: sharingService, completionHandler: completionHandler)
        return self.value
    }

    @available(macOS 10.13, *)
    @discardableResult
    @_disfavoredOverload
    public func prepare(_ sharingServicePicker: AppKit.NSSharingServicePicker) -> T {
        self.value.prepare(sharingServicePicker)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func updateChangeCount(_ change: AppKit.NSDocument.ChangeType) -> T {
        self.value.updateChangeCount(change)
        return self.value
    }

    @available(macOS 10.7, *)
    @discardableResult
    @_disfavoredOverload
    public func updateChangeCount(withToken changeCountToken: Any, for saveOperation: AppKit.NSDocument.SaveOperationType) -> T {
        self.value.updateChangeCount(withToken: changeCountToken, for: saveOperation)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func presentError(_ error: Swift.Error, modalFor window: AppKit.NSWindow, delegate: Any?, didPresent didPresentSelector: ObjectiveC.Selector?, contextInfo: Swift.UnsafeMutableRawPointer?) -> T {
        self.value.presentError(error, modalFor: window, delegate: delegate, didPresent: didPresentSelector, contextInfo: contextInfo)
        return self.value
    }

    @available(macOS 10.7, *)
    @discardableResult
    @_disfavoredOverload
    public func willNotPresentError(_ error: Swift.Error) -> T {
        self.value.willNotPresentError(error)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func makeWindowControllers() -> T {
        self.value.makeWindowControllers()
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func windowControllerWillLoadNib(_ windowController: AppKit.NSWindowController) -> T {
        self.value.windowControllerWillLoadNib(windowController)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func windowControllerDidLoadNib(_ windowController: AppKit.NSWindowController) -> T {
        self.value.windowControllerDidLoadNib(windowController)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func setWindow(_ window: AppKit.NSWindow?) -> T {
        self.value.setWindow(window)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func addWindowController(_ windowController: AppKit.NSWindowController) -> T {
        self.value.addWindowController(windowController)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func removeWindowController(_ windowController: AppKit.NSWindowController) -> T {
        self.value.removeWindowController(windowController)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func showWindows() -> T {
        self.value.showWindows()
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func shouldCloseWindowController(_ windowController: AppKit.NSWindowController, delegate: Any?, shouldClose shouldCloseSelector: ObjectiveC.Selector?, contextInfo: Swift.UnsafeMutableRawPointer?) -> T {
        self.value.shouldCloseWindowController(windowController, delegate: delegate, shouldClose: shouldCloseSelector, contextInfo: contextInfo)
        return self.value
    }

    @available(macOS 10.7, *)
    @discardableResult
    @_disfavoredOverload
    nonisolated public func relinquishPresentedItem(toReader reader: @escaping @Sendable ((() -> Swift.Void)?) -> Swift.Void) -> T {
        self.value.relinquishPresentedItem(toReader: reader)
        return self.value
    }

    @available(macOS 10.7, *)
    @discardableResult
    @_disfavoredOverload
    nonisolated public func relinquishPresentedItem(toWriter writer: @escaping @Sendable ((() -> Swift.Void)?) -> Swift.Void) -> T {
        self.value.relinquishPresentedItem(toWriter: writer)
        return self.value
    }

    @available(macOS 10.7, *)
    @discardableResult
    @_disfavoredOverload
    nonisolated public func savePresentedItemChanges(completionHandler: @escaping @Sendable (Swift.Error?) -> Swift.Void) -> T {
        self.value.savePresentedItemChanges(completionHandler: completionHandler)
        return self.value
    }

    @available(macOS 10.7, *)
    @discardableResult
    @_disfavoredOverload
    nonisolated public func accommodatePresentedItemDeletion(completionHandler: @escaping @Sendable (Swift.Error?) -> Swift.Void) -> T {
        self.value.accommodatePresentedItemDeletion(completionHandler: completionHandler)
        return self.value
    }

    @available(macOS 10.7, *)
    @discardableResult
    @_disfavoredOverload
    nonisolated public func presentedItemDidMove(to newURL: Foundation.URL) -> T {
        self.value.presentedItemDidMove(to: newURL)
        return self.value
    }

    @available(macOS 10.7, *)
    @discardableResult
    @_disfavoredOverload
    nonisolated public func presentedItemDidChange() -> T {
        self.value.presentedItemDidChange()
        return self.value
    }

    @available(macOS 10.13, *)
    @discardableResult
    @_disfavoredOverload
    nonisolated public func presentedItemDidChangeUbiquityAttributes(_ attributes: Swift.Set<Foundation.URLResourceKey>) -> T {
        self.value.presentedItemDidChangeUbiquityAttributes(attributes)
        return self.value
    }

    @available(macOS 10.7, *)
    @discardableResult
    @_disfavoredOverload
    nonisolated public func presentedItemDidGain(_ version: Foundation.NSFileVersion) -> T {
        self.value.presentedItemDidGain(version)
        return self.value
    }

    @available(macOS 10.7, *)
    @discardableResult
    @_disfavoredOverload
    nonisolated public func presentedItemDidLose(_ version: Foundation.NSFileVersion) -> T {
        self.value.presentedItemDidLose(version)
        return self.value
    }

    @available(macOS 10.7, *)
    @discardableResult
    @_disfavoredOverload
    nonisolated public func presentedItemDidResolveConflict(_ version: Foundation.NSFileVersion) -> T {
        self.value.presentedItemDidResolveConflict(version)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    @_Concurrency.MainActor public func objectDidBeginEditing(_ editor: AppKit.NSEditor) -> T {
        self.value.objectDidBeginEditing(editor)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    @_Concurrency.MainActor public func objectDidEndEditing(_ editor: AppKit.NSEditor) -> T {
        self.value.objectDidEndEditing(editor)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func accommodatePresentedSubitemDeletion(at url: Foundation.URL, completionHandler: @escaping @Sendable (Swift.Error?) -> Swift.Void) -> T {
        self.value.accommodatePresentedSubitemDeletion(at: url, completionHandler: completionHandler)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func presentedSubitemDidAppear(at url: Foundation.URL) -> T {
        self.value.presentedSubitemDidAppear(at: url)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func presentedSubitem(at oldURL: Foundation.URL, didMoveTo newURL: Foundation.URL) -> T {
        self.value.presentedSubitem(at: oldURL, didMoveTo: newURL)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func presentedSubitemDidChange(at url: Foundation.URL) -> T {
        self.value.presentedSubitemDidChange(at: url)
        return self.value
    }

    @available(macOS 10.7, *)
    @discardableResult
    @_disfavoredOverload
    public func presentedSubitem(at url: Foundation.URL, didGain version: Foundation.NSFileVersion) -> T {
        self.value.presentedSubitem(at: url, didGain: version)
        return self.value
    }

    @available(macOS 10.7, *)
    @discardableResult
    @_disfavoredOverload
    public func presentedSubitem(at url: Foundation.URL, didLose version: Foundation.NSFileVersion) -> T {
        self.value.presentedSubitem(at: url, didLose: version)
        return self.value
    }

    @available(macOS 10.7, *)
    @discardableResult
    @_disfavoredOverload
    public func presentedSubitem(at url: Foundation.URL, didResolve version: Foundation.NSFileVersion) -> T {
        self.value.presentedSubitem(at: url, didResolve: version)
        return self.value
    }

    @available(macOS 10.7, *)
    @discardableResult
    @_disfavoredOverload
    public func restoreWindow(withIdentifier identifier: AppKit.NSUserInterfaceItemIdentifier, state: Foundation.NSCoder, completionHandler: @escaping (AppKit.NSWindow?, Swift.Error?) -> Swift.Void) -> T {
        self.value.restoreWindow(withIdentifier: identifier, state: state, completionHandler: completionHandler)
        return self.value
    }

    @available(macOS 10.7, *)
    @discardableResult
    @_disfavoredOverload
    public func encodeRestorableState(with coder: Foundation.NSCoder) -> T {
        self.value.encodeRestorableState(with: coder)
        return self.value
    }

    @available(macOS 10.13, *)
    @discardableResult
    @_disfavoredOverload
    public func encodeRestorableState(with coder: Foundation.NSCoder, backgroundQueue queue: Foundation.OperationQueue) -> T {
        self.value.encodeRestorableState(with: coder, backgroundQueue: queue)
        return self.value
    }

    @available(macOS 10.7, *)
    @discardableResult
    @_disfavoredOverload
    public func restoreState(with coder: Foundation.NSCoder) -> T {
        self.value.restoreState(with: coder)
        return self.value
    }

    @available(macOS 10.7, *)
    @discardableResult
    @_disfavoredOverload
    public func invalidateRestorableState() -> T {
        self.value.invalidateRestorableState()
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func updateUserActivityState(_ activity: Foundation.NSUserActivity) -> T {
        self.value.updateUserActivityState(activity)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    @_Concurrency.MainActor public func restoreUserActivityState(_ userActivity: Foundation.NSUserActivity) -> T {
        self.value.restoreUserActivityState(userActivity)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    @available(macOS, unavailable, introduced: 10.0, deprecated: 10.4, message: "APIs deprecated as of macOS 10.9 and earlier are unavailable in Swift")
    public func printShowingPrintPanel(_ flag: Swift.Bool) -> T {
        self.value.printShowingPrintPanel(flag)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    @available(macOS, unavailable, introduced: 10.0, deprecated: 10.4, message: "APIs deprecated as of macOS 10.9 and earlier are unavailable in Swift")
    public func save(toFile fileName: Swift.String, saveOperation: AppKit.NSDocument.SaveOperationType, delegate: Any?, didSave didSaveSelector: ObjectiveC.Selector?, contextInfo: Swift.UnsafeMutableRawPointer?) -> T {
        self.value.save(toFile: fileName, saveOperation: saveOperation, delegate: delegate, didSave: didSaveSelector, contextInfo: contextInfo)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    @available(macOS, unavailable, introduced: 10.0, deprecated: 10.4, message: "APIs deprecated as of macOS 10.9 and earlier are unavailable in Swift")
    public func setFileName(_ fileName: Swift.String?) -> T {
        self.value.setFileName(fileName)
        return self.value
    }
}

#endif
