
// Generated file
// DO NOT EDIT THIS FILE

#if canImport(Cocoa)
import Cocoa

extension Modify.DynamicMemberWrap where T: NSImage {
    @discardableResult
    @_disfavoredOverload
    public func draw(at point: Foundation.NSPoint, from fromRect: Foundation.NSRect, operation op: AppKit.NSCompositingOperation, fraction delta: CoreFoundation.CGFloat) -> T {
        self.value.draw(at: point, from: fromRect, operation: op, fraction: delta)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func draw(in rect: Foundation.NSRect, from fromRect: Foundation.NSRect, operation op: AppKit.NSCompositingOperation, fraction delta: CoreFoundation.CGFloat) -> T {
        self.value.draw(in: rect, from: fromRect, operation: op, fraction: delta)
        return self.value
    }

    @available(macOS 10.6, *)
    @discardableResult
    @_disfavoredOverload
    public func draw(in dstSpacePortionRect: Foundation.NSRect, from srcSpacePortionRect: Foundation.NSRect, operation op: AppKit.NSCompositingOperation, fraction requestedAlpha: CoreFoundation.CGFloat, respectFlipped respectContextIsFlipped: Swift.Bool, hints: [AppKit.NSImageRep.HintKey : Any]?) -> T {
        self.value.draw(in: dstSpacePortionRect, from: srcSpacePortionRect, operation: op, fraction: requestedAlpha, respectFlipped: respectContextIsFlipped, hints: hints)
        return self.value
    }

    @available(macOS 10.9, *)
    @discardableResult
    @_disfavoredOverload
    public func draw(in rect: Foundation.NSRect) -> T {
        self.value.draw(in: rect)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func recache() -> T {
        self.value.recache()
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func addRepresentations(_ imageReps: [AppKit.NSImageRep]) -> T {
        self.value.addRepresentations(imageReps)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func addRepresentation(_ imageRep: AppKit.NSImageRep) -> T {
        self.value.addRepresentation(imageRep)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func removeRepresentation(_ imageRep: AppKit.NSImageRep) -> T {
        self.value.removeRepresentation(imageRep)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    @available(macOS, introduced: 10.0, deprecated: 100000, message: "This method is incompatible with resolution-independent drawing and should not be used. Instead, use +[NSImage imageWithSize:flipped:drawingHandler:] to create a block-based image describing the desired image drawing, or use +[NSGraphicsContext graphicsContextWithBitmapImageRep:] to manipulate specific bitmap image representations.")
    public func lockFocus() -> T {
        self.value.lockFocus()
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    @available(macOS, introduced: 10.6, deprecated: 100000, message: "This method is incompatible with resolution-independent drawing and should not be used. Instead, use +[NSImage imageWithSize:flipped:drawingHandler:] to create a block-based image describing the desired image drawing, or use +[NSGraphicsContext graphicsContextWithBitmapImageRep:] to manipulate specific bitmap image representations.")
    public func lockFocusFlipped(_ flipped: Swift.Bool) -> T {
        self.value.lockFocusFlipped(flipped)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    @available(macOS, introduced: 10.0, deprecated: 100000, message: "This method is incompatible with resolution-independent drawing and should not be used. Instead, use +[NSImage imageWithSize:flipped:drawingHandler:] to create a block-based image describing the desired image drawing, or use +[NSGraphicsContext graphicsContextWithBitmapImageRep:] to manipulate specific bitmap image representations.")
    public func unlockFocus() -> T {
        self.value.unlockFocus()
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func cancelIncrementalLoad() -> T {
        self.value.cancelIncrementalLoad()
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    @available(macOS, unavailable, introduced: 10.0, deprecated: 10.6, message: "Use -drawAtPoint:... or -drawInRect:... methods instead")
    public func dissolve(to point: Foundation.NSPoint, fraction: CoreFoundation.CGFloat) -> T {
        self.value.dissolve(to: point, fraction: fraction)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    @available(macOS, unavailable, introduced: 10.0, deprecated: 10.6, message: "Use -drawAtPoint:... or -drawInRect:... methods instead")
    public func dissolve(to point: Foundation.NSPoint, from rect: Foundation.NSRect, fraction: CoreFoundation.CGFloat) -> T {
        self.value.dissolve(to: point, from: rect, fraction: fraction)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    @available(macOS, unavailable, introduced: 10.0, deprecated: 10.6, message: "Use -drawAtPoint:... or -drawInRect:... methods instead")
    public func composite(to point: Foundation.NSPoint, operation op: AppKit.NSCompositingOperation) -> T {
        self.value.composite(to: point, operation: op)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    @available(macOS, unavailable, introduced: 10.0, deprecated: 10.6, message: "Use -drawAtPoint:... or -drawInRect:... methods instead")
    public func composite(to point: Foundation.NSPoint, from rect: Foundation.NSRect, operation op: AppKit.NSCompositingOperation) -> T {
        self.value.composite(to: point, from: rect, operation: op)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    @available(macOS, unavailable, introduced: 10.0, deprecated: 10.6, message: "Use -drawAtPoint:... or -drawInRect:... methods instead")
    public func composite(to point: Foundation.NSPoint, operation op: AppKit.NSCompositingOperation, fraction delta: CoreFoundation.CGFloat) -> T {
        self.value.composite(to: point, operation: op, fraction: delta)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    @available(macOS, unavailable, introduced: 10.0, deprecated: 10.6, message: "Use -drawAtPoint:... or -drawInRect:... methods instead")
    public func composite(to point: Foundation.NSPoint, from rect: Foundation.NSRect, operation op: AppKit.NSCompositingOperation, fraction delta: CoreFoundation.CGFloat) -> T {
        self.value.composite(to: point, from: rect, operation: op, fraction: delta)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    @available(macOS, unavailable, introduced: 10.0, deprecated: 10.6, message: "Create an image using +[NSImage imageWithSize:flipped:drawingHandler:], and begin your custom drawing with -[NSImageRep drawInRect:] instead.")
    public func lockFocus(onRepresentation imageRepresentation: AppKit.NSImageRep!) -> T {
        self.value.lockFocus(onRepresentation: imageRepresentation)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    @available(macOS, unavailable, introduced: 10.0, deprecated: 10.6, message: "You should be able to remove use of this method without any replacement.  See 10.6 AppKit release notes for details.")
    public func setScalesWhenResized(_ flag: Swift.Bool) -> T {
        self.value.setScalesWhenResized(flag)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    @available(macOS, unavailable, introduced: 10.0, deprecated: 10.6, message: "You should be able to remove use of this method without any replacement.  See 10.6 AppKit release notes for details.")
    public func setDataRetained(_ flag: Swift.Bool) -> T {
        self.value.setDataRetained(flag)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    @available(macOS, unavailable, introduced: 10.0, deprecated: 10.6, message: "You should be able to remove use of this method without any replacement.  See 10.6 AppKit release notes for details.")
    public func setCachedSeparately(_ flag: Swift.Bool) -> T {
        self.value.setCachedSeparately(flag)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    @available(macOS, unavailable, introduced: 10.0, deprecated: 10.6, message: "You should be able to remove use of this method without any replacement.  See 10.6 AppKit release notes for details.")
    public func setCacheDepthMatchesImageDepth(_ flag: Swift.Bool) -> T {
        self.value.setCacheDepthMatchesImageDepth(flag)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func encode(with coder: Foundation.NSCoder) -> T {
        self.value.encode(with: coder)
        return self.value
    }
}

#endif
