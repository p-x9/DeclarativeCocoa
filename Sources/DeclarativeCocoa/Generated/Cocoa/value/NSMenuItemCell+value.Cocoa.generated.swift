
// Generated file
// DO NOT EDIT THIS FILE

#if canImport(Cocoa)
import Cocoa

extension Modify.DynamicMemberWrap where T: NSMenuItemCell {
    @discardableResult
    @_disfavoredOverload
    public func calcSize() -> T {
        self.value.calcSize()
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func drawSeparatorItem(withFrame cellFrame: Foundation.NSRect, in controlView: AppKit.NSView) -> T {
        self.value.drawSeparatorItem(withFrame: cellFrame, in: controlView)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func drawStateImage(withFrame cellFrame: Foundation.NSRect, in controlView: AppKit.NSView) -> T {
        self.value.drawStateImage(withFrame: cellFrame, in: controlView)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func drawImage(withFrame cellFrame: Foundation.NSRect, in controlView: AppKit.NSView) -> T {
        self.value.drawImage(withFrame: cellFrame, in: controlView)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func drawTitle(withFrame cellFrame: Foundation.NSRect, in controlView: AppKit.NSView) -> T {
        self.value.drawTitle(withFrame: cellFrame, in: controlView)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func drawKeyEquivalent(withFrame cellFrame: Foundation.NSRect, in controlView: AppKit.NSView) -> T {
        self.value.drawKeyEquivalent(withFrame: cellFrame, in: controlView)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func drawBorderAndBackground(withFrame cellFrame: Foundation.NSRect, in controlView: AppKit.NSView) -> T {
        self.value.drawBorderAndBackground(withFrame: cellFrame, in: controlView)
        return self.value
    }
}

#endif
