
// Generated file
// DO NOT EDIT THIS FILE

#if canImport(Cocoa)
import Cocoa

extension Modify.DynamicMemberWrap where T: NSForm {
    @discardableResult
    @_disfavoredOverload
    public func setEntryWidth(_ width: CoreFoundation.CGFloat) -> T {
        self.value.setEntryWidth(width)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func setInterlineSpacing(_ spacing: CoreFoundation.CGFloat) -> T {
        self.value.setInterlineSpacing(spacing)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func setBordered(_ flag: Swift.Bool) -> T {
        self.value.setBordered(flag)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func setBezeled(_ flag: Swift.Bool) -> T {
        self.value.setBezeled(flag)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func setTitleAlignment(_ mode: AppKit.NSTextAlignment) -> T {
        self.value.setTitleAlignment(mode)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func setTextAlignment(_ mode: AppKit.NSTextAlignment) -> T {
        self.value.setTextAlignment(mode)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func setTitleFont(_ fontObj: AppKit.NSFont) -> T {
        self.value.setTitleFont(fontObj)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func setTextFont(_ fontObj: AppKit.NSFont) -> T {
        self.value.setTextFont(fontObj)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func drawCell(at index: Swift.Int) -> T {
        self.value.drawCell(at: index)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func removeEntry(at index: Swift.Int) -> T {
        self.value.removeEntry(at: index)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func selectText(at index: Swift.Int) -> T {
        self.value.selectText(at: index)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func setTitleBaseWritingDirection(_ writingDirection: AppKit.NSWritingDirection) -> T {
        self.value.setTitleBaseWritingDirection(writingDirection)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func setTextBaseWritingDirection(_ writingDirection: AppKit.NSWritingDirection) -> T {
        self.value.setTextBaseWritingDirection(writingDirection)
        return self.value
    }

    @available(macOS 10.8, *)
    @discardableResult
    @_disfavoredOverload
    public func setPreferredTextFieldWidth(_ preferredWidth: CoreFoundation.CGFloat) -> T {
        self.value.setPreferredTextFieldWidth(preferredWidth)
        return self.value
    }
}

#endif
