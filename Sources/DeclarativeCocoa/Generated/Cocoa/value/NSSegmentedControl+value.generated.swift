
// Generated file
// DO NOT EDIT THIS FILE

#if canImport(Cocoa)
import Cocoa

extension Modify.DynamicMemberWrap where T: NSSegmentedControl {
    @discardableResult
    @_disfavoredOverload
    public func setWidth(_ width: CGFloat, forSegment segment: Int) -> T {
        value.setWidth(width, forSegment: segment)
        return value
    }

    @discardableResult
    @_disfavoredOverload
    public func setImage(_ image: NSImage?, forSegment segment: Int) -> T {
        value.setImage(image, forSegment: segment)
        return value
    }

    @available(macOS 10.5, *)
    @discardableResult
    @_disfavoredOverload
    public func setImageScaling(_ scaling: NSImageScaling, forSegment segment: Int) -> T {
        value.setImageScaling(scaling, forSegment: segment)
        return value
    }

    @discardableResult
    @_disfavoredOverload
    public func setLabel(_ label: String, forSegment segment: Int) -> T {
        value.setLabel(label, forSegment: segment)
        return value
    }

    @discardableResult
    @_disfavoredOverload
    public func setMenu(_ menu: NSMenu?, forSegment segment: Int) -> T {
        value.setMenu(menu, forSegment: segment)
        return value
    }

    @discardableResult
    @_disfavoredOverload
    public func setSelected(_ selected: Bool, forSegment segment: Int) -> T {
        value.setSelected(selected, forSegment: segment)
        return value
    }

    @discardableResult
    @_disfavoredOverload
    public func setEnabled(_ enabled: Bool, forSegment segment: Int) -> T {
        value.setEnabled(enabled, forSegment: segment)
        return value
    }

    @available(macOS 10.13, *)
    @discardableResult
    @_disfavoredOverload
    public func setToolTip(_ toolTip: String?, forSegment segment: Int) -> T {
        value.setToolTip(toolTip, forSegment: segment)
        return value
    }

    @available(macOS 10.13, *)
    @discardableResult
    @_disfavoredOverload
    public func setTag(_ tag: Int, forSegment segment: Int) -> T {
        value.setTag(tag, forSegment: segment)
        return value
    }

    @available(macOS 10.13, *)
    @discardableResult
    @_disfavoredOverload
    public func setShowsMenuIndicator(_ showsMenuIndicator: Bool, forSegment segment: Int) -> T {
        value.setShowsMenuIndicator(showsMenuIndicator, forSegment: segment)
        return value
    }

    @available(macOS 10.13, *)
    @discardableResult
    @_disfavoredOverload
    public func setAlignment(_ alignment: NSTextAlignment, forSegment segment: Int) -> T {
        value.setAlignment(alignment, forSegment: segment)
        return value
    }

    @available(macOS 10.13, *)
    @discardableResult
    @_disfavoredOverload
    public func compress(withPrioritizedCompressionOptions prioritizedOptions: [NSUserInterfaceCompressionOptions]) -> T {
        value.compress(withPrioritizedCompressionOptions: prioritizedOptions)
        return value
    }
}

#endif
