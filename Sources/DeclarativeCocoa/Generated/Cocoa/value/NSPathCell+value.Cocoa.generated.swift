
// Generated file
// DO NOT EDIT THIS FILE

#if canImport(Cocoa)
import Cocoa

extension Modify.DynamicMemberWrap where T: NSPathCell {
    @discardableResult
    @_disfavoredOverload
    public func setObjectValue(_ obj: Foundation.NSCopying?) -> T {
        self.value.setObjectValue(obj)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func mouseEntered(with event: AppKit.NSEvent, frame: Foundation.NSRect, in view: AppKit.NSView) -> T {
        self.value.mouseEntered(with: event, frame: frame, in: view)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func mouseExited(with event: AppKit.NSEvent, frame: Foundation.NSRect, in view: AppKit.NSView) -> T {
        self.value.mouseExited(with: event, frame: frame, in: view)
        return self.value
    }

    @available(macOS 10.6, *)
    @discardableResult
    @_disfavoredOverload
    @_Concurrency.MainActor public func panel(_ sender: Any, didChangeToDirectoryURL url: Foundation.URL?) -> T {
        self.value.panel(sender, didChangeToDirectoryURL: url)
        return self.value
    }

    @available(macOS 10.5, *)
    @discardableResult
    @_disfavoredOverload
    @_Concurrency.MainActor public func panel(_ sender: Any, willExpand expanding: Swift.Bool) -> T {
        self.value.panel(sender, willExpand: expanding)
        return self.value
    }

    @available(macOS 10.5, *)
    @discardableResult
    @_disfavoredOverload
    @_Concurrency.MainActor public func panelSelectionDidChange(_ sender: Any?) -> T {
        self.value.panelSelectionDidChange(sender)
        return self.value
    }
}

#endif
