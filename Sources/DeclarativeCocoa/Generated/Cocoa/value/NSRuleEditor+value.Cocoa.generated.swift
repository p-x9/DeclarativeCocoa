
// Generated file
// DO NOT EDIT THIS FILE

#if canImport(Cocoa)
import Cocoa

extension Modify.DynamicMemberWrap where T: NSRuleEditor {
    @discardableResult
    @_disfavoredOverload
    public func reloadCriteria() -> T {
        self.value.reloadCriteria()
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func reloadPredicate() -> T {
        self.value.reloadPredicate()
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func addRow(_ sender: Any?) -> T {
        self.value.addRow(sender)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func insertRow(at rowIndex: Swift.Int, with rowType: AppKit.NSRuleEditor.RowType, asSubrowOfRow parentRow: Swift.Int, animate shouldAnimate: Swift.Bool) -> T {
        self.value.insertRow(at: rowIndex, with: rowType, asSubrowOfRow: parentRow, animate: shouldAnimate)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func setCriteria(_ criteria: [Any], andDisplayValues values: [Any], forRowAt rowIndex: Swift.Int) -> T {
        self.value.setCriteria(criteria, andDisplayValues: values, forRowAt: rowIndex)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func removeRow(at rowIndex: Swift.Int) -> T {
        self.value.removeRow(at: rowIndex)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func removeRows(at rowIndexes: Foundation.IndexSet, includeSubrows: Swift.Bool) -> T {
        self.value.removeRows(at: rowIndexes, includeSubrows: includeSubrows)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func selectRowIndexes(_ indexes: Foundation.IndexSet, byExtendingSelection extend: Swift.Bool) -> T {
        self.value.selectRowIndexes(indexes, byExtendingSelection: extend)
        return self.value
    }
}

#endif
