
// Generated file
// DO NOT EDIT THIS FILE

#if canImport(Cocoa)
import Cocoa

extension Modify.DynamicMemberWrap where T: NSLayoutManager {
    @discardableResult
    @_disfavoredOverload
    public func replaceTextStorage(_ newTextStorage: AppKit.NSTextStorage) -> T {
        self.value.replaceTextStorage(newTextStorage)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func addTextContainer(_ container: AppKit.NSTextContainer) -> T {
        self.value.addTextContainer(container)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func insertTextContainer(_ container: AppKit.NSTextContainer, at index: Swift.Int) -> T {
        self.value.insertTextContainer(container, at: index)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func removeTextContainer(at index: Swift.Int) -> T {
        self.value.removeTextContainer(at: index)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func textContainerChangedGeometry(_ container: AppKit.NSTextContainer) -> T {
        self.value.textContainerChangedGeometry(container)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func textContainerChangedTextView(_ container: AppKit.NSTextContainer) -> T {
        self.value.textContainerChangedTextView(container)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func invalidateGlyphs(forCharacterRange charRange: Foundation.NSRange, changeInLength delta: Swift.Int, actualCharacterRange actualCharRange: Foundation.NSRangePointer?) -> T {
        self.value.invalidateGlyphs(forCharacterRange: charRange, changeInLength: delta, actualCharacterRange: actualCharRange)
        return self.value
    }

    @available(macOS 10.5, *)
    @discardableResult
    @_disfavoredOverload
    public func invalidateLayout(forCharacterRange charRange: Foundation.NSRange, actualCharacterRange actualCharRange: Foundation.NSRangePointer?) -> T {
        self.value.invalidateLayout(forCharacterRange: charRange, actualCharacterRange: actualCharRange)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func invalidateDisplay(forCharacterRange charRange: Foundation.NSRange) -> T {
        self.value.invalidateDisplay(forCharacterRange: charRange)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func invalidateDisplay(forGlyphRange glyphRange: Foundation.NSRange) -> T {
        self.value.invalidateDisplay(forGlyphRange: glyphRange)
        return self.value
    }

    @available(macOS 10.11, *)
    @discardableResult
    @_disfavoredOverload
    public func processEditing(for textStorage: AppKit.NSTextStorage, edited editMask: AppKit.NSTextStorageEditActions, range newCharRange: Foundation.NSRange, changeInLength delta: Swift.Int, invalidatedRange invalidatedCharRange: Foundation.NSRange) -> T {
        self.value.processEditing(for: textStorage, edited: editMask, range: newCharRange, changeInLength: delta, invalidatedRange: invalidatedCharRange)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func ensureGlyphs(forCharacterRange charRange: Foundation.NSRange) -> T {
        self.value.ensureGlyphs(forCharacterRange: charRange)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func ensureGlyphs(forGlyphRange glyphRange: Foundation.NSRange) -> T {
        self.value.ensureGlyphs(forGlyphRange: glyphRange)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func ensureLayout(forCharacterRange charRange: Foundation.NSRange) -> T {
        self.value.ensureLayout(forCharacterRange: charRange)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func ensureLayout(forGlyphRange glyphRange: Foundation.NSRange) -> T {
        self.value.ensureLayout(forGlyphRange: glyphRange)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func ensureLayout(for container: AppKit.NSTextContainer) -> T {
        self.value.ensureLayout(for: container)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func ensureLayout(forBoundingRect bounds: Foundation.NSRect, in container: AppKit.NSTextContainer) -> T {
        self.value.ensureLayout(forBoundingRect: bounds, in: container)
        return self.value
    }

    @available(macOS 10.11, *)
    @discardableResult
    @_disfavoredOverload
    public func setGlyphs(_ glyphs: Swift.UnsafePointer<CoreGraphics.CGGlyph>, properties props: Swift.UnsafePointer<AppKit.NSLayoutManager.GlyphProperty>, characterIndexes charIndexes: Swift.UnsafePointer<Swift.Int>, font aFont: AppKit.NSFont, forGlyphRange glyphRange: Foundation.NSRange) -> T {
        self.value.setGlyphs(glyphs, properties: props, characterIndexes: charIndexes, font: aFont, forGlyphRange: glyphRange)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func setTextContainer(_ container: AppKit.NSTextContainer, forGlyphRange glyphRange: Foundation.NSRange) -> T {
        self.value.setTextContainer(container, forGlyphRange: glyphRange)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func setLineFragmentRect(_ fragmentRect: Foundation.NSRect, forGlyphRange glyphRange: Foundation.NSRange, usedRect: Foundation.NSRect) -> T {
        self.value.setLineFragmentRect(fragmentRect, forGlyphRange: glyphRange, usedRect: usedRect)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func setExtraLineFragmentRect(_ fragmentRect: Foundation.NSRect, usedRect: Foundation.NSRect, textContainer container: AppKit.NSTextContainer) -> T {
        self.value.setExtraLineFragmentRect(fragmentRect, usedRect: usedRect, textContainer: container)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func setLocation(_ location: Foundation.NSPoint, forStartOfGlyphRange glyphRange: Foundation.NSRange) -> T {
        self.value.setLocation(location, forStartOfGlyphRange: glyphRange)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func setNotShownAttribute(_ flag: Swift.Bool, forGlyphAt glyphIndex: Swift.Int) -> T {
        self.value.setNotShownAttribute(flag, forGlyphAt: glyphIndex)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func setDrawsOutsideLineFragment(_ flag: Swift.Bool, forGlyphAt glyphIndex: Swift.Int) -> T {
        self.value.setDrawsOutsideLineFragment(flag, forGlyphAt: glyphIndex)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func setAttachmentSize(_ attachmentSize: Foundation.NSSize, forGlyphRange glyphRange: Foundation.NSRange) -> T {
        self.value.setAttachmentSize(attachmentSize, forGlyphRange: glyphRange)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func getFirstUnlaidCharacterIndex(_ charIndex: Swift.UnsafeMutablePointer<Swift.Int>?, glyphIndex: Swift.UnsafeMutablePointer<Swift.Int>?) -> T {
        self.value.getFirstUnlaidCharacterIndex(charIndex, glyphIndex: glyphIndex)
        return self.value
    }

    @available(macOS 10.11, *)
    @discardableResult
    @_disfavoredOverload
    public func enumerateLineFragments(forGlyphRange glyphRange: Foundation.NSRange, using block: @escaping (Foundation.NSRect, Foundation.NSRect, AppKit.NSTextContainer, Foundation.NSRange, Swift.UnsafeMutablePointer<ObjectiveC.ObjCBool>) -> Swift.Void) -> T {
        self.value.enumerateLineFragments(forGlyphRange: glyphRange, using: block)
        return self.value
    }

    @available(macOS 10.11, *)
    @discardableResult
    @_disfavoredOverload
    public func enumerateEnclosingRects(forGlyphRange glyphRange: Foundation.NSRange, withinSelectedGlyphRange selectedRange: Foundation.NSRange, in textContainer: AppKit.NSTextContainer, using block: @escaping (Foundation.NSRect, Swift.UnsafeMutablePointer<ObjectiveC.ObjCBool>) -> Swift.Void) -> T {
        self.value.enumerateEnclosingRects(forGlyphRange: glyphRange, withinSelectedGlyphRange: selectedRange, in: textContainer, using: block)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func drawBackground(forGlyphRange glyphsToShow: Foundation.NSRange, at origin: Foundation.NSPoint) -> T {
        self.value.drawBackground(forGlyphRange: glyphsToShow, at: origin)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func drawGlyphs(forGlyphRange glyphsToShow: Foundation.NSRange, at origin: Foundation.NSPoint) -> T {
        self.value.drawGlyphs(forGlyphRange: glyphsToShow, at: origin)
        return self.value
    }

    @available(macOS 10.15, *)
    @discardableResult
    @_disfavoredOverload
    public func showCGGlyphs(_ glyphs: Swift.UnsafePointer<CoreGraphics.CGGlyph>, positions: Swift.UnsafePointer<CoreFoundation.CGPoint>, count glyphCount: Swift.Int, font: AppKit.NSFont, textMatrix: CoreFoundation.CGAffineTransform, attributes: [Foundation.NSAttributedString.Key : Any] = [:], in CGContext: CoreGraphics.CGContext) -> T {
        self.value.showCGGlyphs(glyphs, positions: positions, count: glyphCount, font: font, textMatrix: textMatrix, attributes: attributes, in: CGContext)
        return self.value
    }

    @available(macOS 10.6, *)
    @discardableResult
    @_disfavoredOverload
    public func fillBackgroundRectArray(_ rectArray: Swift.UnsafePointer<Foundation.NSRect>, count rectCount: Swift.Int, forCharacterRange charRange: Foundation.NSRange, color: AppKit.NSColor) -> T {
        self.value.fillBackgroundRectArray(rectArray, count: rectCount, forCharacterRange: charRange, color: color)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func drawUnderline(forGlyphRange glyphRange: Foundation.NSRange, underlineType underlineVal: AppKit.NSUnderlineStyle, baselineOffset: CoreFoundation.CGFloat, lineFragmentRect lineRect: Foundation.NSRect, lineFragmentGlyphRange lineGlyphRange: Foundation.NSRange, containerOrigin: Foundation.NSPoint) -> T {
        self.value.drawUnderline(forGlyphRange: glyphRange, underlineType: underlineVal, baselineOffset: baselineOffset, lineFragmentRect: lineRect, lineFragmentGlyphRange: lineGlyphRange, containerOrigin: containerOrigin)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func underlineGlyphRange(_ glyphRange: Foundation.NSRange, underlineType underlineVal: AppKit.NSUnderlineStyle, lineFragmentRect lineRect: Foundation.NSRect, lineFragmentGlyphRange lineGlyphRange: Foundation.NSRange, containerOrigin: Foundation.NSPoint) -> T {
        self.value.underlineGlyphRange(glyphRange, underlineType: underlineVal, lineFragmentRect: lineRect, lineFragmentGlyphRange: lineGlyphRange, containerOrigin: containerOrigin)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func drawStrikethrough(forGlyphRange glyphRange: Foundation.NSRange, strikethroughType strikethroughVal: AppKit.NSUnderlineStyle, baselineOffset: CoreFoundation.CGFloat, lineFragmentRect lineRect: Foundation.NSRect, lineFragmentGlyphRange lineGlyphRange: Foundation.NSRange, containerOrigin: Foundation.NSPoint) -> T {
        self.value.drawStrikethrough(forGlyphRange: glyphRange, strikethroughType: strikethroughVal, baselineOffset: baselineOffset, lineFragmentRect: lineRect, lineFragmentGlyphRange: lineGlyphRange, containerOrigin: containerOrigin)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func strikethroughGlyphRange(_ glyphRange: Foundation.NSRange, strikethroughType strikethroughVal: AppKit.NSUnderlineStyle, lineFragmentRect lineRect: Foundation.NSRect, lineFragmentGlyphRange lineGlyphRange: Foundation.NSRange, containerOrigin: Foundation.NSPoint) -> T {
        self.value.strikethroughGlyphRange(glyphRange, strikethroughType: strikethroughVal, lineFragmentRect: lineRect, lineFragmentGlyphRange: lineGlyphRange, containerOrigin: containerOrigin)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func showAttachmentCell(_ cell: AppKit.NSCell, in rect: Foundation.NSRect, characterIndex attachmentIndex: Swift.Int) -> T {
        self.value.showAttachmentCell(cell, in: rect, characterIndex: attachmentIndex)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func setLayoutRect(_ rect: Foundation.NSRect, for block: AppKit.NSTextBlock, glyphRange: Foundation.NSRange) -> T {
        self.value.setLayoutRect(rect, for: block, glyphRange: glyphRange)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func setBoundsRect(_ rect: Foundation.NSRect, for block: AppKit.NSTextBlock, glyphRange: Foundation.NSRange) -> T {
        self.value.setBoundsRect(rect, for: block, glyphRange: glyphRange)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func setTemporaryAttributes(_ attrs: [Foundation.NSAttributedString.Key : Any], forCharacterRange charRange: Foundation.NSRange) -> T {
        self.value.setTemporaryAttributes(attrs, forCharacterRange: charRange)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func addTemporaryAttributes(_ attrs: [Foundation.NSAttributedString.Key : Any] = [:], forCharacterRange charRange: Foundation.NSRange) -> T {
        self.value.addTemporaryAttributes(attrs, forCharacterRange: charRange)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func removeTemporaryAttribute(_ attrName: Foundation.NSAttributedString.Key, forCharacterRange charRange: Foundation.NSRange) -> T {
        self.value.removeTemporaryAttribute(attrName, forCharacterRange: charRange)
        return self.value
    }

    @available(macOS 10.5, *)
    @discardableResult
    @_disfavoredOverload
    public func addTemporaryAttribute(_ attrName: Foundation.NSAttributedString.Key, value: Any, forCharacterRange charRange: Foundation.NSRange) -> T {
        self.value.addTemporaryAttribute(attrName, value: value, forCharacterRange: charRange)
        return self.value
    }

    @available(macOS 10.7, *)
    @discardableResult
    @_disfavoredOverload
    public func encode(with coder: Foundation.NSCoder) -> T {
        self.value.encode(with: coder)
        return self.value
    }

    @available(macOS 10.7, *)
    @discardableResult
    @_disfavoredOverload
    public func insertGlyphs(_ glyphs: Swift.UnsafePointer<AppKit.NSGlyph>, length: Swift.Int, forStartingGlyphAt glyphIndex: Swift.Int, characterIndex charIndex: Swift.Int) -> T {
        self.value.insertGlyphs(glyphs, length: length, forStartingGlyphAt: glyphIndex, characterIndex: charIndex)
        return self.value
    }

    @available(macOS 10.7, *)
    @discardableResult
    @_disfavoredOverload
    public func setIntAttribute(_ attributeTag: Swift.Int, value val: Swift.Int, forGlyphAt glyphIndex: Swift.Int) -> T {
        self.value.setIntAttribute(attributeTag, value: val, forGlyphAt: glyphIndex)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    @available(macOS, introduced: 10.0, deprecated: 10.11, message: "Use -setGlyphs:properties:characterIndexes:font:forGlyphRange instead")
    public func insertGlyph(_ glyph: AppKit.NSGlyph, atGlyphIndex glyphIndex: Swift.Int, characterIndex charIndex: Swift.Int) -> T {
        self.value.insertGlyph(glyph, atGlyphIndex: glyphIndex, characterIndex: charIndex)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    @available(macOS, introduced: 10.0, deprecated: 10.11, message: "Use -setGlyphs:properties:characterIndexes:font:forGlyphRange instead")
    public func replaceGlyph(at glyphIndex: Swift.Int, withGlyph newGlyph: AppKit.NSGlyph) -> T {
        self.value.replaceGlyph(at: glyphIndex, withGlyph: newGlyph)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    @available(macOS, introduced: 10.0, deprecated: 10.11, message: "Use -setGlyphs:properties:characterIndexes:font:forGlyphRange instead")
    public func deleteGlyphs(in glyphRange: Foundation.NSRange) -> T {
        self.value.deleteGlyphs(in: glyphRange)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    @available(macOS, introduced: 10.0, deprecated: 10.11, message: "Use -setGlyphs:properties:characterIndexes:font:forGlyphRange instead")
    public func setCharacterIndex(_ charIndex: Swift.Int, forGlyphAt glyphIndex: Swift.Int) -> T {
        self.value.setCharacterIndex(charIndex, forGlyphAt: glyphIndex)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    @available(macOS, introduced: 10.5, deprecated: 10.11, message: "Use -setGlyphs:properties:characterIndexes:font:forGlyphRange instead")
    public func invalidateGlyphs(onLayoutInvalidationForGlyphRange glyphRange: Foundation.NSRange) -> T {
        self.value.invalidateGlyphs(onLayoutInvalidationForGlyphRange: glyphRange)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    @available(macOS, introduced: 10.0, deprecated: 10.11, message: "Use -invalidateLayoutForCharacterRange:actualCharacterRange: instead")
    public func invalidateLayout(forCharacterRange charRange: Foundation.NSRange, isSoft flag: Swift.Bool, actualCharacterRange actualCharRange: Foundation.NSRangePointer?) -> T {
        self.value.invalidateLayout(forCharacterRange: charRange, isSoft: flag, actualCharacterRange: actualCharRange)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    @available(macOS, introduced: 10.0, deprecated: 10.11, message: "Use -processEditingForTextStorage:edited:range:changeInLength:invalidatedRange: instead")
    public func textStorage(_ str: AppKit.NSTextStorage, edited editedMask: Swift.Int, range newCharRange: Foundation.NSRange, changeInLength delta: Swift.Int, invalidatedRange invalidatedCharRange: Foundation.NSRange) -> T {
        self.value.textStorage(str, edited: editedMask, range: newCharRange, changeInLength: delta, invalidatedRange: invalidatedCharRange)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    @available(macOS, introduced: 10.5, deprecated: 10.11, message: "Use -setLocation:forStartOfGlyphRange: instead")
    public func setLocations(_ locations: Foundation.NSPointArray, startingGlyphIndexes glyphIndexes: Swift.UnsafeMutablePointer<Swift.Int>, count: Swift.Int, forGlyphRange glyphRange: Foundation.NSRange) -> T {
        self.value.setLocations(locations, startingGlyphIndexes: glyphIndexes, count: count, forGlyphRange: glyphRange)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    @available(macOS, unavailable, introduced: 10.0, deprecated: 10.7, message: "Use -showCGGlyphs:positions:count:font:matrix:attributes:inContext: instead")
    public func showPackedGlyphs(_ glyphs: Swift.UnsafeMutablePointer<Swift.CChar>, length glyphLen: Swift.Int, glyphRange: Foundation.NSRange, at point: Foundation.NSPoint, font: AppKit.NSFont, color: AppKit.NSColor, printingAdjustment: Foundation.NSSize) -> T {
        self.value.showPackedGlyphs(glyphs, length: glyphLen, glyphRange: glyphRange, at: point, font: font, color: color, printingAdjustment: printingAdjustment)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    @available(macOS, introduced: 10.7, deprecated: 10.15)
    public func showCGGlyphs(_ glyphs: Swift.UnsafePointer<CoreGraphics.CGGlyph>, positions: Swift.UnsafePointer<Foundation.NSPoint>, count glyphCount: Swift.Int, font: AppKit.NSFont, matrix textMatrix: Foundation.AffineTransform, attributes: [Foundation.NSAttributedString.Key : Any] = [:], in graphicsContext: AppKit.NSGraphicsContext) -> T {
        self.value.showCGGlyphs(glyphs, positions: positions, count: glyphCount, font: font, matrix: textMatrix, attributes: attributes, in: graphicsContext)
        return self.value
    }
}

#endif
