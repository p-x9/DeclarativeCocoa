
// Generated file
// DO NOT EDIT THIS FILE

#if canImport(Cocoa)
import Cocoa

extension Modify.DynamicMemberWrap where T: NSControl {
    @discardableResult
    @_disfavoredOverload
    public func sizeToFit() -> T {
        self.value.sizeToFit()
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func takeIntValueFrom(_ sender: Any?) -> T {
        self.value.takeIntValueFrom(sender)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func takeFloatValueFrom(_ sender: Any?) -> T {
        self.value.takeFloatValueFrom(sender)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func takeDoubleValueFrom(_ sender: Any?) -> T {
        self.value.takeDoubleValueFrom(sender)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func takeStringValueFrom(_ sender: Any?) -> T {
        self.value.takeStringValueFrom(sender)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func takeObjectValueFrom(_ sender: Any?) -> T {
        self.value.takeObjectValueFrom(sender)
        return self.value
    }

    @available(macOS 10.5, *)
    @discardableResult
    @_disfavoredOverload
    public func takeIntegerValueFrom(_ sender: Any?) -> T {
        self.value.takeIntegerValueFrom(sender)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func performClick(_ sender: Any?) -> T {
        self.value.performClick(sender)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func draw(withExpansionFrame contentFrame: Foundation.NSRect, in view: AppKit.NSView) -> T {
        self.value.draw(withExpansionFrame: contentFrame, in: view)
        return self.value
    }

    @available(macOS 10.7, *)
    @discardableResult
    @_disfavoredOverload
    public func invalidateIntrinsicContentSize(for cell: AppKit.NSCell) -> T {
        self.value.invalidateIntrinsicContentSize(for: cell)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    @available(macOS, unavailable, introduced: 10.0, deprecated: 10.0, message: "APIs deprecated as of macOS 10.9 and earlier are unavailable in Swift")
    public func setFloatingPointFormat(_ autoRange: Swift.Bool, left leftDigits: Swift.Int, right rightDigits: Swift.Int) -> T {
        self.value.setFloatingPointFormat(autoRange, left: leftDigits, right: rightDigits)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    @available(macOS, introduced: 10.0, deprecated: 10.14, message: "Set the needsDisplay property to YES instead")
    public func setNeedsDisplay() -> T {
        self.value.setNeedsDisplay()
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    @available(macOS, introduced: 10.0, deprecated: 10.14, message: "Override -layout instead. This method should never be called")
    public func calcSize() -> T {
        self.value.calcSize()
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func updateCell(_ cell: AppKit.NSCell) -> T {
        self.value.updateCell(cell)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func updateCellInside(_ cell: AppKit.NSCell) -> T {
        self.value.updateCellInside(cell)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func drawCellInside(_ cell: AppKit.NSCell) -> T {
        self.value.drawCellInside(cell)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func drawCell(_ cell: AppKit.NSCell) -> T {
        self.value.drawCell(cell)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func selectCell(_ cell: AppKit.NSCell) -> T {
        self.value.selectCell(cell)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    public func validateEditing() -> T {
        self.value.validateEditing()
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func edit(withFrame rect: Foundation.NSRect, editor textObj: AppKit.NSText, delegate: Any?, event: AppKit.NSEvent) -> T {
        self.value.edit(withFrame: rect, editor: textObj, delegate: delegate, event: event)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func select(withFrame rect: Foundation.NSRect, editor textObj: AppKit.NSText, delegate: Any?, start selStart: Swift.Int, length selLength: Swift.Int) -> T {
        self.value.select(withFrame: rect, editor: textObj, delegate: delegate, start: selStart, length: selLength)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func endEditing(_ textObj: AppKit.NSText) -> T {
        self.value.endEditing(textObj)
        return self.value
    }
}

#endif
