
// Generated file
// DO NOT EDIT THIS FILE

#if canImport(Cocoa)
import Cocoa

extension Modify.DynamicMemberWrap where T: NSViewController {
    @discardableResult
    @_disfavoredOverload
    public func loadView() -> T {
        self.value.loadView()
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    @_Concurrency.MainActor public func commitEditing(withDelegate delegate: Any?, didCommit didCommitSelector: ObjectiveC.Selector?, contextInfo: Swift.UnsafeMutableRawPointer?) -> T {
        self.value.commitEditing(withDelegate: delegate, didCommit: didCommitSelector, contextInfo: contextInfo)
        return self.value
    }

    @discardableResult
    @_disfavoredOverload
    @_Concurrency.MainActor public func discardEditing() -> T {
        self.value.discardEditing()
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func viewDidLoad() -> T {
        self.value.viewDidLoad()
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func viewWillAppear() -> T {
        self.value.viewWillAppear()
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func viewDidAppear() -> T {
        self.value.viewDidAppear()
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func viewWillDisappear() -> T {
        self.value.viewWillDisappear()
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func viewDidDisappear() -> T {
        self.value.viewDidDisappear()
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func updateViewConstraints() -> T {
        self.value.updateViewConstraints()
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func viewWillLayout() -> T {
        self.value.viewWillLayout()
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func viewDidLayout() -> T {
        self.value.viewDidLayout()
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    @_Concurrency.MainActor public func prepare(for segue: AppKit.NSStoryboardSegue, sender: Any?) -> T {
        self.value.prepare(for: segue, sender: sender)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    @_Concurrency.MainActor public func performSegue(withIdentifier identifier: AppKit.NSStoryboardSegue.Identifier, sender: Any?) -> T {
        self.value.performSegue(withIdentifier: identifier, sender: sender)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func beginRequest(with context: Foundation.NSExtensionContext) -> T {
        self.value.beginRequest(with: context)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func addChild(_ childViewController: AppKit.NSViewController) -> T {
        self.value.addChild(childViewController)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func removeFromParent() -> T {
        self.value.removeFromParent()
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func insertChild(_ childViewController: AppKit.NSViewController, at index: Swift.Int) -> T {
        self.value.insertChild(childViewController, at: index)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func removeChild(at index: Swift.Int) -> T {
        self.value.removeChild(at: index)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func preferredContentSizeDidChange(for viewController: AppKit.NSViewController) -> T {
        self.value.preferredContentSizeDidChange(for: viewController)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func viewWillTransition(to newSize: Foundation.NSSize) -> T {
        self.value.viewWillTransition(to: newSize)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func presentAsSheet(_ viewController: AppKit.NSViewController) -> T {
        self.value.presentAsSheet(viewController)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func presentAsModalWindow(_ viewController: AppKit.NSViewController) -> T {
        self.value.presentAsModalWindow(viewController)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func present(_ viewController: AppKit.NSViewController, asPopoverRelativeTo positioningRect: Foundation.NSRect, of positioningView: AppKit.NSView, preferredEdge: Foundation.NSRectEdge, behavior: AppKit.NSPopover.Behavior) -> T {
        self.value.present(viewController, asPopoverRelativeTo: positioningRect, of: positioningView, preferredEdge: preferredEdge, behavior: behavior)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func transition(from fromViewController: AppKit.NSViewController, to toViewController: AppKit.NSViewController, options: AppKit.NSViewController.TransitionOptions = [], completionHandler completion: (() -> Swift.Void)? = nil) -> T {
        self.value.transition(from: fromViewController, to: toViewController, options: options, completionHandler: completion)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func present(_ viewController: AppKit.NSViewController, animator: AppKit.NSViewControllerPresentationAnimator) -> T {
        self.value.present(viewController, animator: animator)
        return self.value
    }

    @available(macOS 10.10, *)
    @discardableResult
    @_disfavoredOverload
    public func dismiss(_ viewController: AppKit.NSViewController) -> T {
        self.value.dismiss(viewController)
        return self.value
    }
}

#endif
