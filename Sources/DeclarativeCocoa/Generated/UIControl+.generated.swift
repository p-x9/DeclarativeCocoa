
// Generated file
// DO NOT EDIT THIS FILE

import UIKit

extension Modify.DynamicMemberWrap where T: UIControl {
    @discardableResult
    public func addTarget(_ target: Any?, action: Selector, for controlEvents: UIControl.Event) -> T {
        value.addTarget(target, action: action, for: controlEvents)
        return value
    }

    @discardableResult
    public func removeTarget(_ target: Any?, action: Selector?, for controlEvents: UIControl.Event) -> T {
        value.removeTarget(target, action: action, for: controlEvents)
        return value
    }

    @available(iOS 14.0, *)
    @discardableResult
    public func addAction(_ action: UIAction, for controlEvents: UIControl.Event) -> T {
        value.addAction(action, for: controlEvents)
        return value
    }

    @available(iOS 14.0, *)
    @discardableResult
    public func removeAction(_ action: UIAction, for controlEvents: UIControl.Event) -> T {
        value.removeAction(action, for: controlEvents)
        return value
    }

    @available(iOS 14.0, *)
    @discardableResult
    public func removeAction(identifiedBy actionIdentifier: UIAction.Identifier, for controlEvents: UIControl.Event) -> T {
        value.removeAction(identifiedBy: actionIdentifier, for: controlEvents)
        return value
    }

    @discardableResult
    public func sendAction(_ action: Selector, to target: Any?, for event: UIEvent?) -> T {
        value.sendAction(action, to: target, for: event)
        return value
    }

    @available(iOS 14.0, *)
    @discardableResult
    public func sendAction(_ action: UIAction) -> T {
        value.sendAction(action)
        return value
    }
    
    @discardableResult
    public func sendActions(for controlEvents: UIControl.Event) -> T {
        value.sendActions(for: controlEvents)
        return value
    }

    @available(iOS 14.0, *)
    @discardableResult
    public func contextMenuInteraction(_ interaction: UIContextMenuInteraction, willDisplayMenuFor configuration: UIContextMenuConfiguration, animator: UIContextMenuInteractionAnimating?) -> T {
        value.contextMenuInteraction(interaction, willDisplayMenuFor: configuration, animator: animator)
        return value
    }

    @available(iOS 14.0, *)
    @discardableResult
    public func contextMenuInteraction(_ interaction: UIContextMenuInteraction, willEndFor configuration: UIContextMenuConfiguration, animator: UIContextMenuInteractionAnimating?) -> T {
        value.contextMenuInteraction(interaction, willEndFor: configuration, animator: animator)
        return value
    }
}
